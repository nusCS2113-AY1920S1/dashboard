[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "clean {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    delete \u0027savedProjects.json\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    delete \u0027logs\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "jacoco {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    toolVersion \u003d \"0.8.4\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        xml.enabled true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        csv.enabled true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    jacocoReportPath \u0027build/reports/jacoco/test/jacocoTestReport.xml\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "version \u00270.1.3\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    mainClassName \u003d \"launcher.Duke\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    compile group: \u0027org.apache.logging.log4j\u0027, name: \u0027log4j-core\u0027, version: \u00272.12.1\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "//    compile group:\"com.fasterxml.jackson.core\", name:\"jackson-core\", version:\u00272.4.2\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "//    compile group:\"com.fasterxml.jackson.core\", name:\"jackson-databind\", version:\u00272.4.2\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "//    compile group:\"com.fasterxml.jackson.core\", name:\"jackson-annotations\", version:\u00272.4.2\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 22,
      "Lucria": 24,
      "-": 38,
      "Dkenobi": 13
    }
  },
  {
    "path": "src/main/java/controllers/AssignmentController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class AssignmentController {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cString\u003e errorMessages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cString\u003e successMessages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private Project project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * A Controller class which parses the input from the user to get a list of valid"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * task and member indexes, and manages the assignment to and removal of tasks from members."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param project The which the user is managing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public AssignmentController(Project project) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.errorMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.successMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Does the actual assignment of task by calling on the project and establishing the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * necessary links between tasks and members. Collates messages to inform user of"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * successful assignments/unassignments."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input The input from the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void assignAndUnassign(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e assignmentParams \u003d parserHelper.parseAssignmentParams(input, project);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validTaskIndexes \u003d assignmentParams.get(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validAssignees \u003d assignmentParams.get(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validUnassignees \u003d assignmentParams.get(2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (validAssignees.size() \u003d\u003d 0 \u0026\u0026 validUnassignees.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            errorMessages.add(\"Insufficient parameters! Indicate the member whom you wish to assign or remove!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            errorMessages.add(\"Format is \\\"assign task -i TASK_INDEX -to [MEMBER_INDEX] -rm [MEMBER_INDEX]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            errorMessages.add(\"You must either assign a task to someone, or remove, or both!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Project project \u003d this.project;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer taskIndex : validTaskIndexes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Task task \u003d project.getTask(taskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            successMessages.add(\"For task \" + taskIndex + \" (\" + task.getTaskName() + \"):\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            //assigning tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (Integer assigneeIndex : validAssignees) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                Member member \u003d project.getMembers().getMember(assigneeIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (project.containsAssignment(task, member)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    successMessages.add(\"Task has already been assigned to member \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + assigneeIndex + \" (\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + member.getName() + \").\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.createAssignment(task, member);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    successMessages.add(\"Assigned to member \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + assigneeIndex + \" (\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + member.getName() + \").\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            //unassigning tasks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (Integer unassigneeIndex : validUnassignees) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                Member member \u003d project.getMembers().getMember(unassigneeIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (!project.containsAssignment(task, member)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    successMessages.add(\"Task cannot be unassigned from member \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + unassigneeIndex + \" (\" + member.getName() + \") as it was \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + \"not assigned in the first place!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.removeAssignment(member, task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    successMessages.add(\"Unassigned task from member \" + unassigneeIndex"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + \" (\" + member.getName() + \").\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns messages about invalid inputs to be shown to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return an ArrayList of error messages that arise from invalid inputs."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getErrorMessages() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return errorMessages;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns messages about successful assignments for valid tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return an ArrayList of success messages."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getSuccessMessages() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return successMessages;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 85,
      "iamabhishek98": 4,
      "Lucria": 7
    }
  },
  {
    "path": "src/main/java/controllers/ConsoleInputController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.ViewHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.DukeLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ConsoleInputController implements IController {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String managingProjectIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ViewHelper viewHelper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectRepository : takes in a projectRepository."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ConsoleInputController(ProjectRepository projectRepository) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.projectRepository \u003d projectRepository;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.managingProjectIndex \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.viewHelper \u003d new ViewHelper();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method that is called upon receiving commands from CLI."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input : Input typed by user into CLI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] onCommandReceived(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logInfo(ConsoleInputController.class, \"input:\u0027\" + input + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Scanner inputReader \u003d new Scanner(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String command \u003d inputReader.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return end();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        case \"create\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return commandCreate(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return commandList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        case \"manage\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return commandManage(inputReader);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return commandDelete(inputReader);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return commandHelp();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Invalid inputs. Please refer to User Guide or type help!\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Creates a new project with a given name and a number of numbers."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param input To read the input from the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String[] commandCreate(String input) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        boolean isProjectCreated \u003d projectRepository.addToRepo(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (!isProjectCreated) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Creation of Project failed. Please check parameters given!\"};"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Project created!\"};"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Method called when users wishes to view all Projects"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * that are currently created or stored."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String[] commandList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e allProjectsDetails \u003d projectRepository.getAllProjectsDetailsForTable();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (allProjectsDetails.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"You currently have no projects!\"};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            System.out.println(\"Here are all the Projects you are managing:\"); // Need to change this out."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return viewHelper.consolePrintTable(allProjectsDetails);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Manage the project."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param inputReader To read the input from the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String[] commandManage(Scanner inputReader) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (inputReader.hasNext()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            this.managingProjectIndex \u003d inputReader.next();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"Now managing \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                        + projectRepository.getItem(Integer.parseInt(managingProjectIndex)).getName()};"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return new String[] {\"Please enter the correct index of an existing Project!\"};"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Please enter a project number!\"};"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Deletes a project."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param inputReader To read the input from the user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String[] commandDelete(Scanner inputReader) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (inputReader.hasNext()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            int projectIndex \u003d Integer.parseInt(inputReader.next());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            boolean isProjectDeleted \u003d this.projectRepository.deleteItem(projectIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            if (isProjectDeleted) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"Project \" + projectIndex + \" has been deleted\"};"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"Index out of bounds! Please check project index!\"};"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Please enter a project number to delete\"};"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Displays the set of the commands which can be used."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String[] commandHelp() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        // TODO help page displaying all commands available"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        // Not implemented"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return new String[] {\"Not implemented\"};"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Method to be called when user says bye to exit the program."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] end() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logInfo(ConsoleInputController.class, \"ArchDuke have stopped.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return new String[] { \"Bye. Hope to see you again soon!\" };"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getManagingProjectIndex() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return managingProjectIndex;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 24,
      "Lucria": 16,
      "-": 34,
      "Dkenobi": 66
    }
  },
  {
    "path": "src/main/java/controllers/IController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface IController {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    String[] onCommandReceived(String input);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 4,
      "Dkenobi": 1
    }
  },
  {
    "path": "src/main/java/controllers/ProjectInputController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.IProject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.IReminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.Reminder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.AssignmentViewHelper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.ViewHelper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.MemberFactory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.factories.ReminderFactory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.TaskFactory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.DukeLogger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ProjectInputController implements IController {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private Scanner manageProjectInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private MemberFactory memberFactory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private TaskFactory taskFactory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private boolean isManagingAProject;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ViewHelper viewHelper;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Constructor for ProjectInputController takes in a View model and a ProjectRepository."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * ProjectInputController is responsible for handling user input when user chooses to manage a project."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param projectRepository The object holding all projects."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ProjectInputController(ProjectRepository projectRepository) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.manageProjectInput \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.projectRepository \u003d projectRepository;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.memberFactory \u003d new MemberFactory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.taskFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.isManagingAProject \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.viewHelper \u003d new ViewHelper();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Allows the user to manage the project by branching into the project of their choice."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input User input containing project index number (to add to project class)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] onCommandReceived(String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        //DukeLogger.logInfo(ProjectInputController.class, \"Managing project: \" + input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int projectNumber;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectNumber \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            isManagingAProject \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Input is not a number! Please input a proper project index!\"};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project projectToManage \u003d projectRepository.getItem(projectNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        isManagingAProject \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return manageProject(projectToManage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Manages the project."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return Boolean variable giving status of whether the exit command is entered."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String[] manageProject(Project projectToManage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String[] responseToView \u003d {\"Please enter a command.\"};"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (manageProjectInput.hasNextLine()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            String projectFullCommand \u003d manageProjectInput.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            DukeLogger.logInfo(ProjectInputController.class, \"Managing:\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    + projectToManage.getName() + \",input:\u0027\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + projectFullCommand + \"\u0027\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            if (projectFullCommand.matches(\"exit\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                isManagingAProject \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectExit(projectToManage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"add member.*\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d  projectAddMember(projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                // jsonConverter.saveProject(projectToManage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"edit member.*\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectEditMember(projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                // jsonConverter.saveProject(projectToManage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"delete member.*\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectDeleteMember(projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                // jsonConverter.saveProject(projectToManage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"view members.*\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectViewMembers(projectToManage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            } else if (projectFullCommand.matches(\"role.*\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectRoleMembers(projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                // jsonConverter.saveProject(projectToManage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"view credits.*\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectViewCredits(projectToManage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"add task.*\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectAddTask(projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                // jsonConverter.saveProject(projectToManage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"view tasks.*\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectViewTasks(projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } else if (projectFullCommand.matches(\"view assignments.*\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectViewAssignments(projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else if (projectFullCommand.matches(\"view task requirements.*\")) { // need to refactor this"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectViewTaskRequirements(projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"edit task requirements.*\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectEditTaskRequirements(projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                // jsonConverter.saveProject(projectToManage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"edit task.*\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectEditTask(projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                // jsonConverter.saveProject(projectToManage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"delete task.*\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectDeleteTask(projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                // jsonConverter.saveProject(projectToManage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"assign task.*\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectAssignTask(projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                // jsonConverter.saveProject(projectToManage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"add reminder.*\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseToView \u003d projectAddReminder(projectToManage,projectFullCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                // jsonConverter.saveProject(projectToManage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (projectFullCommand.matches(\"bye\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return end();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"Invalid command. Try again!\"};"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return responseToView;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Adds roles to Members in a Project."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param projectToManage : The project specified by the user."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param projectFullCommand : User input."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectRoleMembers(Project projectToManage, String projectFullCommand) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String parsedCommands \u003d projectFullCommand.substring(5);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String[] commandOptions \u003d parsedCommands.split(\" -n \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (commandOptions.length !\u003d 2) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Wrong command format! Please enter role INDEX -n ROLE_NAME\"};"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int memberIndex \u003d Integer.parseInt(commandOptions[0]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember selectedMember \u003d projectToManage.getMembers().getMember(memberIndex);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        selectedMember.setRole(commandOptions[1]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return new String[] {\"Successfully changed the role of \" + selectedMember.getName() + \" to \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                                + selectedMember.getRole() + \".\"};"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Adds a member to the current project."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectAddMember(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (projectCommand.length() \u003c 11) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new String[] {\"Add member command minimum usage must be \\\"add member -n NAME\\\"!\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                 \"Please refer to user guide for additional details.\"};"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String memberDetails \u003d projectCommand.substring(11);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int numberOfCurrentMembers \u003d projectToManage.getNumOfMembers();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        memberDetails \u003d memberDetails + \" -x \" + numberOfCurrentMembers;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        IMember newMember \u003d memberFactory.create(memberDetails);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (newMember.getName() !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectToManage.addMember((Member) newMember);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new String[] {\"Added new member to: \" + projectToManage.getName(), \"\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"Member details \" + newMember.getDetails()};"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new String[] {newMember.getDetails()};"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Updates the details of a given member in the current project."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectEditMember(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int memberIndexNumber \u003d Integer.parseInt(projectCommand.substring(12).split(\" \")[0]);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (projectToManage.getNumOfMembers() \u003e\u003d memberIndexNumber \u0026\u0026 memberIndexNumber \u003e 0) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String updatedMemberDetails \u003d projectCommand.substring(projectCommand.indexOf(\"-\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                projectToManage.editMember(memberIndexNumber,updatedMemberDetails);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] { \"Updated member details with the index number \" + memberIndexNumber};"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"The member index entered is invalid.\"};"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Please enter the updated member details format correctly.\"};"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Deletes a member from the current project."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectDeleteMember(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int memberIndexNumber \u003d Integer.parseInt(projectCommand.substring(14).split(\" \")[0]);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (projectToManage.getNumOfMembers() \u003e\u003d memberIndexNumber) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                Member memberToRemove \u003d projectToManage.getMembers().getMember(memberIndexNumber);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                projectToManage.removeMember(memberToRemove);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[]{\"Removed member with the index number \" + memberIndexNumber};"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[]{\"The member index entered is invalid.\"};"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"Please enter the index number of the member to be deleted correctly.\"};"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Displays all the members in the current project."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Can be updated later on to include more information (tasks etc)."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectViewMembers(Project projectToManage) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e allMemberDetailsForTable \u003d projectToManage.getMembers().getAllMemberDetailsForTable();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String header \u003d \"Members of \" + projectToManage.getName() + \":\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        allMemberDetailsForTable.add(0, header);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logDebug(ProjectInputController.class, allMemberDetailsForTable.toString());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e tablesToPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        tablesToPrint.add(allMemberDetailsForTable);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return viewHelper.consolePrintTable(tablesToPrint);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Displays the members’ credits, their index number, name, and name of tasks completed."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectViewCredits(IProject projectToManage) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e allCredits \u003d projectToManage.getCredits();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logDebug(ProjectInputController.class, allCredits.toString());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (allCredits.isEmpty()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            allCredits.add(0, \"There are no members in this project.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            allCredits.add(0, \"Here are all the member credits: \");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return allCredits.toArray(new String[0]);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Adds a task to the current project."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectAddTask(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ITask newTask \u003d taskFactory.createTask(projectCommand.substring(9));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (newTask.getDetails() !\u003d null) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                projectToManage.addTask((Task) newTask);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"Added new task to the list.\"};"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Failed to create new task. Please ensure all \""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        + \"necessary parameters are given\"};"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (NumberFormatException | ParseException e) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Please enter your task format correctly.\"};"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Updates the task details of a given task in the project."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectEditTask(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int taskIndexNumber \u003d Integer.parseInt(projectCommand.substring(10).split(\" \")[0]);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String updatedTaskDetails \u003d projectCommand.substring(projectCommand.indexOf(\"-\"));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (projectToManage.getNumOfTasks() \u003e\u003d taskIndexNumber \u0026\u0026 taskIndexNumber \u003e 0) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                projectToManage.editTask(taskIndexNumber, updatedTaskDetails);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] { \"The task has been updated!\" };"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"The task index entered is invalid.\"};"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Please enter your task format correctly.\"};"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Deletes a task from the project."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectDeleteTask(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndexNumber \u003d Integer.parseInt(projectCommand.substring(12).split(\" \")[0]);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (projectToManage.getNumOfTasks() \u003e\u003d taskIndexNumber) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            String removedTaskString \u003d \"Removed \" + projectToManage.getTask(taskIndexNumber).getTaskName();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            projectToManage.removeTask(taskIndexNumber);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {removedTaskString};"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"The task index entered is invalid.\"};"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Updates the task requirements of a given task in the project."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectEditTaskRequirements(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            int taskIndexNumber \u003d Integer.parseInt(projectCommand.substring(23).split(\" \")[0]);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            String updatedTaskRequirements \u003d projectCommand.substring(projectCommand.indexOf(\"-\"));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (projectToManage.getNumOfTasks() \u003e\u003d taskIndexNumber \u0026\u0026 taskIndexNumber \u003e 0) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                projectToManage.editTaskRequirements(taskIndexNumber,updatedTaskRequirements);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"The requirements of your specified task has been updated!\"};"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"The task index entered is invalid.\"};"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Task index is missing! Please input a proper task index!\"};"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Displays the tasks in the current project."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectViewTaskRequirements(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (projectCommand.length() \u003c 23) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Please indicate the index of the task to be viewed.\"};"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                int taskIndex \u003d Integer.parseInt(projectCommand.substring(23));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (projectToManage.getNumOfTasks() \u003e\u003d taskIndex \u0026\u0026 taskIndex \u003e 0) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    if (projectToManage.getTask(taskIndex).getNumOfTaskRequirements() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        return new String[] {\"This task has no specific requirements.\"};"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        ArrayList\u003cString\u003e taskRequirements \u003d projectToManage.getTask(taskIndex).getTaskRequirements();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        return taskRequirements.toArray(new String[0]);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"The task index entered is invalid.\"};"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"Input is not a number! Please input a proper task index!\"};"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Manages the assignment to and removal of tasks from members."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectAssignTask(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        AssignmentController assignmentController \u003d new AssignmentController(projectToManage);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assignmentController.assignAndUnassign(projectCommand.substring(12));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e errorMessages \u003d assignmentController.getErrorMessages();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e successMessages \u003d assignmentController.getSuccessMessages();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (!errorMessages.isEmpty()) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return errorMessages.toArray(new String[0]);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return successMessages.toArray(new String[0]);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Displays list of assignments according to specifications of user."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectToManage The project to manage."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectFullCommand The full command by the user."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String[] projectViewAssignments(Project projectToManage, String projectFullCommand) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (projectFullCommand.length() \u003c\u003d 18) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return (new String[]{\"Please input the parameters to view assignments:\","
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \"-m for viewing by member, -t for viewing by task.\","
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \"You may refer to the user guide for the list of possible commands.\"});"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            String input \u003d projectFullCommand.substring(17);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (input.charAt(0) \u003d\u003d \u0027-\u0027 \u0026\u0026 input.charAt(1) \u003d\u003d \u0027m\u0027) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                return projectViewMembersAssignments(projectToManage,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    projectFullCommand.substring(20));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } else if (input.charAt(0) \u003d\u003d \u0027-\u0027 \u0026\u0026 input.charAt(1) \u003d\u003d \u0027t\u0027) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                return projectViewTasksAssignments(projectToManage,"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    projectFullCommand.substring(20));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                return (new String[] {\"Could not understand your command! Please use -m for member, -t for task\"});"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Displays all the tasks in the given project."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectViewTasks(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if ((\"view tasks\").equals(projectCommand)) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e tasksAndAssignedMembers \u003d projectToManage.getTasksAndAssignedMembers();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                ArrayList\u003cArrayList\u003cString\u003e\u003e tableToPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                ArrayList\u003cString\u003e allTaskDetailsForTable"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        \u003d projectToManage.getTasks().getAllTaskDetailsForTable(tasksAndAssignedMembers, \"/PRIORITY\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                allTaskDetailsForTable.add(0, \"Tasks of \" + projectToManage.getName() + \":\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                DukeLogger.logDebug(ProjectInputController.class, allTaskDetailsForTable.toString());"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                tableToPrint.add(allTaskDetailsForTable);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return viewHelper.consolePrintTable(tableToPrint);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            } else if (projectCommand.length() \u003e\u003d 11) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String sortCriteria \u003d projectCommand.substring(11);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e tasksAndAssignedMembers \u003d projectToManage.getTasksAndAssignedMembers();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                ArrayList\u003cArrayList\u003cString\u003e\u003e tableToPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                ArrayList\u003cString\u003e allTaskDetailsForTable \u003d"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        projectToManage.getTasks().getAllTaskDetailsForTable(tasksAndAssignedMembers, sortCriteria);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                DukeLogger.logDebug(ProjectInputController.class, allTaskDetailsForTable.toString());"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                allTaskDetailsForTable.add(0, \"Tasks of \" + projectToManage.getName() + \":\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                tableToPrint.add(allTaskDetailsForTable);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                return viewHelper.consolePrintTable(tableToPrint);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return (new String[] {\"Currently there are no tasks with the specified attribute.\"});"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Prints a list of members\u0027 individual list of tasks."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectToManage the project being managed."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectCommand The command by the user containing index numbers of the members to view."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectViewMembersAssignments(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validMembers \u003d parserHelper.parseMembersIndexes(projectCommand,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            projectToManage.getNumOfMembers());"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (!parserHelper.getErrorMessages().isEmpty()) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return parserHelper.getErrorMessages().toArray(new String[0]);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return AssignmentViewHelper.getMemberOutput(validMembers,"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            projectToManage).toArray(new String[0]);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Prints a list of tasks and the members assigned to them."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectToManage The project to manage."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String[] projectViewTasksAssignments(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validTasks \u003d parserHelper.parseTasksIndexes(projectCommand,"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            projectToManage.getNumOfTasks());"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (!parserHelper.getErrorMessages().isEmpty()) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return parserHelper.getErrorMessages().toArray(new String[0]);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return AssignmentViewHelper.getTaskOutput(validTasks,"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            projectToManage).toArray(new String[0]);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Exits the current project."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return Boolean variable specifying the exit status."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectExit(Project projectToManage) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return new String[] {\"Exited project: \" + projectToManage.getName()};"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public boolean getIsManagingAProject() {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return isManagingAProject;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] end() {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return new String[] {\"Bye. Hope to see you again soon!\"};"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Add reminder to the default list list of tasks and the members assigned to them."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectToManage The project to manage."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String [] projectAddReminder(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ReminderFactory reminderFactory \u003d new ReminderFactory();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            IReminder newReminder \u003d reminderFactory.createReminder(projectCommand.substring(13));"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            if (newReminder.getReminderName() !\u003d null) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                projectToManage.addReminderToList((Reminder) newReminder);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"Added new reminder to the Reminder List in project.\"};"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Failed to create new task. Please ensure all \""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"necessary parameters are given\"};"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (NumberFormatException | ParseException e) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Please enter your reminder date format correctly.\"};"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 72,
      "iamabhishek98": 158,
      "seanlimhx": 25,
      "Lucria": 77,
      "Dkenobi": 155
    }
  },
  {
    "path": "src/main/java/launcher/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package launcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import views.CLIView;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args Refers to CLI arguments"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        CLIView cliView \u003d new CLIView();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        cliView.start();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/launcher/UILauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package launcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import views.ui.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class UILauncher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 2,
      "Dkenobi": 11
    }
  },
  {
    "path": "src/main/java/models/member/IMember.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public interface IMember {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String getDetails();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void updateDetails(String name, String phone, String email);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void setIndexNumber(int indexNumber);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    int getIndexNumber();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    String getPhone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    String getEmail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String getRole();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String setRole(String input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 8,
      "iamabhishek98": 9,
      "Lucria": 4
    }
  },
  {
    "path": "src/main/java/models/member/IMemberList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public interface IMemberList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void addMember(Member newMember);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void removeMember(Member memberToRemove);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ArrayList\u003cString\u003e getAllMemberDetails();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    Member getMember(int i);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 9,
      "Lucria": 4
    }
  },
  {
    "path": "src/main/java/models/member/ListOfMembersAssignedToTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class ListOfMembersAssignedToTask implements IMemberList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cMember\u003e memberList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ListOfMembersAssignedToTask() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void addMember(Member newMember) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberList.add(newMember);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //I rewrote this method because there was a bug in this particular case."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //Imagine I assigned task to members 1 and 3, and then I want to unassign 3."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //Using the index number 3 to unassign will result in IndexOutOfBounds."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //So we have to remove by index of the object itself instead."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void removeMember(Member memberToRemove) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.memberList.remove(memberToRemove);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getAllMemberDetails() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e memberDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Member member : this.memberList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberDetails.add(member.getDetails());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberDetails;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Member getMember(int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.memberList.get(index - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a set of integers representing the index numbers of members who were assigned"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return a set of index numbers of members who were assigned the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public HashSet\u003cInteger\u003e getAssignedMembersIndexNumbers() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        HashSet\u003cInteger\u003e assignedMemberIndexes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Member member : this.memberList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            assignedMemberIndexes.add(member.getIndexNumber());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return assignedMemberIndexes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int getNumberOfAssignees() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberList.size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean contains(Member member) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberList.contains(member);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 59,
      "Lucria": 1
    }
  },
  {
    "path": "src/main/java/models/member/Member.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class Member implements IMember {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private int indexNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String role;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Class representing a member in a project team."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param name The name of the member."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param phone The phone number of the member."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param email The email address of the member."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param indexNumber The index number assigned to the member, unique to the project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public Member(String name, String phone, String email, int indexNumber, String role) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.indexNumber \u003d indexNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else if (!(obj instanceof Member)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Member other \u003d (Member) obj;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return this.name.equals(other.name)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \u0026\u0026 this.phone.equals(other.phone)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \u0026\u0026 this.email.equals(other.email);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return Objects.hash(this.name, this.phone, this.email);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.indexNumber + \". \" + this.name + \" (Phone: \" + this.phone + \" | Email: \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            + this.email + \" | Role: \" + this.role + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void setIndexNumber(int indexNumber) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.indexNumber \u003d indexNumber;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public int getIndexNumber() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.indexNumber;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.phone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.email;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getRole() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return this.role;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String setRole(String input) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return this.role \u003d input;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void updateDetails(String name, String phone, String email) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 58,
      "iamabhishek98": 21,
      "Lucria": 14
    }
  },
  {
    "path": "src/main/java/models/member/MemberList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class MemberList implements IMemberList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cMember\u003e memberList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Class representing a list with all members and their details."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public MemberList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cMember\u003e getMemberList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.memberList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Adds a new member to the member list of this project."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param newMember A new member to be added to the project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void addMember(Member newMember) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        newMember.setIndexNumber(this.memberList.size() + 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberList.add(newMember);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Updates the member details of an existing member using the index number of the member."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param memberIndexNumber The index number of the member whose details are to be updated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param updatedMemberDetails The updated member details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void editMember(int memberIndexNumber, String updatedMemberDetails) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String [] memberDetails \u003d parserHelper.parseMemberDetails(updatedMemberDetails);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String name \u003d memberDetails[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String phone \u003d memberDetails[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String email \u003d memberDetails[2];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        for (Member currentMember : memberList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (currentMember.getIndexNumber() \u003d\u003d memberIndexNumber) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String updatedName \u003d (\"--\".equals(name)) ? currentMember.getName() : name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String updatedPhone \u003d (\"--\".equals(phone)) ? currentMember.getPhone() : phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String updatedEmail \u003d (\"--\".equals(email)) ? currentMember.getEmail() : email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                currentMember.updateDetails(updatedName, updatedPhone, updatedEmail);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Removes a member from the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Shifts the index numbers of all members up if required."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param toBeRemoved The Member that needs to be removed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeMember(Member toBeRemoved) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Implement methods to ensure that task assignments are updated,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            credits are redistributed, etc."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            1) Scroll through all tasks of this member. Remove them from the ListOfMemebersAssignedToTask."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            2) Recalculate the credits for other members in the task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            3) Change task state if necessary (if only 1 member was DOING, now it is OPEN)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            4) Update index number of other members if necessary."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (toBeRemoved.getIndexNumber() \u003c memberList.size()) { //if need to reassign index numbers after removal"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            this.memberList.remove(toBeRemoved);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d memberList.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                memberList.get(i - 1).setIndexNumber(i);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            this.memberList.remove(toBeRemoved);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns an ArrayList with String descriptions of members details."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An ArrayList with String descriptions of members details."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getAllMemberDetails() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e memberDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Member member : this.memberList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberDetails.add(member.getDetails());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberDetails;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Returns an ArrayList of Strings in the format to be printed in table form."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return An ArrayList of Strings in the format to be printed in table form."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ArrayList\u003cString\u003e getAllMemberDetailsForTable() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e memberDetailsForTable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (this.memberList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            memberDetailsForTable.add(\" - There are currently no members! -\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            for (Member member : this.memberList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                memberDetailsForTable.add(member.getIndexNumber() + \". \" + member.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                memberDetailsForTable.add(\"   - Role: \" + member.getRole());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                memberDetailsForTable.add(\"   - Phone: \" + member.getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                memberDetailsForTable.add(\"   - Email: \" + member.getEmail());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                memberDetailsForTable.add(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            memberDetailsForTable.remove(memberDetailsForTable.size() - 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return memberDetailsForTable;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Member getMember(int i) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.memberList.get(i - 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns the size of the current member list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The size of the current member list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public int getNumOfMembers() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return memberList.size();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 59,
      "iamabhishek98": 32,
      "seanlimhx": 24,
      "Lucria": 9,
      "Dkenobi": 2
    }
  },
  {
    "path": "src/main/java/models/member/NullMember.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class NullMember implements IMember {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public NullMember(String errorMessage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void updateDetails(String name, String phone, String email) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setIndexNumber(int indexNumber) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getIndexNumber() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getRole() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String setRole(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 10,
      "Lucria": 49
    }
  },
  {
    "path": "src/main/java/models/project/IProject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.MemberList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface IProject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    // TODO Add attributes such as Members, Tasks, Name"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    MemberList getMembers();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    TaskList getTasks();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getNumOfMembers();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    int getNumOfTasks();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void addMember(Member newMember);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void editMember(int memberIndexNumber, String updatedMemberDetails);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void removeMember(Member toBeRemoved);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void addTask(Task newTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void removeTask(int taskIndexNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    boolean memberIndexExists(int indexNumber);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    Task getTask(int taskIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void editTask(int taskIndexNumber, String updatedTaskDetails);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void editTaskRequirements(int taskIndexNumber, String updatedTaskRequirements);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    ArrayList\u003cString\u003e getAssignedTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    ArrayList\u003cString\u003e getCredits();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void createAssignment(Task task, Member member);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void removeAssignment(Member member, Task task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    boolean containsAssignment(Task task, Member member);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    HashMap\u003cMember, ArrayList\u003cTask\u003e\u003e getMembersIndividualTaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e getTasksAndAssignedMembers();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 21,
      "iamabhishek98": 8,
      "seanlimhx": 3,
      "Lucria": 10,
      "Dkenobi": 13
    }
  },
  {
    "path": "src/main/java/models/project/NullProject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.MemberList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class NullProject implements IProject {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public MemberList getMembers() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getNumOfMembers() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int getNumOfTasks() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void addMember(Member newMember) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void editMember(int memberIndexNumber, String updatedMemberDetails) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeMember(Member toBeRemoved) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void removeTask(int taskIndexNumber) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean memberIndexExists(int indexNumber) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void editTask(int taskIndexNumber, String updatedTaskDetails) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void editTaskRequirements(int taskIndexNumber, String updatedTaskRequirements) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ArrayList\u003cString\u003e getAssignedTaskList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e getCredits() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void createAssignment(Task task, Member member) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void removeAssignment(Member member, Task task) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean containsAssignment(Task task, Member member) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public HashMap\u003cMember, ArrayList\u003cTask\u003e\u003e getMembersIndividualTaskList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e getTasksAndAssignedMembers() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 48,
      "iamabhishek98": 26,
      "seanlimhx": 13,
      "Lucria": 18,
      "Dkenobi": 30
    }
  },
  {
    "path": "src/main/java/models/project/Project.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.MemberList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.Reminder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.ReminderList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class Project implements IProject {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private MemberList memberList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ReminderList reminderList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e taskAndListOfMembersAssigned; //task_membersAssigned"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private HashMap\u003cMember, ArrayList\u003cTask\u003e\u003e memberAndIndividualListOfTasks; //member_individualTaskList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Class representing a task in a project."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param name The description of the project."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public Project(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.memberList \u003d new MemberList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderList \u003d new ReminderList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.taskAndListOfMembersAssigned \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.memberAndIndividualListOfTasks \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public MemberList getMembers() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return this.memberList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getNumOfMembers() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return this.memberList.getNumOfMembers();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int getNumOfTasks() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskList.getTaskList().size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void addMember(Member newMember) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.memberList.addMember(newMember);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberAndIndividualListOfTasks.put(newMember, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void editMember(int memberIndexNumber, String updatedMemberDetails) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.memberList.editMember(memberIndexNumber, updatedMemberDetails);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeMember(Member memberToBeRemoved) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Task task : this.taskAndListOfMembersAssigned.keySet()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            this.taskAndListOfMembersAssigned.get(task).remove(memberToBeRemoved);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberAndIndividualListOfTasks.remove(memberToBeRemoved);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.memberList.removeMember(memberToBeRemoved);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskList.addTask(newTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.taskAndListOfMembersAssigned.put(newTask, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void removeTask(int taskIndexNumber) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Task taskToRemove \u003d this.getTask(taskIndexNumber);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Member member : this.memberAndIndividualListOfTasks.keySet()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            this.memberAndIndividualListOfTasks.get(member).remove(taskToRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.taskAndListOfMembersAssigned.remove(taskToRemove);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.taskList.removeTask(taskIndexNumber);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean memberIndexExists(int indexNumber) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return (indexNumber \u003e 0 \u0026\u0026 indexNumber \u003c\u003d getNumOfMembers());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskList.getTask(taskIndex);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void editTask(int taskIndexNumber, String updatedTaskDetails) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.taskList.editTask(taskIndexNumber, updatedTaskDetails);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void editTaskRequirements(int taskIndexNumber, String updatedTaskRequirements) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskList.editTaskRequirements(taskIndexNumber, updatedTaskRequirements);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ArrayList\u003cString\u003e getAssignedTaskList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e assignedTaskListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (HashMap.Entry\u003cTask, ArrayList\u003cMember\u003e\u003e task: taskAndListOfMembersAssigned.entrySet()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            assignedTaskListString.add(task.getKey().getTaskName() + \" is assigned to: \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            for (Member member: task.getValue()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                assignedTaskListString.add(member.getName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return assignedTaskListString;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns the member names with the credits of their assigned tasks."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The member names with the credits of their assigned tasks."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e getCredits() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e allMemberCredits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cMember\u003e allMembers \u003d this.getMembers().getMemberList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        HashMap\u003cMember, ArrayList\u003cTask\u003e\u003e assignedMembers \u003d this.getMembersIndividualTaskList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Member member : allMembers) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int credits \u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (Task assignedTask : assignedMembers.get(member)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                credits +\u003d assignedTask.getTaskCredit();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            allMemberCredits.add(count + \". \" + member.getName() + \" | Credits: \" + credits);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return allMemberCredits;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * This method assigns a task to a member by adding the task to a member\u0027s individual"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * task list - tasksAssignedToMembers."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param task the task which you wish to assign to the member."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param member the member you wish to assign the task to."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void createAssignment(Task task, Member member) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        taskAndListOfMembersAssigned.get(task).add(member);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        memberAndIndividualListOfTasks.get(member).add(task);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Removes the assignment between member and task."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param member the member to unassign the task from."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param task the task to be unassigned."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void removeAssignment(Member member, Task task) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        taskAndListOfMembersAssigned.get(task).remove(member);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        memberAndIndividualListOfTasks.get(member).remove(task);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Checks if assignment exists between a member and task."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param task The task in question."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param member The member in question."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return true task has already been assigned to a member."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean containsAssignment(Task task, Member member) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberAndIndividualListOfTasks.get(member).contains(task)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            \u0026\u0026 taskAndListOfMembersAssigned.get(task).contains(member);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a hashmap with information about each member\u0027s task assignment."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return hashmap with member as key and accompanying task list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public HashMap\u003cMember, ArrayList\u003cTask\u003e\u003e getMembersIndividualTaskList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.memberAndIndividualListOfTasks;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a hashmap with information about each task\u0027s assignment to members."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return hashmap with task as key and accompanying list of assigned members."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e getTasksAndAssignedMembers() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskAndListOfMembersAssigned;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addReminderToList(Reminder reminder) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderList.addReminderList(reminder);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 82,
      "iamabhishek98": 35,
      "seanlimhx": 8,
      "Lucria": 25,
      "Dkenobi": 55
    }
  },
  {
    "path": "src/main/java/models/reminder/IReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public interface IReminder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void setReminderName(String reminderName);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void setReminderDate(Date reminderDate);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    String getReminderName();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    Date getReminderDate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 14
    }
  },
  {
    "path": "src/main/java/models/reminder/NullReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class NullReminder implements IReminder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setReminderName(String reminderName) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setReminderDate(Date reminderDate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getReminderName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Date getReminderDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 30
    }
  },
  {
    "path": "src/main/java/models/reminder/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class Reminder implements IReminder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String reminderName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Date reminderDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Reminder(String reminderName, Date reminderDate) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderName \u003d reminderName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderDate \u003d reminderDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setReminderName(String reminderName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderName \u003d reminderName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setReminderDate(Date reminderDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderDate \u003d reminderDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getReminderName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Date getReminderDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 33
    }
  },
  {
    "path": "src/main/java/models/reminder/ReminderFlag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class ReminderFlag {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 4
    }
  },
  {
    "path": "src/main/java/models/reminder/ReminderFlagList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class ReminderFlagList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 4
    }
  },
  {
    "path": "src/main/java/models/reminder/ReminderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class ReminderList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    //private String reminderListName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ArrayList\u003cReminder\u003e reminderList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Class representing a list with all reminders."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ReminderList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        //this.reminderListName\u003d reminderListName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /*public String getReminderListName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderListName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /*public void setReminderListName(String reminderListName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderListName \u003d reminderListName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Adds a new reminder to the list of this project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param reminder A new reminder to be added to the project."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addReminderList(Reminder reminder) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderList.add(reminder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ArrayList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 37
    }
  },
  {
    "path": "src/main/java/models/task/ITask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.ListOfMembersAssignedToTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface ITask {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String getTaskName();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getTaskPriority();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String getDetails();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    Date getDueDate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    TaskState getTaskState();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getTaskCredit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ListOfMembersAssignedToTask getAssignedMembers();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    HashSet\u003cInteger\u003e getAssignedIndexes();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void assignMember(Member member);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void removeMember(Member memberToRemove);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ArrayList\u003cString\u003e getTaskRequirements();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getNumOfTaskRequirements();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setTaskName(String newTaskName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setTaskPriority(int newTaskPriority);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setDueDate(String newDueDateString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setTaskCredit(int newTaskCredit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setTaskState(String newTaskStateString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void removeTaskRequirement(int indexOfTaskRequirement);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void addTaskRequirement(String newTaskRequirement);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 48
    }
  },
  {
    "path": "src/main/java/models/task/NullTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.ListOfMembersAssignedToTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class NullTask implements ITask {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getTaskPriority() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public Date getDueDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public TaskState getTaskState() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getTaskCredit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ListOfMembersAssignedToTask getAssignedMembers() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public HashSet\u003cInteger\u003e getAssignedIndexes() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void assignMember(Member member) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeMember(Member memberToRemove) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ArrayList\u003cString\u003e getTaskRequirements() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getNumOfTaskRequirements() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setTaskName(String newTaskName) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setTaskPriority(int newTaskPriority) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setDueDate(String newDueDateString) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setTaskCredit(int newTaskCredit) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setTaskState(String newTaskStateString) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeTaskRequirement(int indexOfTaskRequirement) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void addTaskRequirement(String newTaskRequirement) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 123
    }
  },
  {
    "path": "src/main/java/models/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.ListOfMembersAssignedToTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class Task implements ITask {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private int taskPriority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private Date dueDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private int taskCredit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private TaskState taskState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ListOfMembersAssignedToTask listOfMembersAssignedToTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private ArrayList\u003cString\u003e taskRequirements;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else if (!(obj instanceof Task)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Task other \u003d (Task) obj;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return this.taskName.equals(other.taskName)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \u0026\u0026 this.taskPriority \u003d\u003d other.taskPriority"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \u0026\u0026 this.taskCredit \u003d\u003d other.taskCredit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return Objects.hash(this.taskName, this.taskPriority, this.taskCredit);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Class representing a task in a project."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param taskPriority The priority value of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param dueDate The date that the task is due. [Optional]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskCredit The amount of credit a person would receive for completing the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                   A more difficult task would receive more credit."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskState taskState refers to whether the task is in OPEN, TO-DO, DOING, DONE."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param taskRequirements ArrayList of Strings containing specific requirements of a task. [Optional]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public Task(String taskName, int taskPriority, Date dueDate, int taskCredit, TaskState taskState,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                ArrayList\u003cString\u003e taskRequirements) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskPriority \u003d taskPriority;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskCredit \u003d taskCredit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskState \u003d taskState;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.listOfMembersAssignedToTask \u003d new ListOfMembersAssignedToTask();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskRequirements \u003d taskRequirements;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public int getTaskPriority() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return taskPriority;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Gets the details of the task in a String format in the correct layout."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String containing all the details of the task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (this.dueDate !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return this.taskName + \" | Priority: \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + this.taskPriority"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Due: \" + dateTimeHelper.formatDateForDisplay(this.dueDate)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(this.dueDate)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: \" + this.taskCredit"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | State: \" + this.taskState;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return this.taskName + \" | Priority: \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + this.taskPriority + \" | Due: -- | Credit: \" + this.taskCredit + \" | State: \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + this.taskState;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Date getDueDate() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.dueDate;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public TaskState getTaskState() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskState;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int getTaskCredit() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskCredit;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ListOfMembersAssignedToTask getAssignedMembers() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return listOfMembersAssignedToTask;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public HashSet\u003cInteger\u003e getAssignedIndexes() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.listOfMembersAssignedToTask.getAssignedMembersIndexNumbers();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void assignMember(Member member) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.listOfMembersAssignedToTask.addMember(member);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void removeMember(Member memberToRemove) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.listOfMembersAssignedToTask.removeMember(memberToRemove);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Adds index labels to task requirements for clearer viewing."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return ArrayList of String of task requirements with labelled indexes."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ArrayList\u003cString\u003e getTaskRequirements() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        taskRequirements.add(getDetails());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (String s : this.taskRequirements) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            taskRequirements.add(index + \". \" + s);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return taskRequirements;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public int getNumOfTaskRequirements() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return this.taskRequirements.size();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setTaskName(String newTaskName) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskName \u003d newTaskName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setTaskPriority(int newTaskPriority) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskPriority \u003d newTaskPriority;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Converts String input into Date object to be set as the new dueDate."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param newDueDateString String form of the new dueDate to be set."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setDueDate(String newDueDateString) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            this.dueDate \u003d dateTimeHelper.formatDate(newDueDateString);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Edits current task credit to new input task credit."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param newTaskCredit new task credit to be set."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setTaskCredit(int newTaskCredit) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskCredit \u003d newTaskCredit;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Converts input String into TaskState and edits current task state to new task state."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param newTaskStateString String form of new task state."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setTaskState(String newTaskStateString) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String newTaskStateLowerCase \u003d newTaskStateString.toLowerCase();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        switch (newTaskStateLowerCase) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskState \u003d TaskState.DONE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskState \u003d TaskState.TODO;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        case \"doing\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskState \u003d TaskState.DOING;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskState \u003d TaskState.OPEN;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void removeTaskRequirement(int indexOfTaskRequirement) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskRequirements.remove(indexOfTaskRequirement - 1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void addTaskRequirement(String newTaskRequirement) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskRequirements.add(newTaskRequirement);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 41,
      "iamabhishek98": 7,
      "seanlimhx": 105,
      "Lucria": 8,
      "Dkenobi": 34
    }
  },
  {
    "path": "src/main/java/models/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import util.SortHelper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private SortHelper sortHelper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Class representing a list with all task sort in the project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.sortHelper \u003d new SortHelper();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Adds a new task to the list of this project."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param task A new task to be added to the project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Deletes the task from the list using the index number."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskIndexNumber The index number of the task to be deleted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void removeTask(int taskIndexNumber) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.taskList.remove(taskIndexNumber - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Returns an ArrayList with String descriptions of task details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasksAndAssignedMembers HashMap containing tasks with assigned members."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList with String descriptions of task details sorted by name by default."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e getAllTaskDetails(HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e tasksAndAssignedMembers) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        // after implementing task index, change \"/PRIORITY\" to \"/INDEX\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.parserHelper.parseSortTaskDetails(tasksAndAssignedMembers,taskList,\"/PRIORITY\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Returns an ArrayList with String descriptions of task details to be presented in table format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param tasksAndAssignedMembers HashMap containing tasks with assigned members."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return An ArrayList with String descriptions of task details sorted by name by default to be presented in table"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *         format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ArrayList\u003cString\u003e getAllTaskDetailsForTable(HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e tasksAndAssignedMembers,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                                                       String sortCriteria) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e allTaskDetailsForTable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (this.taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            allTaskDetailsForTable.add(\" - There are currently no tasks! -\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            ArrayList\u003cString\u003e allTaskDetails \u003d this.parserHelper.parseSortTaskDetails(tasksAndAssignedMembers,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    taskList, sortCriteria);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (sortCriteria.substring(0, 5).equals(\"/WHO-\") \u0026\u0026 allTaskDetails.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                allTaskDetailsForTable.add(\" - There are no tasks assigned to \" + sortCriteria.substring(5) + \"! -\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else if (\"/DATE\".equals(sortCriteria) \u0026\u0026 allTaskDetails.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                allTaskDetailsForTable.add(\" - There are no tasks with deadlines! -\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                for (String s : allTaskDetails) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    String[] indivTaskDetails \u003d s.split(\" [|] \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    allTaskDetailsForTable.add(indivTaskDetails[0]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    for (int i \u003d 1; i \u003c indivTaskDetails.length; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        allTaskDetailsForTable.add(\"   - \" + indivTaskDetails[i]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    allTaskDetailsForTable.add(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                allTaskDetailsForTable.remove(allTaskDetailsForTable.size() - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return allTaskDetailsForTable;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns an ArrayList with String descriptions of task details sorted by the criteria specified by the user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasksAndAssignedMembers HashMap containing tasks with assigned members."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param sortCriteria Criteria to sort chosen by user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList with String descriptions of task details sorted by the criteria specified by the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e getAllSortedTaskDetails(HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e tasksAndAssignedMembers,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                                                     String sortCriteria) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.parserHelper.parseSortTaskDetails(tasksAndAssignedMembers,taskList,sortCriteria);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns the list of all tasks."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An ArrayList with all tasks."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskList.get(taskIndex - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Edits details of a task excluding task requirements."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param updatedTaskDetails input command String in the form of (tasks to be edited can be in any order)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                           edit task i/TASK_INDEX [n/TASK_NAME] [p/TASK_PRIORITY]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                           [d/TASK_DUEDATE] [c/TASK_CREDIT] [s/STATE]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void editTask(int taskIndexNumber, String updatedTaskDetails) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d parserHelper.parseTaskDetails(updatedTaskDetails);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String taskName \u003d taskDetails.get(0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task task \u003d taskList.get(taskIndexNumber - 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (!(\"--\".equals(taskName))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            task.setTaskName(taskName);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String taskPriority \u003d taskDetails.get(1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (!(\"-1\".equals(taskPriority))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            task.setTaskPriority(Integer.parseInt(taskPriority));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String taskDueDate \u003d taskDetails.get(2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (taskDueDate !\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            task.setDueDate(taskDueDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String taskCredit \u003d taskDetails.get(3);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (!(\"-1\".equals(taskCredit))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            task.setTaskCredit(Integer.parseInt(taskCredit));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String taskState \u003d taskDetails.get(4);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (!(\"NONE\".equals(taskState))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            task.setTaskState(taskState);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Edits the task requirements of a specific task by adding or removing them."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskIndexNumber Index of task to be edited."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param updatedTaskRequirements Array containing indexes of task requirements to be removed and"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                                task requirements to be added."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void editTaskRequirements(int taskIndexNumber, String updatedTaskRequirements) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e newTaskRequirementDetails \u003d parserHelper.parseTaskRequirementDetails(updatedTaskRequirements);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String taskReqIndexesToBeRemoved \u003d newTaskRequirementDetails.get(0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (!taskReqIndexesToBeRemoved.equals(\"--\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            removeTaskRequirements(taskIndexNumber, taskReqIndexesToBeRemoved);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        newTaskRequirementDetails.remove(0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        addTaskRequirements(taskIndexNumber, newTaskRequirementDetails);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Removes task requirement with input index."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskIndexNumber Index of task to be edited."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskReqIndexesToBeRemoved String containing indexes of task requirements to be removed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private void removeTaskRequirements(int taskIndexNumber, String taskReqIndexesToBeRemoved) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] indexesToBeRemoved \u003d taskReqIndexesToBeRemoved.split(\" \");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        Arrays.sort(indexesToBeRemoved);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int i \u003d indexesToBeRemoved.length - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            int indexToBeRemoved \u003d Integer.parseInt(indexesToBeRemoved[i]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (indexToBeRemoved \u003e 0"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    \u0026\u0026 indexToBeRemoved \u003c\u003d this.taskList.get(taskIndexNumber - 1).getNumOfTaskRequirements()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                //input validation if input index to be removed does not exist, but currently does not show mistake to"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                // user"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                this.taskList.get(taskIndexNumber - 1).removeTaskRequirement(indexToBeRemoved);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Adds new task requirements to a specific task."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskIndexNumber Index of task to be edited."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param newTaskRequirements Array containing indexes of task requirements to be added."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private void addTaskRequirements(int taskIndexNumber, ArrayList\u003cString\u003e newTaskRequirements) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (String s : newTaskRequirements) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskList.get(taskIndexNumber - 1).addTaskRequirement(s);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean contains(Task task) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return (taskList.contains(task));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Get details of task with closest deadline and return in String array form."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String array of details of task which has the closest deadline."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String[] getClosestDeadlineTask() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e sortedTaskList \u003d sortHelper.sortTaskDueDate(this.taskList);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (String task : sortedTaskList) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (!task.contains(\"State: DONE\")) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                return task.substring(3).split(\" [|] \");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] message \u003d new String[2];"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        message[0] \u003d \"\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        message[1] \u003d \"No deadlines left -\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Method to calculate progress and store in presentable String format."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String array containing output for overall progress to be printed in table."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String[] getOverallProgress() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int totalCredits \u003d 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        double creditsOpen \u003d 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        double creditsTodo \u003d 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        double creditsDoing \u003d 0;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        double creditsDone \u003d 0;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            totalCredits +\u003d task.getTaskCredit();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (task.getTaskState() \u003d\u003d TaskState.DONE) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                creditsDone +\u003d task.getTaskCredit();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else if (task.getTaskState() \u003d\u003d TaskState.DOING) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                creditsDoing +\u003d task.getTaskCredit();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else if (task.getTaskState() \u003d\u003d TaskState.TODO) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                creditsTodo +\u003d task.getTaskCredit();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                creditsOpen +\u003d task.getTaskCredit();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e progressDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String percentageDone \u003d Integer.toString((int)(creditsDone / totalCredits * 100));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        progressDetails.add(\"Completed: \" + percentageDone + \"%\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String percentageInProgress \u003d Integer.toString((int)(creditsDoing / totalCredits * 100));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        progressDetails.add(\"In Progress: \" + percentageInProgress + \"%\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String percentageNotDone \u003d Integer.toString((int)((creditsTodo + creditsOpen) / totalCredits * 100));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        progressDetails.add(\"Not Done: \" + percentageNotDone + \"%\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return progressDetails.toArray(new String[0]);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 59,
      "sinteary": 15,
      "seanlimhx": 142,
      "Dkenobi": 28
    }
  },
  {
    "path": "src/main/java/models/task/TaskState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "public enum TaskState {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    OPEN, TODO, DOING, DONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlimhx": 5
    }
  },
  {
    "path": "src/main/java/repositories/IRepository.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package repositories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface IRepository\u003cT\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ArrayList\u003cT\u003e getAll();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    boolean addToRepo(String input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    boolean deleteItem(int projectNumber);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    T getItem(int projectNumber);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 5,
      "-": 8
    }
  },
  {
    "path": "src/main/java/repositories/ProjectRepository.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package repositories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.IProject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.ProjectFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.json.JsonConverter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.DukeLogger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ProjectRepository implements IRepository\u003cProject\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private ArrayList\u003cProject\u003e allProjects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private ProjectFactory projectFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private JsonConverter jsonConverter \u003d new JsonConverter();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ProjectRepository() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        allProjects \u003d jsonConverter.loadAllProjectsData();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.projectFactory \u003d new ProjectFactory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ArrayList\u003cProject\u003e getAll() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return allProjects;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public boolean addToRepo(String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IProject newProject \u003d projectFactory.create(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logDebug(ProjectRepository.class, \"New project created with name: \u0027\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                + newProject.getName() + \"\u0027\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (newProject.getName() \u003d\u003d null || newProject.getMembers() \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project newlyCreatedProject \u003d (Project) newProject;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        allProjects.add(newlyCreatedProject);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        jsonConverter.saveProject(newlyCreatedProject);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method to retrieve a Project from ArrayList of Projects."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param projectNumber : Index of Project that user wishes to retrieve"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return Returns the Project object desired by user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public Project getItem(int projectNumber) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.allProjects.get(projectNumber - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method for deletion of projects."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param projectNumber : Index of project that user wishes to delete"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return Returns a boolean that states whether the project is deleted successfully"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public boolean deleteItem(int projectNumber) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            jsonConverter.deleteProject(allProjects.get(projectNumber - 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            this.allProjects.remove(projectNumber - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (IndexOutOfBoundsException | DukeException err) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Method to get all project details in a suitable form for CLIView to print in a table form."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return ArrayList of details to be presented in each table, with each element as an ArrayList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *         containing each row in the table."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getAllProjectsDetailsForTable() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e toPrintAll \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int projNum \u003d 0; projNum \u003c allProjects.size(); projNum++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            toPrint.add(\"Project \" + (projNum + 1) + \": \" + allProjects.get(projNum).getName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            toPrint.add(\"Members: \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (allProjects.get(projNum).getNumOfMembers() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\" --\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                for (int memberIndex \u003d 1; memberIndex \u003c\u003d allProjects.get(projNum).getNumOfMembers();memberIndex++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    toPrint.add(\" \" + allProjects.get(projNum).getMembers().getMember(memberIndex).getDetails());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (allProjects.get(projNum).getNumOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\"Next Deadline: \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\" --\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String[] detailsClosestDeadlineTask \u003d allProjects.get(projNum).getTasks().getClosestDeadlineTask();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\"Next Deadline: \" + detailsClosestDeadlineTask[0]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                for (int i \u003d 1; i \u003c detailsClosestDeadlineTask.length; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    toPrint.add(\" - \" + detailsClosestDeadlineTask[i]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            toPrint.add(\"Overall Progress: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (allProjects.get(projNum).getNumOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\" --\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String[] detailsOverallProgress \u003d allProjects.get(projNum).getTasks().getOverallProgress();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                for (String detail : detailsOverallProgress) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    toPrint.add(\" - \" + detail);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            toPrintAll.add(toPrint);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return toPrintAll;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 2,
      "sinteary": 3,
      "seanlimhx": 43,
      "Lucria": 58,
      "Dkenobi": 2
    }
  },
  {
    "path": "src/main/java/util/AssignmentViewHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class AssignmentViewHelper {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns output to show viewer the task assignments of members."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param membersToView List of valid member index numbers."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param project THe project being managed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An ArrayList containing information requested by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static ArrayList\u003cString\u003e getMemberOutput(ArrayList\u003cInteger\u003e membersToView,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Project project) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cString\u003e outputToPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        outputToPrint.add(\"Here are each member\u0027s tasks:\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        HashMap\u003cMember, ArrayList\u003cTask\u003e\u003e memberAndIndividualTasks \u003d project.getMembersIndividualTaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer index : membersToView) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Member member  \u003d project.getMembers().getMember(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            outputToPrint.add(\"Tasks assigned to \" + member.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (memberAndIndividualTasks.get(member).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                outputToPrint.add(\"No tasks assigned yet.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                int currentNumber \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                for (Task task : memberAndIndividualTasks.get(member)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    outputToPrint.add(currentNumber + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    currentNumber++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return outputToPrint;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns output to show viewer the task assignments of members."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param tasksToView List of valid task index numbers."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param project Project to be managed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An ArrayList containing information requested by the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static ArrayList\u003cString\u003e getTaskOutput(ArrayList\u003cInteger\u003e tasksToView, Project project) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cString\u003e outputToPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        outputToPrint.add(\"Here are the members assigned to each task:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e tasksAndAssignedMembers \u003d project.getTasksAndAssignedMembers();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer index : tasksToView) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Task task \u003d project.getTask(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            outputToPrint.add(task.getDetails());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (tasksAndAssignedMembers.get(task).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                outputToPrint.add(\"No members assigned yet.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                int currentNumber \u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                outputToPrint.add(\"Members assigned to task \" + index + \" (\" + task.getDetails() + \")\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                for (Member member : tasksAndAssignedMembers.get(task)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    outputToPrint.add(currentNumber + \". \" + member.getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    currentNumber++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return outputToPrint;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 57,
      "iamabhishek98": 3,
      "Lucria": 4
    }
  },
  {
    "path": "src/main/java/util/ParserHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class ParserHelper {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private SortHelper sortHelper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cString\u003e errorMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ParserHelper() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.sortHelper \u003d new SortHelper();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.errorMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parses the string input to extract the name, phone number and email."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param input Contains the name, phone number and email."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An array consisting of name in index 0, phone number in index 1 and email in index 2."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String[] parseMemberDetails(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String[] memberDetails \u003d new String[5];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        memberDetails[0] \u003d \"--\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        memberDetails[1] \u003d \"--\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        memberDetails[2] \u003d \"--\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        memberDetails[3] \u003d \"0\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        memberDetails[4] \u003d \"member\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String[] newMemberDetails \u003d input.split(\"-\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e newMemberDetailsA \u003d new ArrayList\u003c\u003e(Arrays.asList(newMemberDetails));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newMemberDetailsA.remove(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String s : newMemberDetailsA) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            switch (s.charAt(0)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \u0027n\u0027:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                memberDetails[0] \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \u0027i\u0027:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                memberDetails[1] \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \u0027e\u0027:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                memberDetails[2] \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \u0027x\u0027:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                memberDetails[3] \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            case \u0027r\u0027:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                memberDetails[4] \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return memberDetails;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parses the string input to extract the name, priority, due date, credit and task state."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param input Contains the name, priority, due date, credit and task state."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList consisting of name in index 0, priority in index 1, due date in index 2,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *         credit in index 3, task state in index 4."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e parseTaskDetails(String input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e newTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newTaskName \u003d \"--\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newTaskPriority \u003d \"-1\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newTaskDate \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newTaskCredit \u003d \"-1\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newTaskState \u003d \"NONE\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String [] newTaskDetails \u003d input.split(\"-\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e newTaskDetailsA  \u003d  new ArrayList\u003c\u003e(Arrays.asList(newTaskDetails));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        newTaskDetailsA.remove(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        for (String s : newTaskDetailsA) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            switch (s.charAt(0)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            case \u0027t\u0027:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                newTaskName \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            case \u0027p\u0027:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                newTaskPriority \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            case \u0027d\u0027:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                newTaskDate \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            case \u0027c\u0027:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                newTaskCredit \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            case \u0027s\u0027:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                newTaskState \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newTask.add(newTaskName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newTask.add(newTaskPriority);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newTask.add(newTaskDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newTask.add(newTaskCredit);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newTask.add(newTaskState);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Parses the string input to extract the name, and reminder date."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param input Contains the name, and reminder date"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return An ArrayList consisting of name in index 0,due date in index 1."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ArrayList\u003cString\u003e parseReminderDetails(String[] input) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e newReminderInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String newReminderName \u003d \"--\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String newReminderDate \u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e newReminderInfoInput  \u003d  new ArrayList\u003c\u003e(Arrays.asList(input));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        newReminderInfoInput.remove(0); // Remove the first empty string in newReminderInfoInput"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        for (String s : newReminderInfoInput) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            switch (s.charAt(0)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            case \u0027n\u0027:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                newReminderName \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            case \u0027d\u0027:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                newReminderDate \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        newReminderInfo.add(newReminderName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        newReminderInfo.add(newReminderDate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return newReminderInfo;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Parses string input to extract task requirements to be added and indexes of task requirements to be removed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param input Contains the new task requirements and indexes of task requirements to be removed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return An ArrayList consisting of indexes to be removed in index 0, and subsequent elements containing"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *         new task requirements"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ArrayList\u003cString\u003e parseTaskRequirementDetails(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirementDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String taskReqIndexesToBeRemoved \u003d \"--\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirementsToBeAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] newTaskRequirementsArray \u003d input.split(\"-\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e newTaskRequirementsArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(newTaskRequirementsArray));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        newTaskRequirementsArrayList.remove(0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (String s : newTaskRequirementsArrayList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            switch (s.substring(0, 2)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            case \"rm\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                taskReqIndexesToBeRemoved \u003d s.substring(3);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            case \"r \":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                taskRequirementsToBeAdded.add(s.substring(2));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        taskRequirementDetails.add(taskReqIndexesToBeRemoved);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        taskRequirementDetails.addAll(taskRequirementsToBeAdded);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return taskRequirementDetails;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parses the criteria specified by the user to sort the list of tasks."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasksAndAssignedMembers HashMap containing tasks with assigned members."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList A list of all tasks in the project."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param sortCriteria Criteria to sort the list of tasks"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList with String descriptions of task details sorted by the criteria specified by the user."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e parseSortTaskDetails(HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e tasksAndAssignedMembers,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                                                  ArrayList\u003cTask\u003e taskList, String sortCriteria) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (sortCriteria.length() \u003e\u003d 4) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String[] detailedCriteria \u003d sortCriteria.split(\"-\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            switch (detailedCriteria[0]) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/NAME\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskName(taskList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/INDEX\":"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskIndex(taskList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/DATE\":"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskDueDate(taskList);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/PRIORITY\":"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskPriority(taskList);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/CREDIT\":"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskCredit(taskList);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/WHO\":"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskMember(tasksAndAssignedMembers, taskList, detailedCriteria[1]);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/KANBAN\":"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskState(taskList, detailedCriteria[1]);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parses input String to get valid task and member index numbers, as well as error messages"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * for invalid index numbers."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input The assignment input from the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cArrayList\u003cInteger\u003e\u003e parseAssignmentParams(String input, Project project) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        errorMessages.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String [] inputParts \u003d input.split(\"-\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String allTaskIndexes \u003d \"\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String allAssigneeIndexes \u003d \"\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String allUnassigneeIndexes \u003d \"\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String s : inputParts) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String [] part \u003d s.split(\" \");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            switch (part[0]) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"i\":"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (s.length() \u003e\u003d 3) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    allTaskIndexes \u003d s.substring(2).trim();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    allTaskIndexes \u003d \"\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"to\":"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (s.length() \u003e\u003d 4) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    allAssigneeIndexes \u003d s.substring(3).trim();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    allAssigneeIndexes \u003d \"\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"rm\":"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (s.length() \u003e\u003d 4) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    allUnassigneeIndexes \u003d s.substring(3).trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    allUnassigneeIndexes \u003d \"\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e assignmentParams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentParams.add(parseTasksIndexes(allTaskIndexes, project.getNumOfTasks()));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e assignees \u003d parseMembersIndexes(allAssigneeIndexes, project.getNumOfMembers());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e unassignees \u003d parseMembersIndexes(allUnassigneeIndexes, project.getNumOfMembers());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        checkForSameMemberIndexes(assignees, unassignees, project);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentParams.add(assignees);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentParams.add(unassignees);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return assignmentParams;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Parses a string containing member index numbers and returns only valid ones."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input a string containing member index numbers."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param numberOfMembersInProject the total number of members in project."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An ArrayList containing only valid member index numbers"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cInteger\u003e parseMembersIndexes(String input, int numberOfMembersInProject) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (\"all\".equals(input)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d numberOfMembersInProject; i++) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                validMembers.add(i);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return validMembers;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] inputParts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String index : inputParts) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (\"\".equals(index)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                Integer indexNumber \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (indexNumber \u003e 0 \u0026\u0026 indexNumber \u003c\u003d numberOfMembersInProject) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    validMembers.add(indexNumber);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    errorMessages.add(\"Member with index \" + index + \" does not exist.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                errorMessages.add(\"Could not recognise member \" + index"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + \", please ensure it is an integer.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return validMembers;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a list of valid task numbers."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input List of task index numbers input by user."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param numberOfTasksInProject the total number of tasks in project."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An ArrayList containing valid task index numbers to show assigned members."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cInteger\u003e parseTasksIndexes(String input, int numberOfTasksInProject) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e tasksToView \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (\"all\".equals(input)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d numberOfTasksInProject; i++) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                tasksToView.add(i);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return tasksToView;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] inputParts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String index : inputParts) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (\"\".equals(index)) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                Integer indexNumber \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (indexNumber \u003e 0 \u0026\u0026 indexNumber \u003c\u003d numberOfTasksInProject) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    tasksToView.add(indexNumber);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    errorMessages.add(\"Task with index \" + index + \" does not exist.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                errorMessages.add(\"Could not recognise task \" + index"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + \", please ensure it is an integer.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return tasksToView;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private void checkForSameMemberIndexes(ArrayList\u003cInteger\u003e assignees, ArrayList\u003cInteger\u003e unassignees,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Project project) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e repeated \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer index: assignees) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (unassignees.contains(index)) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                repeated.add(index);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                errorMessages.add(\"Cannot assign and unassign task to member \" + index + \" (\""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + project.getMembers().getMember(index).getName() + \") at the same time\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer index: repeated) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            assignees.remove(assignees.indexOf(index));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            unassignees.remove(unassignees.indexOf(index));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getErrorMessages() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.errorMessages;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 142,
      "sinteary": 124,
      "seanlimhx": 37,
      "Lucria": 5,
      "Dkenobi": 45
    }
  },
  {
    "path": "src/main/java/util/SortHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class SortHelper {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task name in alphabetical order."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskName(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.sort(Comparator.comparing(Task::getTaskName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task index."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskIndex(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Empty method"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task due date in descending order."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task due date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskDueDate(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (task.getDueDate() !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                sortedTaskList.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        sortedTaskList.sort((task1, task2) -\u003e task2.getDueDate().compareTo(task1.getDueDate()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        Collections.reverse(sortedTaskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : sortedTaskList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task priority in descending order."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task priority."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskPriority(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.sort((task1, task2) -\u003e task2.getTaskPriority() - task1.getTaskPriority());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task credit in descending order."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task credit."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskCredit(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.sort((task1, task2) -\u003e task2.getTaskCredit() - task1.getTaskCredit());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the name of the members assigned to the tasks in alphabetical order."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasksAndAssignedMembers HashMap containing tasks with assigned members."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the name of the members assigned to the tasks in alphabetical order."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskMember(HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e tasksAndAssignedMembers,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                                            ArrayList\u003cTask\u003e taskList, String memberName) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cTask\u003e allAssignedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        // to be made more efficient"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (Member member : tasksAndAssignedMembers.get(task)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (member.getName().equals(memberName)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    allAssignedTasks.add(task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.sortTaskName(allAssignedTasks);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Filters the list of tasks by the task state."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The List of tasks."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param state The task state required to filter the task list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks filtered by the task state."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskState(ArrayList\u003cTask\u003e taskList, String state) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (state.equals(task.getTaskState().toString())) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 133,
      "seanlimhx": 1
    }
  },
  {
    "path": "src/main/java/util/ViewHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class ViewHelper {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private static final String BORDER_CORNER \u003d \"+\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private static final char HORI_BORDER_UNIT \u003d \u0027-\u0027;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private static final String VERTI_BORDER_UNIT \u003d \"|\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private static final int DEFAULT_HORI_BORDER_LENGTH \u003d 60;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Returns a String array that contains input in table form."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param toPrintAll ArrayList with each element fitting into one table, and each element consists of an"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     *                   ArrayList of Strings containing the lines to be printed in a table"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return A String array that contains input in table form."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] consolePrintTable(ArrayList\u003cArrayList\u003cString\u003e\u003e toPrintAll) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e tableContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        for (ArrayList\u003cString\u003e toPrint : toPrintAll) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            tableContent.add(consolePrintTableHoriBorder(DEFAULT_HORI_BORDER_LENGTH));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            boolean hasPrintedTableHeader \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            for (String s : toPrint) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                if (s.length() \u003c\u003d DEFAULT_HORI_BORDER_LENGTH) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    String line \u003d VERTI_BORDER_UNIT + s"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                            + getRemainingSpaces(DEFAULT_HORI_BORDER_LENGTH - s.length())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                            + VERTI_BORDER_UNIT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    tableContent.add(line);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    String[] splitStrings \u003d getArrayOfSplitStrings(s);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    for (String s1 : splitStrings) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        String line \u003d VERTI_BORDER_UNIT + s1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                                + getRemainingSpaces(DEFAULT_HORI_BORDER_LENGTH - s1.length())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                                + VERTI_BORDER_UNIT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        tableContent.add(line);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                if (!hasPrintedTableHeader) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    tableContent.add(consolePrintTableHoriBorder(DEFAULT_HORI_BORDER_LENGTH));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    hasPrintedTableHeader \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            tableContent.add(consolePrintTableHoriBorder(DEFAULT_HORI_BORDER_LENGTH));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return tableContent.toArray(new String[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Splits a long String into an array of smaller Strings to fit the table display."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * indexOfStringSplitStart refers to the index of the first char of the split string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * indexOfStringSplitEnd refers to the index after the index of the last char of the split string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param toPrint String to be printed in table form."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return array of Strings to be printed line by line to fit the table width requirement."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String[] getArrayOfSplitStrings(String toPrint) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e splitStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        int indexOfStringSplitStart \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        int indexOfStringSplitEnd \u003d DEFAULT_HORI_BORDER_LENGTH;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        boolean isLastLine \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        while (!isLastLine) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            if (toPrint.substring(indexOfStringSplitStart, indexOfStringSplitEnd).contains(\" \")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                while (toPrint.charAt(indexOfStringSplitEnd - 1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    indexOfStringSplitEnd--;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                splitStrings.add(toPrint.substring(indexOfStringSplitStart, indexOfStringSplitEnd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                indexOfStringSplitStart \u003d indexOfStringSplitEnd;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                indexOfStringSplitEnd +\u003d DEFAULT_HORI_BORDER_LENGTH;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                //if a single word without space is longer than defaultHoriBorderLength"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                while (toPrint.charAt(indexOfStringSplitEnd - 1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    indexOfStringSplitEnd++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    if (indexOfStringSplitEnd \u003d\u003d toPrint.length()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                int numOfLines \u003d (indexOfStringSplitEnd - indexOfStringSplitStart) / (DEFAULT_HORI_BORDER_LENGTH - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d numOfLines; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    String wordSegment \u003d toPrint.substring(indexOfStringSplitStart,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                            indexOfStringSplitStart + DEFAULT_HORI_BORDER_LENGTH - 1) + \"-\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    splitStrings.add(wordSegment);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    indexOfStringSplitStart +\u003d (DEFAULT_HORI_BORDER_LENGTH - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                indexOfStringSplitEnd \u003d indexOfStringSplitStart + DEFAULT_HORI_BORDER_LENGTH;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            if (indexOfStringSplitEnd \u003e\u003d toPrint.length()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                splitStrings.add(toPrint.substring(indexOfStringSplitStart));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                isLastLine \u003d true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return splitStrings.toArray(new String[0]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Returns a String of the number of spaces needed to complete the table."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param numOfRemainingSpaces number of spaces needed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return String containing indicated number of spaces."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String getRemainingSpaces(int numOfRemainingSpaces) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (numOfRemainingSpaces \u003d\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            char[] remainingSpaces \u003d new char[numOfRemainingSpaces];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            for (int i \u003d 0; i \u003c numOfRemainingSpaces; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                remainingSpaces[i] \u003d \u0027 \u0027;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String(remainingSpaces);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Returns an indented horizontal border of a defined length with border corners (length not inclusive of corners)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param borderLength Length of border excluding corners."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return A String containing an indented horizontal border of a defined length with border corners."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String consolePrintTableHoriBorder(int borderLength) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        char[] border \u003d new char[borderLength];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        for (int i \u003d 0; i \u003c borderLength; i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            border[i] \u003d HORI_BORDER_UNIT;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String borderString \u003d new String(border);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return BORDER_CORNER + borderString + BORDER_CORNER;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 125
    }
  },
  {
    "path": "src/main/java/util/constant/ConstantHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.constant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class ConstantHelper {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 4
    }
  },
  {
    "path": "src/main/java/util/date/DateTimeHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.DukeLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class DateTimeHelper {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * This method takes in the date in String and return is as a Date object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param date String of the date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return a Date object for consumption."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @throws ParseException throws when there is an error with parsing the date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Date formatDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return formatter.parse(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * This method format the Date object and return as a String date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param date takes in the Date object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return a date String format for consumption."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String formatDateForDisplay(Date date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return formatter.format(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * This method calculate the difference from the current date to the task set date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param taskDate The deadline of the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return the remaining/Overdue day(s) of the days."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getDifferenceDays(Date taskDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            currentDate \u003d formatter.parse(formatter.format(currentDate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            DukeLogger.logDebug(DateTimeHelper.class, e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        long diff \u003d currentDate.getTime() - taskDate.getTime();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        long totalDays \u003d TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (totalDays \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return \" (Due: Today)\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (totalDays \u003c 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return \" (Remaining: \" + Math.abs(totalDays) + \" Days)\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return \" (Overdue: \" + totalDays + \" Days)\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlimhx": 3,
      "Dkenobi": 53
    }
  },
  {
    "path": "src/main/java/util/factories/IArchDukeFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface IArchDukeFactory\u003cT\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    T create(String input);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 5
    }
  },
  {
    "path": "src/main/java/util/factories/MemberFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.NullMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class MemberFactory implements IArchDukeFactory\u003cIMember\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private final Pattern validEmailAddressRegex \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            Pattern.compile(\"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,6}$\", Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public MemberFactory() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method to create a new member."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param input Input containing details of member to be added (name, phone, email)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return Member with the relevant details. Index number is set later when adding to list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public IMember create(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String[] memberDetails \u003d this.parserHelper.parseMemberDetails(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        boolean isNameCreated \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String name \u003d memberDetails[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (!(\"--\").equals(name) \u0026\u0026 !(\"\").equals(name)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            isNameCreated \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String phone \u003d memberDetails[1];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String email \u003d memberDetails[2];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int index \u003d Integer.parseInt(memberDetails[3]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String role \u003d memberDetails[4];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (!validEmailAddressRegex.matcher(email).find() \u0026\u0026 !\"--\".equals(email)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullMember(\"Email address is not a valid email address! Please adhere to standard \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                + \"email address formats, such as archduke@emailprovider.com\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else if (!isNameCreated) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullMember(\"Name cannot be empty! Please follow the add command format in user \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                  + \"guide! \\\"add member -n NAME\\\" is the minimum requirement for add member command\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return new Member(name, phone, email, index, role);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 8,
      "Lucria": 36
    }
  },
  {
    "path": "src/main/java/util/factories/ProjectFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.IProject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.NullProject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ProjectFactory implements IArchDukeFactory\u003cIProject\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Creation of an IProject object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Project may be a NullProject due to errors in input. Validation of project will be handled by Repository"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param input : User input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return Method will return an IProject object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public IProject create(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (input.length() \u003c 8) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullProject();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String projectName \u003d input.substring(7);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return new Project(projectName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 22
    }
  },
  {
    "path": "src/main/java/util/factories/ReminderFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.IReminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.NullReminder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.Reminder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class ReminderFactory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ReminderFactory() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Method to create a new reminder and put it into the remidner list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param input Input containing the information about the reminder."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return Reminder as an object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public IReminder createReminder(String input) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (!input.contains(\"-n\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new NullReminder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String [] reminderDetails \u003d input.split(\"-\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e newReminderDetails \u003d parserHelper.parseReminderDetails(reminderDetails);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String newReminderName \u003d newReminderDetails.get(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Date newReminderDate \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (newReminderDetails.get(1) !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            newReminderDate \u003d dateTimeHelper.formatDate(newReminderDetails.get(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return new Reminder(newReminderName,newReminderDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 43
    }
  },
  {
    "path": "src/main/java/util/factories/TaskFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.NullTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class TaskFactory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public TaskFactory() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Method to create a new task and put it into a list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param input Input containing the information about the task and priority."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return Task as an object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ITask createTask(String input) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (!input.contains(\"-t\") || !input.contains(\"-p\") || !input.contains(\"-c\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullTask();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String [] taskDetails \u003d input.split(\"-r\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (taskDetails.length \u003e 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskRequirements \u003d parseTaskRequirements(taskDetails,1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e newTaskDetails \u003d parserHelper.parseTaskDetails(taskDetails[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newTaskName \u003d newTaskDetails.get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int newTaskPriority \u003d Integer.parseInt(newTaskDetails.get(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Date newTaskDate \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (newTaskDetails.get(2) !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            newTaskDate \u003d dateTimeHelper.formatDate(newTaskDetails.get(2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int newTaskCredit \u003d Integer.parseInt(newTaskDetails.get(3));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        TaskState newTaskState \u003d TaskState.OPEN;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (!(\"NONE\".equals(newTaskDetails.get(4)))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            newTaskState \u003d convertStringToTaskState(newTaskDetails.get(4));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return new Task(newTaskName, newTaskPriority, newTaskDate, newTaskCredit, newTaskState, taskRequirements);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Creates ArrayList of Strings containing task requirements."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskDetails  Details of new task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param startIndexOfTaskRequirements index from which the content in taskDetails will be task requirements."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return ArrayList of type String containing task requirements."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private ArrayList\u003cString\u003e parseTaskRequirements(String[] taskDetails, int startIndexOfTaskRequirements) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int i \u003d startIndexOfTaskRequirements; i \u003c taskDetails.length; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            taskRequirements.add(taskDetails[i].trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return taskRequirements;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Converts string input for state into enum TaskState object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param inputState String input of state."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return enum TaskState object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private TaskState convertStringToTaskState(String inputState) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String inputStateLowerCase \u003d inputState.toLowerCase();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        switch (inputStateLowerCase) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return TaskState.DONE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return TaskState.TODO;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        case \"doing\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return TaskState.DOING;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return TaskState.OPEN;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 23,
      "seanlimhx": 36,
      "Lucria": 12,
      "Dkenobi": 15
    }
  },
  {
    "path": "src/main/java/util/json/JsonConverter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import controllers.ConsoleInputController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.log.DukeLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class JsonConverter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String userDirectory \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method that is responsible for saving Projects Data by using GSON library to convert to a human editable JSON"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void saveProject(Project project) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                .setPrettyPrinting()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            DukeLogger.logDebug(JsonConverter.class, \"Saving to file.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(userDirectory + \"/\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                                    + project.getName() + \".json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            gson.toJson(project, fileWriter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fileWriter.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            DukeLogger.logDebug(JsonConverter.class, \"File saved.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            DukeLogger.logError(JsonConverter.class, \"Save file is not found or not created\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method to delete the relevant json of original Project when user wishes to delete a project."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param project : selected Project to be deleted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @throws DukeException : Exception thrown when JSON of project cannot be found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void deleteProject(Project project) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String selectedProjectJson \u003d userDirectory + \"/\" + project.getName() + \".json\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        File file \u003d new File(selectedProjectJson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (!file.delete()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            throw new DukeException(\"JSON of project not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method responsible for loading Projects Data from hard coded directory where savedProjects.json file is located"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ArrayList\u003cProject\u003e loadAllProjectsData() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cProject\u003e allProjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        File directory \u003d new File(userDirectory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        File[] allProjectJson \u003d directory.listFiles((file, name) -\u003e name.endsWith(\".json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        for (File projectJson : allProjectJson) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            try (FileReader fileReader \u003d new FileReader(projectJson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                DukeLogger.logDebug(ConsoleInputController.class, \"Loading saved file.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                Project newProject \u003d gson.fromJson(fileReader, new TypeToken\u003cProject\u003e(){}.getType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                allProjects.add(newProject);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                DukeLogger.logDebug(ConsoleInputController.class, \"Saved file loaded.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            } catch (IOException err) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                DukeLogger.logError(ConsoleInputController.class, \"Saved file not loaded\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return allProjects;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return allProjects;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 73,
      "Dkenobi": 3
    }
  },
  {
    "path": "src/main/java/util/log/DukeLogger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.log;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import org.apache.logging.log4j.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import org.apache.logging.log4j.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class DukeLogger {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private static Logger _logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static void logDebug(Class className, String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        _logger \u003d LogManager.getLogger(className);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        _logger.debug(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static void logInfo(Class className, String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        _logger \u003d LogManager.getLogger(className);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        _logger.info(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static void logError(Class className, String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        _logger \u003d LogManager.getLogger(className);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        _logger.error(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 23
    }
  },
  {
    "path": "src/main/java/views/CLIView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import controllers.ConsoleInputController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import controllers.ProjectInputController;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.DukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CLIView {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private static final String HORILINE \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private static final String INDENTATION \u003d \"\\t\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private ConsoleInputController consoleInputController;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CLIView() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.projectRepository \u003d new ProjectRepository();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.consoleInputController \u003d new ConsoleInputController(projectRepository);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to call when View model is started."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logInfo(CLIView.class, \"ArchDuke have started.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        boolean isDukeRunning \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(\"Hello! I\u0027m Duke\", \"What can I do for you?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        //noinspection InfiniteLoopStatement"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        while (isDukeRunning) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            String commandInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            String[] outputMessage \u003d consoleInputController.onCommandReceived(commandInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            if (outputMessage[0].matches(\"Now managing.*\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                consolePrint(outputMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                ProjectInputController projectInputController \u003d new ProjectInputController(projectRepository);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                String projectNumber \u003d consoleInputController.getManagingProjectIndex();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                while (projectInputController.getIsManagingAProject()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    String[] projectOutputMessage \u003d projectInputController.onCommandReceived(projectNumber);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    consolePrint(projectOutputMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    if (projectOutputMessage[0].matches(\"Bye.*\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        isDukeRunning \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (outputMessage[0].matches(\"Bye.*\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                isDukeRunning \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                consolePrint(outputMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Prints an indented and formatted message with a top and bottom border."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param lines The lines to be printed in between the border."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void consolePrint(String... lines) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        System.out.println(HORILINE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        for (String message : lines) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            System.out.println(INDENTATION + message);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        System.out.println(HORILINE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 2,
      "seanlimhx": 1,
      "Lucria": 5,
      "-": 27,
      "Dkenobi": 33
    }
  },
  {
    "path": "src/main/java/views/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package views.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * This method return the dialog box containing the output and image of duke."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 2,
      "Dkenobi": 61
    }
  },
  {
    "path": "src/main/java/views/ui/DukeUI.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package views.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class DukeUI  {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 7
    }
  },
  {
    "path": "src/main/java/views/ui/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package views.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * A GUI for DukeTest using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DukeUI duke \u003d new DukeUI();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 30
    }
  },
  {
    "path": "src/main/java/views/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package views.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * Controller for views.ui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DukeUI duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/lucria.jpg\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/lucria.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setDuke(DukeUI d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        dukeGreeting();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private void dukeGreeting() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String greetingText \u003d \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"What can i do for you\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                DialogBox.getDukeDialog(greetingText, dukeImage)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing DukeTest\u0027s"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (input.contains(\"bye\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            duke.getResponse(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            timeDelay(1000);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private void timeDelay(long t) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Thread.sleep(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 76
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"views.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 19
    }
  },
  {
    "path": "src/test/java/AssignmentViewHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.AssignmentViewHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class AssignmentViewHelperTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Test for AssignmentViewHelper. Initialise dummy project and members with assignments upon"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * creation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public AssignmentViewHelperTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project \u003d new Project(\"Test Project\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member1 \u003d new Member(\"Tom\", \"--\", \"--\", 1, \"member\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member2 \u003d new Member(\"Dick\", \"--\", \"--\", 2, \"member\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member3 \u003d new Member(\"Harry\", \"--\", \"--\", 3, \"member\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Task task \u003d new Task(\"Documentation\", 0,null, 0, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Task task2 \u003d new Task(\"JUnit tests\", 0,null, 0, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addMember(member1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addMember(member2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addMember(member3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addTask(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addTask(task2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.createAssignment(task, member1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.createAssignment(task, member2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.createAssignment(task2, member2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.createAssignment(task2, member3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testSetupOfProjectAndMembers() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"Test Project\", project.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Tom (Phone: -- | Email: -- | Role: member)\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member1.getDetails());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"2. Dick (Phone: -- | Email: -- | Role: member)\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member2.getDetails());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"3. Harry (Phone: -- | Email: -- | Role: member)\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member3.getDetails());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(3, project.getNumOfMembers());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tom\", project.getMembers().getMember(1).getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Dick\", project.getMembers().getMember(2).getName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Harry\", project.getMembers().getMember(3).getName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, project.getTasks().getSize());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Documentation\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"JUnit tests\", project.getTask(2).getTaskName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void testGetMemberOutput() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cInteger\u003e validMembersIndexes \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cString\u003e memberOutput \u003d AssignmentViewHelper.getMemberOutput(validMembersIndexes,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            project);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Here are each member\u0027s tasks:\", memberOutput.get(0));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tasks assigned to Tom\", memberOutput.get(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"1. Documentation | Priority: 0 | Due: -- | Credit: 0 | State: OPEN\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberOutput.get(2));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tasks assigned to Dick\", memberOutput.get(3));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"1. Documentation | Priority: 0 | Due: -- | Credit: 0 | State: OPEN\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberOutput.get(4));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"2. JUnit tests | Priority: 0 | Due: -- | Credit: 0 | State: OPEN\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberOutput.get(5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tasks assigned to Harry\", memberOutput.get(6));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"1. JUnit tests | Priority: 0 | Due: -- | Credit: 0 | State: OPEN\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberOutput.get(7));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void testGetTaskOutput() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cInteger\u003e validTasksIndexes \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 2));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cString\u003e taskOutput \u003d AssignmentViewHelper.getTaskOutput(validTasksIndexes,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            project);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Here are the members assigned to each task:\", taskOutput.get(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Documentation | Priority: 0 | Due: -- | Credit: 0 | State: OPEN\", taskOutput.get(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Members assigned to task 1 (Documentation | Priority: 0 | Due: -- | Credit: 0 | State: OPEN)\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            taskOutput.get(2));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"1. Tom\", taskOutput.get(3));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"2. Dick\", taskOutput.get(4));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"JUnit tests | Priority: 0 | Due: -- | Credit: 0 | State: OPEN\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            taskOutput.get(5));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Members assigned to task 2 (JUnit tests | Priority: 0 | Due: -- | Credit: 0 | State: OPEN)\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            taskOutput.get(6));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"1. Dick\", taskOutput.get(7));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"2. Harry\", taskOutput.get(8));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 90,
      "Lucria": 13
    }
  },
  {
    "path": "src/test/java/controllers/AssignmentControllerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class AssignmentControllerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    AssignmentControllerTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project \u003d new Project(\"Test Project\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member1 \u003d new Member(\"Tom\", \"NIL\", \"NIL\", 1, \"member\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member2 \u003d new Member(\"Dick\", \"NIL\", \"NIL\", 2, \"member\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member3 \u003d new Member(\"Harry\", \"NIL\", \"NIL\", 3, \"member\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task task \u003d new Task(\"Test task\", 0,null, 0, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addMember(member1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addMember(member2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addMember(member3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addTask(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testSetupOfProjectAndMembers() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"Test Project\", project.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Tom (Phone: NIL | Email: NIL | Role: member)\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member1.getDetails());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"2. Dick (Phone: NIL | Email: NIL | Role: member)\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member2.getDetails());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"3. Harry (Phone: NIL | Email: NIL | Role: member)\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member3.getDetails());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(3, project.getNumOfMembers());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tom\", project.getMembers().getMember(1).getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Dick\", project.getMembers().getMember(2).getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Harry\", project.getMembers().getMember(3).getName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getTasks().getSize());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test task\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testAssignAndUnassign() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        AssignmentController assignmentController \u003d new AssignmentController(project);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String assignCommand \u003d \"assign task -i 1 -to 1 2 -rm 3 4\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController.assignAndUnassign(assignCommand.substring(12));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(project.getTask(1), member1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(project.getTask(1), member2));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertFalse(project.containsAssignment(project.getTask(1), member3));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController \u003d new AssignmentController(project);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignCommand \u003d \"assign task -i 1 -to 3 -rm 1 \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController.assignAndUnassign(assignCommand.substring(12));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertFalse(project.containsAssignment(project.getTask(1), member1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(project.getTask(1), member2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(project.getTask(1), member3));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 55,
      "iamabhishek98": 10,
      "Lucria": 8
    }
  },
  {
    "path": "src/test/java/controllers/ParserHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class ParserHelperTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    ParserHelperTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project \u003d new Project(\"Test Project\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.member1 \u003d new Member(\"Tom\", \"NIL\", \"NIL\", 1, \"member\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.member2 \u003d new Member(\"Dick\", \"NIL\", \"NIL\", 2, \"member\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.member3 \u003d new Member(\"Harry\", \"NIL\", \"NIL\", 3, \"member\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Task task1 \u003d new Task(\"Test task 1\", 0,null, 0, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Task task2 \u003d new Task(\"Test task 2\", 0,null, 0, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addMember(member1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addMember(member2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addMember(member3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addTask(task1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addTask(task2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void testParseAssignmentParams() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String command \u003d \"-i 1 2 -to 3 4\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(2).size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(parsedCommands.get(0).contains(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(parsedCommands.get(0).contains(2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(parsedCommands.get(1).contains(3));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parserHelper.getErrorMessages().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Member with index 4 does not exist.\", parserHelper.getErrorMessages().get(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        command \u003d \"-i 3 -to 1 2 -rm 3\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parsedCommands.get(2).size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(parsedCommands.get(1).contains(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(parsedCommands.get(1).contains(2));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(parsedCommands.get(2).contains(3));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Task with index 3 does not exist.\", parserHelper.getErrorMessages().get(0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        command \u003d \"-i 1 -to 1 -rm 1\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(2).size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Cannot assign and unassign task to member 1 (Tom) at the same time\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            parserHelper.getErrorMessages().get(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        command \u003d \"-i abc -to 1 -rm 2\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parsedCommands.get(2).size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        command \u003d \"-i 1 -to \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        command \u003d \"-i 5 -to \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void testParseMembersIndex() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String command \u003d \"0 1 2 abc 3 4\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validMemberIndexes \u003d parserHelper.parseMembersIndexes(command, 3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validMemberIndexes.size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validMemberIndexes.contains(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validMemberIndexes.contains(2));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validMemberIndexes.contains(3));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e errorMessages \u003d parserHelper.getErrorMessages();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Could not recognise member abc, please ensure it is an integer.\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Member with index 0 does not exist.\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Member with index 4 does not exist.\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void testParseTasksIndex() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String command \u003d \"0 1 2 def 3 4\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validTaskIndexes \u003d parserHelper.parseTasksIndexes(command, 3);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validTaskIndexes.size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validTaskIndexes.contains(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validTaskIndexes.contains(2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validTaskIndexes.contains(3));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e errorMessages \u003d parserHelper.getErrorMessages();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Could not recognise task def, please ensure it is an integer.\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Task with index 0 does not exist.\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Task with index 4 does not exist.\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 116,
      "seanlimhx": 1
    }
  },
  {
    "path": "src/test/java/controllers/ProjectInputControllerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "class ProjectInputControllerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ProjectInputController projectInputController;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String simulatedUserInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String actualOutput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String expectedOutput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Date dueDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    ProjectInputControllerTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.projectRepository \u003d new ProjectRepository();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.projectInputController \u003d new ProjectInputController(projectRepository);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Always true test just to test if jUnit is working."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectAddMember() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String simulatedUserInput \u003d \"add member -n Jerry Zhang -i 9123456 -e jerryzhang@gmail.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project,simulatedUserInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String message : project.getMembers().getAllMemberDetails().toArray(new String[0])) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d \"1. Jerry Zhang (Phone: 9123456 | Email: jerryzhang@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectEditMember() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Jerry Zhang -i 9123456 -e jerryzhang@gmail.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"edit member 1 -n Dillen -i 9123456 -e dillen@gmail.com\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectEditMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String message : project.getMembers().getAllMemberDetails().toArray(new String[0])) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d \"1. Dillen (Phone: 9123456 | Email: dillen@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"edit member 1 -n Jerry\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectEditMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String message : project.getMembers().getAllMemberDetails().toArray(new String[0])) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d \"1. Jerry (Phone: 9123456 | Email: dillen@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"edit member 1 -i 911\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectEditMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String message : project.getMembers().getAllMemberDetails().toArray(new String[0])) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d \"1. Jerry (Phone: 911 | Email: dillen@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"edit member 1 -e jerry@gmail.com -n Thanos Endgame\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectEditMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String message : project.getMembers().getAllMemberDetails().toArray(new String[0])) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d \"1. Thanos Endgame (Phone: 911 | Email: jerry@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectDeleteMember() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Jerry Zhang -i 9123456 -e jerryzhang@gmail.com\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"delete member 1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectDeleteMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String message : project.getMembers().getAllMemberDetails().toArray(new String[0])) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        expectedOutput \u003d \"\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectViewCredits() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Dillen -i 9999 -e dillen@gmail.com\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Jerry - i 9999 -e jerryn@gmail.com\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Sean\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add task -t task1 -p 10 -c 10 -s todo\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add task -t task2 -p 5 -c 10 -s doing\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String message : project.getCredits().toArray(new String[0])) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        expectedOutput \u003d \"1. Dillen | Credits: 02. Jerry | Credits: 03. Sean | Credits: 0\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"assign task -i 1 -to 1 2\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAssignTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"assign task -i 2 -to 1\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAssignTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String message : project.getCredits().toArray(new String[0])) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        expectedOutput \u003d \"1. Dillen | Credits: 202. Jerry | Credits: 103. Sean | Credits: 0\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectAddTask() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            dueDate \u003d dateTimeHelper.formatDate(\"21/09/2019\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"add task -t Documentation for product -p 2 -d 21/09/2019 -c 40 -s todo \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"-r do something -r do another thing\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"add task -t Documentation for product -p 2 -c 40 \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"-s done -r do something -r do another thing\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"add task  -p 2 -t Documentation for product -c 40 -r do something \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"-r do another thing\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"add task -t Documentation for product -p 2 -c 40\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"add task -s doing -t Documentation for CS2113 -c 40 -d 21/09/2019 -p 2\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTasks().getAllTaskDetails("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers()).toArray(new String[0])) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            expectedOutput \u003d \"1. Documentation for product | Priority: 2 | Due: 21 Sep 2019\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 40 | State: TODO\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. Documentation for product | Priority: 2 | Due: -- | Credit: 40 | State: DONE\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. Documentation for product | Priority: 2 | Due: -- | Credit: 40 | State: OPEN\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"4. Documentation for product | Priority: 2 | Due: -- | Credit: 40 | State: OPEN\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"5. Documentation for CS2113 | Priority: 2 | Due: 21 Sep 2019\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 40 | State: DOING\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectEditTask() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            dueDate \u003d dateTimeHelper.formatDate(\"22/09/2019\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"add task -t Documentation for product -p 2 -d 21/09/2019 -c 40 -s todo \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"-r do something -r do another thing\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"edit task 1 -t No documentation -p 5 -d 22/09/2019 -c 50 -s done \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        + \"-r do nothing -r do another thing\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTask(project,simulatedUserInput);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTasks().getAllTaskDetails("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers()).toArray(new String[0])) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            expectedOutput \u003d \"1. No documentation | Priority: 5 | Due: 22 Sep 2019\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 50 | State: DONE\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"edit task 1 -p 5 -t Infinity War -d 22/09/2019 -c 40 -s todo\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTask(project,simulatedUserInput);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTasks().getAllTaskDetails("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers()).toArray(new String[0])) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            expectedOutput \u003d \"1. Infinity War | Priority: 5 | Due: 22 Sep 2019\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 40 | State: TODO\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"edit task 1 -t Infinity War -p 1 -c 30\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTask(project,simulatedUserInput);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTasks().getAllTaskDetails("
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers()).toArray(new String[0])) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            expectedOutput \u003d \"1. Infinity War | Priority: 1 | Due: 22 Sep 2019\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 30 | State: TODO\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"edit task 1 -c 20 -p 2\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTask(project,simulatedUserInput);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTasks().getAllTaskDetails("
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers()).toArray(new String[0])) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. Infinity War | Priority: 2 | Due: 22 Sep 2019\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 20 | State: TODO\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"edit task 1 -c 70 -s doing -p 6 -d 12/12/2020 -t End Game\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            dueDate \u003d dateTimeHelper.formatDate(\"12/12/2020\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTask(project,simulatedUserInput);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTasks().getAllTaskDetails("
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers()).toArray(new String[0])) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. End Game | Priority: 6 | Due: 12 Dec 2020\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 70 | State: DOING\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectViewTask() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"add task -t task1 -p 10 -c 10 -s todo -d 12/12/2021\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"add task -t task2 -p 5 -c 100 -s doing\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"add task -t task3 -p 1 -c 50 -s done -d 1/1/2020\";"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"add member -n Dillen -i 9999 -e dillen@gmail.com\";"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"add member -n Jerry - i 9999 -e jerryn@gmail.com\";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"assign task -i 1 -to 1 2\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAssignTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"assign task -i 2 -to 1\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAssignTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate1 \u003d dateTimeHelper.formatDate(\"12/12/2021\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate2 \u003d dateTimeHelper.formatDate(\"1/1/2020\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTasks().getAllTaskDetails("
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers()).toArray(new String[0])) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. task1 | Priority: 10 | Due: 12 Dec 2021\""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 10 | State: TODO\""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. task2 | Priority: 5 | Due: -- | Credit: 100 | State: DOING\""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. task3 | Priority: 1 | Due: 01 Jan 2020\""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 50 | State: DONE\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTasks().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers(), \"/PRIORITY\").toArray(new String[0])) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. task1 | Priority: 10 | Due: 12 Dec 2021\""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 10 | State: TODO\""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. task2 | Priority: 5 | Due: -- | Credit: 100 | State: DOING\""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. task3 | Priority: 1 | Due: 01 Jan 2020\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 50 | State: DONE\";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTasks().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers(), \"/NAME\").toArray(new String[0])) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. task1 | Priority: 10 | Due: 12 Dec 2021\""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 10 | State: TODO\""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. task2 | Priority: 5 | Due: -- | Credit: 100 | State: DOING\""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. task3 | Priority: 1 | Due: 01 Jan 2020\""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 50 | State: DONE\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTasks().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers(), \"/DATE\").toArray(new String[0])) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. task3 | Priority: 1 | Due: 01 Jan 2020\""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 50 | State: DONE\""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. task1 | Priority: 10 | Due: 12 Dec 2021\""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 10 | State: TODO\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTasks().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers(), \"/CREDIT\").toArray(new String[0])) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. task2 | Priority: 5 | Due: -- | Credit: 100 | State: DOING\""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. task3 | Priority: 1 | Due: 01 Jan 2020\""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 50 | State: DONE\""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. task1 | Priority: 10 | Due: 12 Dec 2021\""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 10 | State: TODO\";"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTasks().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers(), \"/WHO-Dillen\").toArray(new String[0])) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. task1 | Priority: 10 | Due: 12 Dec 2021\""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 10 | State: TODO\""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. task2 | Priority: 5 | Due: -- | Credit: 100 | State: DOING\";"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectDeleteTask() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add task -t Documentation for product -p 2 d/21/09/2019 -c 40 s/todo \""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"r/do something -r do another thing\";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"delete task 1\";"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectDeleteTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String message : project.getTasks().getAllTaskDetails("
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                project.getTasksAndAssignedMembers()).toArray(new String[0])) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        expectedOutput \u003d \"\";"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectEditTaskRequirements() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            dueDate \u003d dateTimeHelper.formatDate(\"21/09/2019\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"add task -t Documentation for product -p 2 -d 21/09/2019 -c 40 -s todo \""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"-r do something -r do another thing\";"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            simulatedUserInput \u003d \"edit task requirements 1 -r do nothing\";"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTaskRequirements(project, simulatedUserInput);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTask(1).getTaskRequirements().toArray(new String[0])) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            expectedOutput \u003d \"Documentation for product | Priority: 2 | Due: 21 Sep 2019\""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 40 | State: TODO\""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"1. do something2. do another thing3. do nothing\";"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            simulatedUserInput \u003d \"edit task requirements 1 -rm 1 2 -r do everything\";"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTaskRequirements(project, simulatedUserInput);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTask(1).getTaskRequirements().toArray(new String[0])) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            expectedOutput \u003d \"Documentation for product | Priority: 2 | Due: 21 Sep 2019\""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 40 | State: TODO\""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"1. do nothing2. do everything\";"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectAssignTask() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add task -t Documentation for product -p 2 -d 21/09/2019 -c 40 -s todo \""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"-r do something -r do another thing\";"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Jerry Zhang -i 9123456 -e jerryzhang@gmail.com\";"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Dillen -i 911 -e dillen@hotmail.com\";"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"assign task -i 1 -to 1 2\";"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAssignTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String message : project.getAssignedTaskList().toArray(new String[0])) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        expectedOutput \u003d \"Documentation for product is assigned to: Jerry ZhangDillen\";"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void assignRole_correctInputs() {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Tony Stark -e richguy@gmail.com -r RichGuy\";"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Doctor Strange -i 9123456 -e strange@gmail.com -r SmartGuy\";"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Hulk -i 911 -r StrongGuy\";"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"role 1 -n IronMan\";"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectInputController.projectRoleMembers(project, simulatedUserInput);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        actualOutput \u003d project.getMembers().getMember(1).getRole();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d \"IronMan\";"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"SmartGuy\", project.getMembers().getMember(2).getRole());"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"StrongGuy\", project.getMembers().getMember(3).getRole());"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testProjectViewAssignments_invalidInputs() {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Project project \u003d new Project(\"New project\");"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"view assignments\";"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] output \u003d projectInputController.projectViewAssignments(project, simulatedUserInput);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(3, output.length);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Please input the parameters to view assignments:\", output[0]);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"view assignments -\";"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        output \u003d projectInputController.projectViewAssignments(project, simulatedUserInput);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(3, output.length);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Please input the parameters to view assignments:\", output[0]);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"view assignments atm\";"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        output \u003d projectInputController.projectViewAssignments(project, simulatedUserInput);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, output.length);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Could not understand your command! Please use -m for member, -t for task\","
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            output[0]);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 377,
      "sinteary": 22,
      "seanlimhx": 2,
      "Lucria": 24,
      "Dkenobi": 57
    }
  },
  {
    "path": "src/test/java/factorytests/MemberFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package factorytests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.NullMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.MemberFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class MemberFactoryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private MemberFactory memberFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String simulatedFactoryInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    MemberFactoryTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.memberFactory \u003d new MemberFactory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Always true test just to test if jUnit is working."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * This test is to test if user gives a valid input, whether MemberFactory"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * can create the desired Member properly."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_fullCorrectInputs_creationSuccess() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedFactoryInput \u003d \"-n Thor -i 91234567 -e thor@marvel.com -x 1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member expectedMember \u003d new Member(\"Thor\", \"91234567\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                \"thor@marvel.com\", 1, \"member\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_correctPartialInputs_creationSuccess() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedFactoryInput \u003d \"-n Iron man -i 12345678 -x 2\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member expectedMember \u003d new Member(\"Iron man\", \"12345678\", \"--\", 2, \"member\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedFactoryInput \u003d \"-n Dr Strange -x 3\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedMember \u003d new Member(\"Dr Strange\", \"--\", \"--\", 3, \"member\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_wrongInputs_creationFailed() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedFactoryInput \u003d \"-i 12341234 -x 1\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        NullMember expectedMember \u003d new NullMember(\"Name cannot be empty! Please follow the add command \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"format in user guide! \\\"add member -n NAME\\\" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"is the minimum requirement for add member command\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_truncatedInputs_exceptionCaught() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-n -x 1\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        NullMember expectedMember \u003d new NullMember(\"Name cannot be empty! Please follow the add command \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"format in user guide! \\\"add member -n NAME\\\" is the minimum requirement for \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"add member command\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_missingFlags_exceptionCaught() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"- -x 0\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        NullMember expectedMember \u003d  new NullMember(\"Name cannot be empty! Please follow the add command \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"format in user guide! \\\"add member -n NAME\\\" is the minimum requirement for \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"add member command\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_invalidEmail_nullObjectReturned() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-n Thor -i 91234567 -e thor.marvel.com\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        NullMember expectedMember \u003d  new NullMember(\"Email address is not a valid email address! \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"Please adhere to standard email address formats, \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"such as archduke@emailprovider.com\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_validEmail_creationSuccess() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-n Thor -i 91234567 -e thor.bigguy@marvel.com\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member expectedMember \u003d new Member(\"Thor\", \"91234567\", \"thor.bigguy@marvel.com\", 0, \"member\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 9,
      "Lucria": 107
    }
  },
  {
    "path": "src/test/java/factorytests/TaskFactoryTests.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package factorytests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.NullTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.TaskFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class TaskFactoryTests {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private TaskFactory taskFactory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String simulatedFactoryInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    TaskFactoryTests() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.taskFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Always true test just to test if Junit is working."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void taskCreation_fullCorrectInputs_creationSuccess() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedFactoryInput \u003d \"-t Killing Thanos -p 1 -d 28/09/2019 -c 100 -s done -r Use Iron Man\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ITask simulatedTask \u003d taskFactory.createTask(simulatedFactoryInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ArrayList\u003cString\u003e expectedRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            expectedRequirements.add(\"Use Iron Man\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            Task expectedTask \u003d new Task(\"Killing Thanos\", 1,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    dateTimeHelper.formatDate(\"28/09/2019\"), 100, TaskState.DONE, expectedRequirements);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getDetails(), simulatedTask.getDetails());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskName(),simulatedTask.getTaskName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskCredit(), simulatedTask.getTaskCredit());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskPriority(), simulatedTask.getTaskPriority());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (ParseException err) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fail(\"ParseException was detected when it shouldn\u0027t have\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void taskCreation_correctPartialInputs_creationSuccess() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedFactoryInput \u003d \"-t Turning back time -p 5 -c 5\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ITask simulatedTask \u003d taskFactory.createTask(simulatedFactoryInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            Task expectedTask \u003d new Task(\"Turning back time\", 5,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    null, 5, TaskState.OPEN, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getDetails(), simulatedTask.getDetails());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskName(),simulatedTask.getTaskName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskCredit(), simulatedTask.getTaskCredit());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskPriority(), simulatedTask.getTaskPriority());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (ParseException err) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fail(\"ParseException was detected when it shouldn\u0027t have\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void taskCreation_wrongInputs_creationFailed() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedFactoryInput \u003d \"-t Missing priority -c 5\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ITask simulatedTask \u003d taskFactory.createTask(simulatedFactoryInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            NullTask expectedTask \u003d new NullTask();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getDetails(), simulatedTask.getDetails());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskName(),simulatedTask.getTaskName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskCredit(), simulatedTask.getTaskCredit());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskPriority(), simulatedTask.getTaskPriority());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getDueDate(), simulatedTask.getDueDate());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskState(), simulatedTask.getTaskState());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getAssignedMembers(), simulatedTask.getAssignedMembers());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskRequirements(), simulatedTask.getTaskRequirements());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fail(\"ParseException was detected when it shouldn\u0027t have\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 7,
      "Lucria": 77,
      "Dkenobi": 3
    }
  },
  {
    "path": "src/test/java/modeltests/member/ListOfMembersInProjectTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.MemberList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class ListOfMembersInProjectTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testAddMember() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        MemberList listOfMembersInProject \u003d new MemberList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.addMember(member);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Tom (Phone: 91198766 | Email: tom@gmail.com | Role: member)\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                listOfMembersInProject.getMember(1).getDetails());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testEditMember() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        MemberList listOfMembersInProject \u003d new MemberList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.addMember(member);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        listOfMembersInProject.editMember(1,\"-n John -i 91177777 -e john@gmail.com\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. John (Phone: 91177777 | Email: john@gmail.com | Role: member)\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                listOfMembersInProject.getMember(1).getDetails());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        listOfMembersInProject.editMember(1,\"-n Matthew -e matthew@gmail.com\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Matthew (Phone: 91177777 | Email: matthew@gmail.com | Role: member)\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                listOfMembersInProject.getMember(1).getDetails());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetNumOfMembers() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        MemberList listOfMembersInProject \u003d new MemberList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.addMember(member);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(1, listOfMembersInProject.getNumOfMembers());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testRemoveMember() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        MemberList listOfMembersInProject \u003d new MemberList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.addMember(member);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member toBeRemoved \u003d listOfMembersInProject.getMember(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.removeMember(toBeRemoved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(0, listOfMembersInProject.getNumOfMembers());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 2,
      "Lucria": 47,
      "Dkenobi": 5
    }
  },
  {
    "path": "src/test/java/modeltests/member/MemberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class MemberTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetDetails() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Tom (Phone: 91198766 | Email: tom@gmail.com | Role: member)\",member.getDetails());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testSetIndexNumber() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        member.setIndexNumber(2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"2. Tom (Phone: 91198766 | Email: tom@gmail.com | Role: member)\",member.getDetails());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testUpdateDetails() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        member.updateDetails(\"John\", \"911\", \"john@hotmail.com\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. John (Phone: 911 | Email: john@hotmail.com | Role: member)\", member.getDetails());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 20,
      "Lucria": 13
    }
  },
  {
    "path": "src/test/java/modeltests/member/TaskAssignmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package modeltests.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "class TaskAssignmentTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    Set up a dummy project for the test. It is assumed that all other components are working."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    Some tests for other classes are included in this test to ensure proper functioning before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    testing. Testing:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    TaskAssignmentTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project \u003d new Project(\"New project\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member1 \u003d new Member(\"Tom\", \"NIL\", \"NIL\", 1, \"member\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member2 \u003d new Member(\"Dick\", \"NIL\",\"NIL\", 2, \"member\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member3 \u003d new Member(\"Harry\", \"NIL\", \"NIL\", 3, \"member\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.task \u003d new Task(\"Test task\", 0,null, 0, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addMember(member1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addMember(member2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addMember(member3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addTask(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testSetupOfProjectAndMembers() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Tom (Phone: NIL | Email: NIL | Role: member)\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member1.getDetails());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"2. Dick (Phone: NIL | Email: NIL | Role: member)\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member2.getDetails());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"3. Harry (Phone: NIL | Email: NIL | Role: member)\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member3.getDetails());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(3, project.getNumOfMembers());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tom\", project.getMembers().getMember(1).getName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Dick\", project.getMembers().getMember(2).getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Harry\", project.getMembers().getMember(3).getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getTasks().getSize());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test task\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testManageAssignment() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getTasks().getSize());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test task\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.createAssignment(project.getTask(1),member1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.createAssignment(project.getTask(1),member2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.createAssignment(project.getTask(1),member3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(task, member1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(task, member2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(task, member3));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"[Test task is assigned to: , Tom, Dick, Harry]\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            project.getAssignedTaskList().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testManageAssignmentInvalidTaskNumber() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getTasks().getSize());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test task\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String projectCommand \u003d \"assign task i/200 to/ 1\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        AssignmentController assignmentController \u003d new AssignmentController();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] args \u003d projectCommand.substring(12).split(\" \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController.manageAssignment(project,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                args, this.consoleView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, assignmentController.getAssigneesIndex().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, assignmentController.getUnassigneesIndex().size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"The task you wish to assign (task index 200 ) does not exist!\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                assignmentController.getMessageForView().get(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Please check the index number of the task and try again.\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                assignmentController.getMessageForView().get(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 68,
      "iamabhishek98": 5,
      "Lucria": 14,
      "Dkenobi": 5
    }
  },
  {
    "path": "src/test/java/modeltests/task/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import controllers.AssignmentController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private Project project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    TaskListTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testAddTask() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task task \u003d new Task(\"task\", 5, null,100, TaskState.OPEN,taskRequirements);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"task | Priority: 5 | Due: -- | Credit: 100 | State: OPEN\",taskList.getTask(1).getDetails());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testRemoveTask() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task task \u003d new Task(\"task\", 5, null,100, TaskState.OPEN,taskRequirements);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.removeTask(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(0,taskList.getSize());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetAllTaskDetails() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Task task1 \u003d new Task(\"task1\", 1, null, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Task task2 \u003d new Task(\"task2\", 2, null, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Task task3 \u003d new Task(\"task3\", 3, null, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Task task4 \u003d new Task(\"task4\", 4, null, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.addTask(task1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.addTask(task2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.addTask(task3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.addTask(task4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertNotNull(taskList.getTaskList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String testTaskListString \u003d \"[1. task4 | Priority: 4 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"2. task3 | Priority: 3 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"3. task2 | Priority: 2 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"4. task1 | Priority: 1 | Due: -- | Credit: 100 | State: OPEN]\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(testTaskListString,taskList.getAllTaskDetails(project.getTasksAndAssignedMembers()).toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String testRemoveTaskListString \u003d \"[1. task4 | Priority: 4 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"2. task2 | Priority: 2 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"3. task1 | Priority: 1 | Due: -- | Credit: 100 | State: OPEN]\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.removeTask(2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(testRemoveTaskListString,taskList.getAllTaskDetails("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                project.getTasksAndAssignedMembers()).toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetAllSortedTaskDetails() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate1 \u003d dateTimeHelper.formatDate(\"31/10/2019\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate2 \u003d dateTimeHelper.formatDate(\"21/09/2019\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate3 \u003d dateTimeHelper.formatDate(\"21/01/2020\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate4 \u003d dateTimeHelper.formatDate(\"21/12/1920\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task1 \u003d new Task(\"taskOne\", 1, dueDate1, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task2 \u003d new Task(\"taskTwo\", 2, dueDate2, 90, TaskState.DONE, taskRequirements);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task3 \u003d new Task(\"taskEight\", 3, dueDate3, 80, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task4 \u003d new Task(\"taskSix\", 4, dueDate4, 70, TaskState.DONE, taskRequirements);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task5 \u003d new Task(\"taskFive\", 5, null, 60, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task3);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task4);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task5);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertNotNull(taskList.getTaskList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testPriorityTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"1. taskFive | Priority: 5 | Due: -- | Credit: 60 | State: OPEN, \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"2. taskSix | Priority: 4 | Due: 21 Dec 1920\" + dateTimeHelper.getDifferenceDays(dueDate4)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 70 | State: DONE, \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"3. taskEight | Priority: 3 | Due: 21 Jan 2020\" + dateTimeHelper.getDifferenceDays(dueDate3)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 80 | State: OPEN, \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"4. taskTwo | Priority: 2 | Due: 21 Sep 2019\" + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 90 | State: DONE, \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"5. taskOne | Priority: 1 | Due: 31 Oct 2019\" + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 100 | State: OPEN\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testPriorityTaskListString,taskList.getAllSortedTaskDetails("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers(),\"/PRIORITY\").toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testNameTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"1. taskEight | Priority: 3 | Due: 21 Jan 2020\" + dateTimeHelper.getDifferenceDays(dueDate3)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 80 | State: OPEN, \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. taskFive | Priority: 5 | Due: -- | Credit: 60 | State: OPEN, \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"3. taskOne | Priority: 1 | Due: 31 Oct 2019\" + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"4. taskSix | Priority: 4 | Due: 21 Dec 1920\" + dateTimeHelper.getDifferenceDays(dueDate4)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 70 | State: DONE, \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"5. taskTwo | Priority: 2 | Due: 21 Sep 2019\" + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 90 | State: DONE\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testNameTaskListString,taskList.getAllSortedTaskDetails("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers(),\"/NAME\").toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testDueDateTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \"1. taskSix | Priority: 4 | Due: 21 Dec 1920\" + dateTimeHelper.getDifferenceDays(dueDate4)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \" | Credit: 70 | State: DONE, \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \"2. taskTwo | Priority: 2 | Due: 21 Sep 2019\" + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 90 | State: DONE, \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \"3. taskOne | Priority: 1 | Due: 31 Oct 2019\" + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \" | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \"4. taskEight | Priority: 3 | Due: 21 Jan 2020\" + dateTimeHelper.getDifferenceDays(dueDate3)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \" | Credit: 80 | State: OPEN\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testDueDateTaskListString,taskList.getAllSortedTaskDetails("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers(),\"/DATE\").toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testCreditTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"1. taskOne | Priority: 1 | Due: 31 Oct 2019\" + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"2. taskTwo | Priority: 2 | Due: 21 Sep 2019\" + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 90 | State: DONE, \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"3. taskEight | Priority: 3 | Due: 21 Jan 2020\" + dateTimeHelper.getDifferenceDays(dueDate3)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 80 | State: OPEN, \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"4. taskSix | Priority: 4 | Due: 21 Dec 1920\" + dateTimeHelper.getDifferenceDays(dueDate4)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 70 | State: DONE, \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"5. taskFive | Priority: 5 | Due: -- | Credit: 60 | State: OPEN\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testCreditTaskListString,taskList.getAllSortedTaskDetails("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers(),\"/CREDIT\").toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testKanbanTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"2. taskTwo | Priority: 2 | Due: 21 Sep 2019\" + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 90 | State: DONE, \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"4. taskSix | Priority: 4 | Due: 21 Dec 1920\" + dateTimeHelper.getDifferenceDays(dueDate4)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 70 | State: DONE\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testKanbanTaskListString,taskList.getAllSortedTaskDetails("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasksAndAssignedMembers(),\"/KANBAN-DONE\").toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.addTask(new Task(\"task2\",5, null,10,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    TaskState.TODO, taskRequirements));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.addTask(new Task(\"task1\",10, null,10,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    TaskState.TODO, taskRequirements));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            project.addMember(new Member(\"Dillen\", \"9999\", \"dillen@gmail.com\",1, \"member\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            project.addMember(new Member(\"Jerry\", \"9999\", \"jerryn@gmail.com\",2, \"member\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.getTask(1).assignMember(project.getMembers().getMember(1));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.getTask(1).assignMember(project.getMembers().getMember(2));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.getTask(2).assignMember(project.getMembers().getMember(1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            AssignmentController assignmentController \u003d new AssignmentController(project);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assignmentController.assignAndUnassign(\"assign task -i 1 -to 1 2\".substring(12));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            AssignmentController assignmentController2 \u003d new AssignmentController(project);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assignmentController2.assignAndUnassign(\"assign task -i 2 -to 1\".substring(12));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testMemberTaskListString \u003d \"[1. task2 | Priority: 5 | Due: -- | Credit: 10 | State: TODO]\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testMemberTaskListString2 \u003d \"[1. task1 | Priority: 10 | Due: -- | Credit: 10 | \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"State: TODO, 2. task2 | Priority: 5 | Due: -- | Credit: 10 | State: TODO]\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testMemberTaskListString,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasks().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                            project.getTasksAndAssignedMembers(),\"/WHO-Jerry\").toString());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testMemberTaskListString2,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasks().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                            project.getTasksAndAssignedMembers(),\"/WHO-Dillen\").toString());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 123,
      "seanlimhx": 7,
      "Lucria": 13,
      "Dkenobi": 50
    }
  },
  {
    "path": "src/test/java/modeltests/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.factories.TaskFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private TaskFactory consoleInputFactory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    TaskTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.consoleInputFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetDetails() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task task1 \u003d new Task(\"task1\", 5, null,100, TaskState.OPEN,taskRequirements);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"task1 | Priority: 5 | Due: -- | Credit: 100 | State: OPEN\",task1.getDetails());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Date date \u003d dateTimeHelper.formatDate(\"20/1/2019\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task2 \u003d new Task(\"task2\", 5, date, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            assertEquals(\"task2 | Priority: 5 | Due: 20 Jan 2019\" + dateTimeHelper.getDifferenceDays(date)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 100 | State: OPEN\", task2.getDetails());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            System.out.println(\"Parsing error\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetTaskRequirements() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Date dueDate \u003d dateTimeHelper.formatDate(\"19/10/2019\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            taskRequirements.add(\"requirement1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            Task dummyTask \u003d new Task(\"task1\",1,dueDate,10, TaskState.TODO, taskRequirements);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ITask task \u003d consoleInputFactory.createTask(\"-t task1 -p 1 -d 19/10/2019 -c 10 -s todo -r requirement1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            assertEquals(dummyTask.getDetails(),task.getDetails());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            assertEquals(dummyTask.getTaskRequirements(), task.getTaskRequirements());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ArrayList\u003cString\u003e taskRequirements2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskRequirements2.add(\"requirement1\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskRequirements2.add(\"requirement2\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task dummyTask2 \u003d new Task(\"task2\",2,null,10, TaskState.OPEN, taskRequirements2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ITask task2 \u003d consoleInputFactory.createTask(\"-t task2 -p 2 -c 10 -r requirement1 -r requirement2\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(dummyTask2.getDetails(),task2.getDetails());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(dummyTask2.getTaskRequirements(), task2.getTaskRequirements());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            System.out.println(\"Parsing error\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 46,
      "seanlimhx": 5,
      "Lucria": 7,
      "Dkenobi": 9
    }
  },
  {
    "path": "src/test/java/modeltests/task/ViewAssignedTasksTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class ViewAssignedTasksTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private Project project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    ViewAssignedTasksTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testViewAssignedTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String testAssignedTasks \u003d \"1. Dillen (Phone: 9999 | Email: dillen@gmail.com | Role: member)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                + \"2. Jerry (Phone: 9999 | Email: jerryn@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String testAssignedTasks2 \u003d \"1. Dillen (Phone: 9999 | Email: dillen@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Date dueDate \u003d dateTimeHelper.formatDate(\"19/10/2019\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            taskRequirements.add(\"requirement1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.addTask(new Task(\"task2\",5, dueDate,10, TaskState.TODO, taskRequirements));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.addTask(new Task(\"task1\",10, dueDate,10, TaskState.TODO, taskRequirements));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            project.addMember(new Member(\"Dillen\", \"9999\", \"dillen@gmail.com\",1, \"member\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            project.addMember(new Member(\"Jerry\", \"9999\", \"jerryn@gmail.com\",2, \"member\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.getTask(1).assignMember(project.getMembers().getMember(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.getTask(1).assignMember(project.getMembers().getMember(2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.getTask(2).assignMember(project.getMembers().getMember(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            assertEquals(project.getTask(1).getAssignedMembers().getAllMemberDetails().get(0) + \"\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + project.getTask(1).getAssignedMembers().getAllMemberDetails().get(1),testAssignedTasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            assertEquals(project.getTask(2).getAssignedMembers().getAllMemberDetails().get(0),testAssignedTasks2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 7,
      "sinteary": 3,
      "Lucria": 12,
      "Dkenobi": 35
    }
  },
  {
    "path": "src/test/java/repositorytests/ProjectRepositoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package repositorytests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class ProjectRepositoryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String simulatedUserinput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Junit Tests for Project Repository. This is to test the creation of projects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ProjectRepositoryTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.projectRepository \u003d new ProjectRepository();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Always true test just to test if jUnit is working."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void addToRepo_correctInputs_projectReturned() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create Thor Fanclub\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectRepository.addToRepo(simulatedUserinput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project simulatedProject \u003d projectRepository.getItem(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project expectedProject \u003d new Project(\"Thor Fanclub\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getName(), simulatedProject.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getNumOfMembers(), simulatedProject.getNumOfMembers());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getNumOfTasks(), simulatedProject.getNumOfTasks());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getMembers().getAllMemberDetails(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                simulatedProject.getMembers().getAllMemberDetails());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedProject.getTasks().getAllTaskDetails(expectedProject.getTasksAndAssignedMembers()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                simulatedProject.getTasks().getAllTaskDetails(simulatedProject.getTasksAndAssignedMembers()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void addToRepo_incorrectInputs_falseReturned() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertFalse(projectRepository.addToRepo(simulatedUserinput));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertFalse(projectRepository.addToRepo(simulatedUserinput));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void getItem_projectExists_projectReturned() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create Ironman Fanclub\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectRepository.addToRepo(simulatedUserinput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project expectedProject \u003d new Project(\"Ironman Fanclub\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project simulatedProject \u003d projectRepository.getItem(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getName(), simulatedProject.getName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getNumOfMembers(), simulatedProject.getNumOfMembers());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getNumOfTasks(), simulatedProject.getNumOfTasks());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getMembers().getAllMemberDetails(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                simulatedProject.getMembers().getAllMemberDetails());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedProject.getTasks().getAllTaskDetails(expectedProject.getTasksAndAssignedMembers()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                simulatedProject.getTasks().getAllTaskDetails(simulatedProject.getTasksAndAssignedMembers()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void deleteItem_projectExists_successfulDeletion() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create Ironman Fanclub\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectRepository.addToRepo(simulatedUserinput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertTrue(projectRepository.deleteItem(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void deleteItem_projectDontExist_errorPrinted() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        boolean isProjectDeleted \u003d projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertFalse(isProjectDeleted);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 4,
      "Lucria": 93
    }
  }
]
