[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "clean {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    delete \u0027savedProjects.json\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    delete \u0027logs\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "jacoco {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    toolVersion \u003d \"0.8.4\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        xml.enabled true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        csv.enabled true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    jacocoReportPath \u0027build/reports/jacoco/test/jacocoTestReport.xml\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "version \u00270.1.3\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    mainClassName \u003d \"launcher.Duke\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    compile group: \u0027org.apache.logging.log4j\u0027, name: \u0027log4j-core\u0027, version: \u00272.12.1\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "//    compile group:\"com.fasterxml.jackson.core\", name:\"jackson-core\", version:\u00272.4.2\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "//    compile group:\"com.fasterxml.jackson.core\", name:\"jackson-databind\", version:\u00272.4.2\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "//    compile group:\"com.fasterxml.jackson.core\", name:\"jackson-annotations\", version:\u00272.4.2\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 22,
      "Lucria": 24,
      "-": 38,
      "Dkenobi": 13
    }
  },
  {
    "path": "src/main/java/controllers/AssignmentController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.data.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class AssignmentController {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cInteger\u003e validMembersToAssign;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cInteger\u003e validMembersToUnassign;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cInteger\u003e validTaskIndexes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cString\u003e errorMessages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cString\u003e successMessages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private Project project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * A Controller class which parses the input from the user to get a list of valid"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * task and member indexes, and manages the assignment to and removal of tasks from members."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param project The which the user is managing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public AssignmentController(Project project) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.validMembersToAssign \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.validMembersToUnassign \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.validTaskIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.errorMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.successMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Does the actual assignment of task by calling on the project and establishing the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * necessary links between tasks and members. Collates messages to inform user of"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * successful assignments/unassignments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input The input from the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void assignAndUnassign(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        parseAssignmentInput(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Project project \u003d this.project;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer taskIndex : validTaskIndexes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Task task \u003d project.getTask(taskIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            successMessages.add(\"For task \" + taskIndex + \" (\" + task.getTaskName() + \"):\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            //assigning tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (Integer assigneeIndex : validMembersToAssign) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                Member member \u003d project.getMembers().getMember(assigneeIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (project.containsAssignment(task, member)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    successMessages.add(\"Task has already been assigned to member \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + assigneeIndex + \" (\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + member.getName() + \").\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.createAssignment(task, member);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    successMessages.add(\"Assigned to member \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + assigneeIndex + \" (\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + member.getName() + \").\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            //unassigning tasks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (Integer unassigneeIndex : validMembersToUnassign) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                Member member \u003d project.getMembers().getMember(unassigneeIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (!project.containsAssignment(task, member)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    successMessages.add(\"Task cannot be unassigned from member \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + unassigneeIndex + \" (\" + member.getName() + \") as it was \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + \"not assigned in the first place!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.removeAssignment(member, task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    successMessages.add(\"Unassigned task from member \" + unassigneeIndex"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        + \" (\" + member.getName() + \").\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            successMessages.add(\"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Makes sense of user input for task assignment. Parses input String to get valid task and member index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * numbers, as well as error messages for invalid index numbers."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input The input from the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void parseAssignmentInput(String input) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e allIndexesToAssign \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e allIndexesToUnassign \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e allTasksIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String [] inputParts \u003d input.split(\"-\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String s : inputParts) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            String [] part \u003d s.split(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            switch (part[0]) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            case \"i\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                allTasksIndexes \u003d new ArrayList\u003c\u003e(Arrays.asList(part));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                allTasksIndexes.remove(\"i\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            case \"to\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                allIndexesToAssign \u003d new ArrayList\u003c\u003e(Arrays.asList(part));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                allIndexesToAssign.remove(\"to\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            case \"rm\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                allIndexesToUnassign \u003d new ArrayList\u003c\u003e(Arrays.asList(s.split(\" \")));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                allIndexesToUnassign.remove(\"rm\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        validateTaskIndexes(allTasksIndexes); //shortlists all valid task numbers"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (!allIndexesToAssign.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            validateAssignees(allIndexesToAssign);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (!allIndexesToUnassign.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            validateUnassignees(allIndexesToUnassign);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        //check if any assignees and unassignees are the same, remove if necessary"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        checkForSameMemberIndexes();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Checks if the user keyed in the same index number for assigning and removing tasks."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Removes index number and informs user if so."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private void checkForSameMemberIndexes() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e repeated \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer index: validMembersToAssign) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (validMembersToUnassign.contains(index)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                repeated.add(index);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                errorMessages.add(\"Cannot assign and unassign task to member \" + index + \" (\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + project.getMembers().getMember(index).getName() + \") at the same time\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer index: repeated) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            validMembersToAssign.remove(validMembersToAssign.indexOf(index));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            validMembersToUnassign.remove(validMembersToUnassign.indexOf(index));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Checks if task number is valid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param taskNumber the index number of task as indicated by user."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return true if the task exists in the project."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean isValidTaskIndex(int taskNumber) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return (taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d project.getNumOfTasks());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Stores only valid task index numbers in validTaskIndexes, which is"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * used later to do task assignment."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param allTaskIndexes all index numbers as indicated by user."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void validateTaskIndexes(ArrayList\u003cString\u003e allTaskIndexes) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String taskIndex : allTaskIndexes) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                Integer taskNumber \u003d Integer.parseInt(taskIndex);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (isValidTaskIndex(taskNumber)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    validTaskIndexes.add(taskNumber);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    errorMessages.add(\"The task \" + taskNumber + \" does not exist.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                errorMessages.add(\"Could not find task: \" + taskIndex);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                errorMessages.add(\"Please ensure that task numbers are integers\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Retrieves valid/existing index numbers of members to be assigned/unassigned tasks."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param allMemberIndexes the member index numbers indicated by the user."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param validIndexes the ArrayList of either assignees or unassignees, to store valid index numbers."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private void getValidMemberIndexes(ArrayList\u003cString\u003e allMemberIndexes, ArrayList\u003cInteger\u003e validIndexes) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String memberIndex : allMemberIndexes) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                Integer indexNumber \u003d Integer.parseInt(memberIndex);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (isValidMemberIndex(indexNumber)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    validIndexes.add(indexNumber);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    errorMessages.add(\"The member with index \" + memberIndex + \" does not exist.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                errorMessages.add(\"Could not find member: \" + memberIndex);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                errorMessages.add(\"Please ensure that member index numbers are integers\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Checks if an index number is a valid member index number."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param indexNumber an index number given by the user."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return true if a member with the given index number exists."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private boolean isValidMemberIndex(Integer indexNumber) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return indexNumber \u003e 0 \u0026\u0026 indexNumber \u003c\u003d project.getNumOfMembers();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private void validateAssignees(ArrayList\u003cString\u003e allIndexesToAssign) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        getValidMemberIndexes(allIndexesToAssign, this.validMembersToAssign);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private void validateUnassignees(ArrayList\u003cString\u003e allIndexesToUnassign) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        getValidMemberIndexes(allIndexesToUnassign, this.validMembersToUnassign);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns messages about invalid inputs to be shown to the user."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return an ArrayList of error messages that arise from invalid inputs."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getErrorMessages() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return errorMessages;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns messages about successful assignments for valid tasks."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return an ArrayList of success messages."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getSuccessMessages() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return successMessages;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cInteger\u003e getValidMembersToAssign() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.validMembersToAssign;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cInteger\u003e getValidTaskIndexes() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return validTaskIndexes;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cInteger\u003e getValidMembersToUnassign() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return validMembersToUnassign;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 234
    }
  },
  {
    "path": "src/main/java/controllers/ConsoleInputController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.data.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.DukeLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import views.CLIView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ConsoleInputController implements IController {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private CLIView consoleView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ProjectInputController projectInputController;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String filePath \u003d System.getProperty(\"user.dir\") + \"/savedProjects.json\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param view : takes in a View model, in this case a command line view."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ConsoleInputController(CLIView view) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.consoleView \u003d view;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        loadProjectsData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.projectInputController \u003d new ProjectInputController(this.consoleView, this.projectRepository);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method that is called upon receiving commands from CLI."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input : Input typed by user into CLI"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void onCommandReceived(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logInfo(ConsoleInputController.class, \"input:\u0027\" + input + \"\u0027\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Scanner inputReader \u003d new Scanner(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String command \u003d inputReader.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleView.end();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ArrayList\u003cProject\u003e allProjects \u003d projectRepository.getAll();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            consoleView.viewAllProjects(allProjects);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        case \"create\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            // Creation of a new project with a given name and a number of numbers"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            boolean isProjectCreated \u003d projectRepository.addToRepo(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            if (!isProjectCreated) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                consoleView.consolePrint(\"Creation of Project failed. Please check parameters given!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                consoleView.consolePrint(\"Project created!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                saveProjectsData();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        case \"manage\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            if (inputReader.hasNext()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                this.projectInputController.onCommandReceived(inputReader.next());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                consoleView.consolePrint(\"Please enter a project number!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            // TODO help page displaying all commands available"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            // Not implemented"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            consoleView.consolePrint(\"Not implemented\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            consoleView.consolePrint(\"Invalid inputs. Please refer to User Guide or type help!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private void saveProjectsData() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                .setPrettyPrinting()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            DukeLogger.logDebug(ConsoleInputController.class, \"Saving to file.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            gson.toJson(this.projectRepository, fileWriter);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fileWriter.flush();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            DukeLogger.logDebug(ConsoleInputController.class, \"File saved.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            DukeLogger.logError(ConsoleInputController.class, \"savedProjects file is not found.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            consoleView.consolePrint(\"savedProjects file does not exist or is not created!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private void loadProjectsData() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try (FileReader fileReader \u003d new FileReader(filePath)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            DukeLogger.logDebug(ConsoleInputController.class, \"Loading saved file.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            this.projectRepository \u003d gson.fromJson(fileReader, ProjectRepository.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            if (this.projectRepository \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                this.projectRepository \u003d new ProjectRepository();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            DukeLogger.logDebug(ConsoleInputController.class, \"Saved file loaded.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            DukeLogger.logError(ConsoleInputController.class, \"Saved file not loaded\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            this.projectRepository \u003d new ProjectRepository();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 39,
      "-": 38,
      "Dkenobi": 34
    }
  },
  {
    "path": "src/main/java/controllers/IController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface IController {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void onCommandReceived(String input);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 5
    }
  },
  {
    "path": "src/main/java/controllers/ProjectInputController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.data.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.MemberFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.TaskFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.DukeLogger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import views.CLIView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ProjectInputController implements IController {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private Scanner manageProjectInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private CLIView consoleView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private MemberFactory memberFactory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Constructor for ProjectInputController takes in a View model and a ProjectRepository."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * ProjectInputController is responsible for handling user input when user chooses to manage a project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param consoleView The main UI of ArchDuke."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param projectRepository The object holding all projects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ProjectInputController(CLIView consoleView, ProjectRepository projectRepository) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.manageProjectInput \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.projectRepository \u003d projectRepository;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.consoleView \u003d consoleView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.memberFactory \u003d new MemberFactory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Allows the user to manage the project by branching into the project of their choice."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input User input containing project index number (to add to project class)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void onCommandReceived(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logInfo(ProjectInputController.class, \"Managing project: \" + input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        int projectNumber \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project projectToManage \u003d projectRepository.getItem(projectNumber);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.consoleView.consolePrint(\"Now managing: \" + projectToManage.getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        boolean isManagingAProject \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        while (isManagingAProject) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (manageProjectInput.hasNextLine()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                String projectCommand \u003d manageProjectInput.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                DukeLogger.logInfo(ProjectInputController.class, \"Managing:\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        + projectToManage.getDescription() + \",input:\u0027\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (projectCommand.length() \u003d\u003d 4 \u0026\u0026 (\"exit\").equals(projectCommand.substring(0, 4))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    isManagingAProject \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    consoleView.exitProject(projectToManage.getDescription());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                } else if (projectCommand.length() \u003e\u003d 11 \u0026\u0026 (\"add member \").equals(projectCommand.substring(0, 11))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    String memberDetails \u003d projectCommand.substring(11);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    int numberOfCurrentMembers \u003d projectToManage.getNumOfMembers();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    memberDetails \u003d memberDetails + \" x/\" + numberOfCurrentMembers;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    IMember newMember \u003d memberFactory.create(memberDetails);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    if (newMember.getName() !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                        projectToManage.addMember((Member) newMember);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                        consoleView.addMember(projectToManage, newMember.getDetails());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                        consoleView.consolePrint(\"Failed to add member. Please ensure you have entered \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                                + \"at least the name of the new member.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                } else if (projectCommand.length() \u003e\u003d 12 \u0026\u0026 (\"edit member \").equals(projectCommand.substring(0, 12))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    int memberIndexNumber \u003d Integer.parseInt(projectCommand.substring(12).split(\" \")[0]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    if (projectToManage.getNumOfMembers() \u003e\u003d memberIndexNumber) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        String updatedMemberDetails \u003d projectCommand.substring(projectCommand.indexOf(\"n/\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        consoleView.editMember(projectToManage, memberIndexNumber, updatedMemberDetails);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        consoleView.consolePrint(\"The member index entered is invalid.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                } else if (projectCommand.length() \u003e\u003d 14 \u0026\u0026 (\"delete member \").equals(projectCommand.substring(0,14))) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    int memberIndexNumber \u003d Integer.parseInt(projectCommand.substring(14).split(\" \")[0]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    if (projectToManage.getNumOfMembers() \u003e\u003d memberIndexNumber) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                        Member memberToRemove \u003d projectToManage.getMembers().getMember(memberIndexNumber);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                        projectToManage.removeMember(memberToRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                        consoleView.consolePrint(\"Removed member with the index number \" + memberIndexNumber);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        consoleView.consolePrint(\"The member index entered is invalid.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                } else if (projectCommand.length() \u003d\u003d 12 \u0026\u0026 (\"view members\").equals(projectCommand)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    consoleView.viewAllMembers(projectToManage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                } else if (projectCommand.length() \u003d\u003d 12 \u0026\u0026 (\"view credits\").equals(projectCommand)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    // TODO view all credits."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    consoleView.consolePrint(\"Not implemented yet\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                } else if (projectCommand.length() \u003e\u003d 9 \u0026\u0026 (\"add task \").equals(projectCommand.substring(0, 9))) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        TaskFactory taskFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                        ITask newTask \u003d taskFactory.createTask(projectCommand.substring(9));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                        if (newTask.getDetails() !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                            consoleView.addTask(projectToManage, (Task) newTask);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                            consoleView.consolePrint(\"Failed to create new task. Please ensure all\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"necessary parameters are given\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    } catch (NumberFormatException | ParseException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        consoleView.consolePrint(\"Please enter your task format correctly\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                } else if (projectCommand.length() \u003e\u003d 10 \u0026\u0026 (\"view tasks\").equals(projectCommand.substring(0,10))) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    if ((\"view tasks\").equals(projectCommand)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        consoleView.viewAllTasks(projectToManage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    } else if (projectCommand.length() \u003e\u003d 11) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        String sortCriteria \u003d projectCommand.substring(11);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        consoleView.viewSortedTasks(projectToManage, sortCriteria);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                } else if (projectCommand.length() \u003d\u003d 19 \u0026\u0026 (\"view assigned tasks\").equals(projectCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    consoleView.consolePrint(projectToManage.getAssignedTaskList().toArray(new String[0]));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                } else if (projectCommand.length() \u003e 25"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        \u0026\u0026 (\"view task requirements i/\").equals(projectCommand.substring(0, 25))) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    int taskIndex \u003d Integer.parseInt(projectCommand.substring(25));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    if (projectToManage.getNumOfTasks() \u003e\u003d taskIndex \u0026\u0026 taskIndex \u003e 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        if (projectToManage.getTask(taskIndex).getNumOfTaskRequirements() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                            consoleView.consolePrint(\"This task has no specific requirements.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                            consoleView.viewTaskRequirements(projectToManage, taskIndex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        consoleView.consolePrint(\"The task index entered is invalid.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                } else if (projectCommand.length() \u003e 23"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        \u0026\u0026 (\"edit task requirements \").equals(projectCommand.substring(0, 23))) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    String[] updatedTaskRequirements \u003d projectCommand.split(\" [ir]m?/\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    int taskIndexNumber \u003d Integer.parseInt(updatedTaskRequirements[1]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    boolean haveRemove \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    if (projectCommand.contains(\" rm/\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        haveRemove \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    if (projectToManage.getNumOfTasks() \u003e\u003d taskIndexNumber \u0026\u0026 taskIndexNumber \u003e 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        consoleView.editTaskRequirements(projectToManage, taskIndexNumber, updatedTaskRequirements,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                                haveRemove);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        consoleView.consolePrint(\"The task index entered is invalid.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                } else if (projectCommand.length() \u003e 10 \u0026\u0026 (\"edit task \").equals(projectCommand.substring(0, 10))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    String [] updatedTaskDetails \u003d projectCommand.split(\" [itpdcs]\\\\/\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    int taskIndexNumber \u003d Integer.parseInt(updatedTaskDetails[1]);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    if (projectToManage.getNumOfTasks() \u003e\u003d taskIndexNumber \u0026\u0026 taskIndexNumber \u003e 0) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        consoleView.editTask(projectToManage, projectCommand, taskIndexNumber);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        consoleView.consolePrint(\"The task index entered is invalid.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                } else if (projectCommand.length() \u003e\u003d 12 \u0026\u0026 (\"delete task \").equals(projectCommand.substring(0,12))) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    int taskIndexNumber \u003d Integer.parseInt(projectCommand.substring(12).split(\" \")[0]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    if (projectToManage.getNumOfTasks() \u003e\u003d taskIndexNumber) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        consoleView.removeTask(projectToManage, taskIndexNumber);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        consoleView.consolePrint(\"The task index entered is invalid.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else if (projectCommand.length() \u003e\u003d 12 \u0026\u0026 (\"assign task \").equals(projectCommand.substring(0,12))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    AssignmentController assignmentController \u003d new AssignmentController(projectToManage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    assignmentController.assignAndUnassign(projectCommand.substring(12));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    consoleView.consolePrint(assignmentController.getErrorMessages().toArray(new String[0]));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    consoleView.consolePrint(assignmentController.getSuccessMessages().toArray(new String[0]));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                } else if (\"bye\".equals(projectCommand)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    consoleView.end();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    consoleView.consolePrint(\"Invalid command. Try again!\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                consoleView.consolePrint(\"Please enter a command.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 46,
      "iamabhishek98": 32,
      "seanlimhx": 36,
      "Lucria": 38,
      "Dkenobi": 15
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidInputException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public InvalidInputException(String error) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        super(\"Sorry! I don\u0027t understand what you mean by: \" + error);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 8
    }
  },
  {
    "path": "src/main/java/launcher/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package launcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import views.CLIView;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args Refers to CLI arguments"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        CLIView cliView \u003d new CLIView();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        cliView.start();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/launcher/UILauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package launcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import views.ui.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class UILauncher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 2,
      "Dkenobi": 11
    }
  },
  {
    "path": "src/main/java/models/data/IProject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.MemberList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface IProject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    // TODO Add attributes such as Members, Tasks, Name"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String getDescription();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    MemberList getMembers();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    TaskList getTasks();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getNumOfMembers();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    int getNumOfTasks();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void addMember(Member newMember);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void editMember(int memberIndexNumber, String updatedMemberDetails);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void removeMember(Member toBeRemoved);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void addTask(Task newTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void removeTask(int taskIndexNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    boolean memberIndexExists(int indexNumber);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    Task getTask(int taskIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void editTask(String updatedTaskDetails);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void editTaskRequirements(int taskIndexNumber, String[] updatedTaskRequirements, boolean haveRemove);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    ArrayList\u003cString\u003e getAssignedTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void createAssignment(Task task, Member member);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 10,
      "iamabhishek98": 5,
      "seanlimhx": 4,
      "Lucria": 10,
      "Dkenobi": 15
    }
  },
  {
    "path": "src/main/java/models/data/NullProject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.MemberList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class NullProject implements IProject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public MemberList getMembers() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getNumOfMembers() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int getNumOfTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void addMember(Member newMember) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void editMember(int memberIndexNumber, String updatedMemberDetails) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeMember(Member toBeRemoved) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void removeTask(int taskIndexNumber) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean memberIndexExists(int indexNumber) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void editTask(String updatedTaskDetails) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void editTaskRequirements(int taskIndexNumber, String[] updatedTaskRequirements, boolean haveRemove) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ArrayList\u003cString\u003e getAssignedTaskList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void createAssignment(Task task, Member member) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 25,
      "iamabhishek98": 20,
      "seanlimhx": 14,
      "Lucria": 18,
      "Dkenobi": 30
    }
  },
  {
    "path": "src/main/java/models/data/Project.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.MemberList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class Project implements IProject {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private MemberList memberList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e taskAndListOfMembersAssigned; //task_membersAssigned"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private HashMap\u003cMember, ArrayList\u003cTask\u003e\u003e memberAndIndividualListOfTasks; //member_individualTaskList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Class representing a task in a project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param description The description of the project."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public Project(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.memberList \u003d new MemberList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.taskAndListOfMembersAssigned \u003d new HashMap\u003cTask, ArrayList\u003cMember\u003e\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberAndIndividualListOfTasks \u003d new HashMap\u003cMember, ArrayList\u003cTask\u003e\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public MemberList getMembers() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return this.memberList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getNumOfMembers() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return this.memberList.getNumOfMembers();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int getNumOfTasks() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskList.getTaskList().size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void addMember(Member newMember) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.memberList.addMember(newMember);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberAndIndividualListOfTasks.put(newMember, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void editMember(int memberIndexNumber, String updatedMemberDetails) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.memberList.editMember(memberIndexNumber, updatedMemberDetails);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeMember(Member memberToBeRemoved) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.memberList.removeMember(memberToBeRemoved);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskList.addTask(newTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.taskAndListOfMembersAssigned.put(newTask, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void removeTask(int taskIndexNumber) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.taskList.removeTask(taskIndexNumber);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean memberIndexExists(int indexNumber) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return (indexNumber \u003e 0 \u0026\u0026 indexNumber \u003c\u003d this.getNumOfMembers());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskList.getTask(taskIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void editTask(String updatedTaskDetails) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskList.editTask(updatedTaskDetails);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void editTaskRequirements(int taskIndexNumber, String[] updatedTaskRequirements, boolean haveRemove) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskList.editTaskRequirements(taskIndexNumber, updatedTaskRequirements, haveRemove);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ArrayList\u003cString\u003e getAssignedTaskList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e assignedTaskListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (HashMap.Entry\u003cTask, ArrayList\u003cMember\u003e\u003e task: taskAndListOfMembersAssigned.entrySet()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            assignedTaskListString.add(task.getKey().getTaskName() + \" is assigned to: \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            for (Member member: task.getValue()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                assignedTaskListString.add(member.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return assignedTaskListString;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * This method assigns a task to a member by adding the task to a member\u0027s individual"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * task list - tasksAssignedToMembers."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param task the task which you wish to assign to the member."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param member the member you wish to assign the task to."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void createAssignment(Task task, Member member) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        taskAndListOfMembersAssigned.get(task).add(member);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        memberAndIndividualListOfTasks.get(member).add(task);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Removes the assignment between member and task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param member the member to unassign the task from."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param task the task to be unassigned."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void removeAssignment(Member member, Task task) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        taskAndListOfMembersAssigned.get(task).remove(member);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        memberAndIndividualListOfTasks.get(member).remove(task);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Checks if assignment exists between a member and task."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param task The task in question."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param member The member in question."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return true task has already been assigned to a member."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean containsAssignment(Task task, Member member) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberAndIndividualListOfTasks.get(member).contains(task);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 53,
      "iamabhishek98": 12,
      "seanlimhx": 10,
      "Lucria": 22,
      "Dkenobi": 49
    }
  },
  {
    "path": "src/main/java/models/member/IMember.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public interface IMember {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String getDetails();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void updateDetails(String name, String phone, String email);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void setIndexNumber(int indexNumber);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    int getIndexNumber();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    String getPhone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    String getEmail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 8,
      "iamabhishek98": 9
    }
  },
  {
    "path": "src/main/java/models/member/IMemberList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public interface IMemberList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void addMember(Member newMember);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void removeMember(Member memberToRemove);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ArrayList\u003cString\u003e getAllMemberDetails();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    Member getMember(int i);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 9,
      "Lucria": 4
    }
  },
  {
    "path": "src/main/java/models/member/ListOfMembersAssignedToTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class ListOfMembersAssignedToTask implements IMemberList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cMember\u003e memberList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ListOfMembersAssignedToTask() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void addMember(Member newMember) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberList.add(newMember);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //I rewrote this method because there was a bug in this particular case."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //Imagine I assigned task to members 1 and 3, and then I want to unassign 3."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //Using the index number 3 to unassign will result in IndexOutOfBounds."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //So we have to remove by index of the object itself instead."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void removeMember(Member memberToRemove) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.memberList.remove(memberToRemove);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getAllMemberDetails() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e memberDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Member member : this.memberList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberDetails.add(member.getDetails());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberDetails;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Member getMember(int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.memberList.get(index - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a set of integers representing the index numbers of members who were assigned"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return a set of index numbers of members who were assigned the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public HashSet\u003cInteger\u003e getAssignedMembersIndexNumbers() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        HashSet\u003cInteger\u003e assignedMemberIndexes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Member member : this.memberList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            assignedMemberIndexes.add(member.getIndexNumber());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return assignedMemberIndexes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int getNumberOfAssignees() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberList.size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean contains(Member member) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberList.contains(member);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 59,
      "Lucria": 1
    }
  },
  {
    "path": "src/main/java/models/member/ListOfTasksAssignedToMember.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ListOfTasksAssignedToMember {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Represents a list of tasks which are assigned to a member in a team."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private TaskList memberTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void addAssignedTask(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberTaskList.addTask(task);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean contains(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberTaskList.contains(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 18,
      "Lucria": 1
    }
  },
  {
    "path": "src/main/java/models/member/Member.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class Member implements IMember {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private int indexNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Class representing a member in a project team."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param name The name of the member."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param phone The phone number of the member."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param email The email address of the member."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param indexNumber The index number assigned to the member, unique to the project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Member(String name, String phone, String email, int indexNumber) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.indexNumber \u003d indexNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else if (!(obj instanceof Member)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Member other \u003d (Member) obj;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return this.name.equals(other.name)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \u0026\u0026 this.phone.equals(other.phone)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \u0026\u0026 this.email.equals(other.email);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return Objects.hash(this.name, this.phone, this.email);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.indexNumber + \". \" + this.name + \" (Phone: \" + this.phone + \" | Email: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            + this.email + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void setIndexNumber(int indexNumber) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.indexNumber \u003d indexNumber;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public int getIndexNumber() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.indexNumber;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.phone;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.email;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void updateDetails(String name, String phone, String email) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 61,
      "iamabhishek98": 21
    }
  },
  {
    "path": "src/main/java/models/member/MemberList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class MemberList implements IMemberList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cMember\u003e memberList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Class representing a list with all members and their details."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public MemberList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Adds a new member to the member list of this project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param newMember A new member to be added to the project."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void addMember(Member newMember) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        newMember.setIndexNumber(this.memberList.size() + 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberList.add(newMember);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Updates the member details of an existing member using the index number of the member."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param memberIndexNumber The index number of the member whose details are to be updated."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param updatedMemberDetails The updated member details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void editMember(int memberIndexNumber, String updatedMemberDetails) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String [] memberDetails \u003d parserHelper.parseMemberDetails(updatedMemberDetails);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String name \u003d memberDetails[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String phone \u003d memberDetails[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String email \u003d memberDetails[2];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        for (Member currentMember : memberList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (currentMember.getIndexNumber() \u003d\u003d memberIndexNumber) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String updatedName \u003d (\"No name\".equals(name)) ? currentMember.getName() : name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String updatedPhone \u003d (\"No phone number\".equals(phone)) ? currentMember.getPhone() : phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String updatedEmail \u003d (\"No email address\".equals(email)) ? currentMember.getEmail() : email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                currentMember.updateDetails(updatedName, updatedPhone, updatedEmail);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Removes a member from the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Shifts the index numbers of all members up if required."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param toBeRemoved The Member that needs to be removed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeMember(Member toBeRemoved) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Implement methods to ensure that task assignments are updated,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            credits are redistributed, etc."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            1) Scroll through all tasks of this member. Remove them from the ListOfMemebersAssignedToTask."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            2) Recalculate the credits for other members in the task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            3) Change task state if necessary (if only 1 member was DOING, now it is OPEN)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            4) Update index number of other members if necessary."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (toBeRemoved.getIndexNumber() \u003c memberList.size()) { //if need to reassign index numbers after removal"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            this.memberList.remove(toBeRemoved);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d memberList.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                memberList.get(i - 1).setIndexNumber(i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            this.memberList.remove(toBeRemoved);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns an ArrayList with String descriptions of members details."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An ArrayList with String descriptions of members details."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getAllMemberDetails() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e memberDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Member member : this.memberList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberDetails.add(member.getDetails());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberDetails;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Member getMember(int i) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.memberList.get(i - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns the size of the current member list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The size of the current member list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public int getNumOfMembers() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return memberList.size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 59,
      "iamabhishek98": 31,
      "Lucria": 9,
      "Dkenobi": 2
    }
  },
  {
    "path": "src/main/java/models/member/NullMember.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class NullMember implements IMember {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void updateDetails(String name, String phone, String email) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setIndexNumber(int indexNumber) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getIndexNumber() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 10,
      "Lucria": 33
    }
  },
  {
    "path": "src/main/java/models/task/ITask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.ListOfMembersAssignedToTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface ITask {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String getTaskName();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getTaskPriority();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String getDetails();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    Date getDueDate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    TaskState getTaskState();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getTaskCredit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ListOfMembersAssignedToTask getAssignedMembers();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    HashSet\u003cInteger\u003e getAssignedIndexes();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void assignMember(Member member);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void removeMember(Member memberToRemove);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ArrayList\u003cString\u003e getTaskRequirements();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getNumOfTaskRequirements();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setTaskName(String newTaskName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setTaskPriority(int newTaskPriority);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setDueDate(String newDueDateString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setTaskCredit(int newTaskCredit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setTaskState(String newTaskStateString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void removeTaskRequirement(int indexOfTaskRequirement);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void addTaskRequirement(String newTaskRequirement);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 48
    }
  },
  {
    "path": "src/main/java/models/task/NullTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.ListOfMembersAssignedToTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class NullTask implements ITask {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getTaskPriority() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public Date getDueDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public TaskState getTaskState() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getTaskCredit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ListOfMembersAssignedToTask getAssignedMembers() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public HashSet\u003cInteger\u003e getAssignedIndexes() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void assignMember(Member member) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeMember(Member memberToRemove) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ArrayList\u003cString\u003e getTaskRequirements() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getNumOfTaskRequirements() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setTaskName(String newTaskName) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setTaskPriority(int newTaskPriority) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setDueDate(String newDueDateString) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setTaskCredit(int newTaskCredit) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setTaskState(String newTaskStateString) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeTaskRequirement(int indexOfTaskRequirement) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void addTaskRequirement(String newTaskRequirement) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 123
    }
  },
  {
    "path": "src/main/java/models/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.ListOfMembersAssignedToTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class Task implements ITask {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private int taskPriority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private Date dueDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private int taskCredit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private TaskState taskState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ListOfMembersAssignedToTask listOfMembersAssignedToTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private ArrayList\u003cString\u003e taskRequirements;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else if (!(obj instanceof Task)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Task other \u003d (Task) obj;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return this.taskName.equals(other.taskName)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \u0026\u0026 this.taskPriority \u003d\u003d other.taskPriority"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \u0026\u0026 this.taskCredit \u003d\u003d other.taskCredit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return Objects.hash(this.taskName, this.taskPriority, this.taskCredit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Class representing a task in a project."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param taskPriority The priority value of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param dueDate The date that the task is due. [Optional]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskCredit The amount of credit a person would receive for completing the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                   A more difficult task would receive more credit."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskState taskState refers to whether the task is in OPEN, TO-DO, DOING, DONE."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param taskRequirements ArrayList of Strings containing specific requirements of a task. [Optional]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public Task(String taskName, int taskPriority, Date dueDate, int taskCredit, TaskState taskState,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                ArrayList\u003cString\u003e taskRequirements) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskPriority \u003d taskPriority;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskCredit \u003d taskCredit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskState \u003d taskState;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.listOfMembersAssignedToTask \u003d new ListOfMembersAssignedToTask();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskRequirements \u003d taskRequirements;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public int getTaskPriority() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return taskPriority;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Gets the details of the task in a String format in the correct layout."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String containing all the details of the task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (this.dueDate !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return this.taskName + \" | Priority: \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + this.taskPriority + \" | Due: \" + dateTimeHelper.formatDateForDisplay(this.dueDate) + \" | Credit: \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + this.taskCredit + \" | State: \" + this.taskState;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return this.taskName + \" | Priority: \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + this.taskPriority + \" | Due: -- | Credit: \" + this.taskCredit + \" | State: \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + this.taskState;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Date getDueDate() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.dueDate;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public TaskState getTaskState() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskState;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int getTaskCredit() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskCredit;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ListOfMembersAssignedToTask getAssignedMembers() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return listOfMembersAssignedToTask;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public HashSet\u003cInteger\u003e getAssignedIndexes() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.listOfMembersAssignedToTask.getAssignedMembersIndexNumbers();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void assignMember(Member member) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.listOfMembersAssignedToTask.addMember(member);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void removeMember(Member memberToRemove) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.listOfMembersAssignedToTask.removeMember(memberToRemove);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Adds index labels to task requirements for clearer viewing."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return ArrayList of String of task requirements with labelled indexes."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ArrayList\u003cString\u003e getTaskRequirements() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        taskRequirements.add(getDetails());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (String s : this.taskRequirements) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            taskRequirements.add(index + \". \" + s);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return taskRequirements;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public int getNumOfTaskRequirements() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return this.taskRequirements.size();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setTaskName(String newTaskName) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskName \u003d newTaskName;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setTaskPriority(int newTaskPriority) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskPriority \u003d newTaskPriority;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Converts String input into Date object to be set as the new dueDate."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param newDueDateString String form of the new dueDate to be set."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setDueDate(String newDueDateString) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            this.dueDate \u003d dateTimeHelper.formatDate(newDueDateString);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Edits current task credit to new input task credit."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param newTaskCredit new task credit to be set."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setTaskCredit(int newTaskCredit) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskCredit \u003d newTaskCredit;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Converts input String into TaskState and edits current task state to new task state."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param newTaskStateString String form of new task state."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setTaskState(String newTaskStateString) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String newTaskStateLowerCase \u003d newTaskStateString.toLowerCase();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        switch (newTaskStateLowerCase) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskState \u003d TaskState.DONE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskState \u003d TaskState.TODO;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        case \"doing\":"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskState \u003d TaskState.DOING;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskState \u003d TaskState.OPEN;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void removeTaskRequirement(int indexOfTaskRequirement) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskRequirements.remove(indexOfTaskRequirement - 1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void addTaskRequirement(String newTaskRequirement) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskRequirements.add(newTaskRequirement);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 44,
      "iamabhishek98": 4,
      "seanlimhx": 106,
      "Lucria": 8,
      "Dkenobi": 32
    }
  },
  {
    "path": "src/main/java/models/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Class representing a list with all task sort in the project."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Adds a new task to the list of this project."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param task A new task to be added to the project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Deletes the task from the list using the index number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskIndexNumber The index number of the task to be deleted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void removeTask(int taskIndexNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.taskList.remove(taskIndexNumber - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Returns an ArrayList with String descriptions of task details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList with String descriptions of task details sorted by name by default."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ArrayList\u003cString\u003e getAllTaskDetails() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        // after implementing task index, change \"/PRIORITY\" to \"/INDEX\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.parserHelper.parseSortTaskDetails(taskList,\"/PRIORITY\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns an ArrayList with String descriptions of task details sorted by the criteria specified by the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param sortCriteria Criteria to sort chosen by user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList with String descriptions of task details sorted by the criteria specified by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e getAllSortedTaskDetails(String sortCriteria) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.parserHelper.parseSortTaskDetails(taskList,sortCriteria);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns the list of all tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An ArrayList with all tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskList.get(taskIndex - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Edits details of a task excluding task requirements."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param updatedTaskDetails input command String in the form of (tasks to be edited can be in any order)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                           edit task i/TASK_INDEX [n/TASK_NAME] [p/TASK_PRIORITY]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                           [d/TASK_DUEDATE] [c/TASK_CREDIT] [s/STATE]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void editTask(String updatedTaskDetails) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] updatedTaskDetailsArray \u003d updatedTaskDetails.split(\" [itpdcs]\\\\/\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(updatedTaskDetailsArray[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        TreeMap\u003cInteger, String\u003e orderOfInputs \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int indexOfTaskNameFlag \u003d updatedTaskDetails.indexOf(\" t/\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        orderOfInputs.put(indexOfTaskNameFlag, \"t\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int indexOfTaskPriorityFlag \u003d updatedTaskDetails.indexOf(\" p/\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        orderOfInputs.put(indexOfTaskPriorityFlag, \"p\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int indexOfTaskDueDateFlag \u003d updatedTaskDetails.indexOf(\" d/\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        orderOfInputs.put(indexOfTaskDueDateFlag, \"d\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int indexOfTaskCreditFlag \u003d updatedTaskDetails.indexOf(\" c/\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        orderOfInputs.put(indexOfTaskCreditFlag, \"c\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int indexOfTaskStateFlag \u003d updatedTaskDetails.indexOf(\" s/\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        orderOfInputs.put(indexOfTaskStateFlag, \"s\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int currentIndex \u003d 2;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (Map.Entry\u003cInteger, String\u003e entry : orderOfInputs.entrySet()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (entry.getKey() !\u003d -1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                switch (entry.getValue()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                case \"t\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    this.taskList.get(taskIndex - 1).setTaskName(updatedTaskDetailsArray[currentIndex]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                case \"p\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    int newTaskPriority \u003d Integer.parseInt(updatedTaskDetailsArray[currentIndex]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    this.taskList.get(taskIndex - 1).setTaskPriority(newTaskPriority);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                case \"d\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    this.taskList.get(taskIndex - 1).setDueDate(updatedTaskDetailsArray[currentIndex]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                case \"c\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    int newTaskCredit \u003d Integer.parseInt(updatedTaskDetailsArray[currentIndex]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    this.taskList.get(taskIndex - 1).setTaskCredit(newTaskCredit);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                case \"s\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    this.taskList.get(taskIndex - 1).setTaskState(updatedTaskDetailsArray[currentIndex]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                currentIndex++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Edits the task requirements of a specific task by adding or removing them."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskIndexNumber Index of task to be edited."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param updatedTaskRequirements Array containing indexes of task requirements to be removed and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                                task requirements to be added."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param haveRemove boolean value to indicate if command wants to remove task requirements."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void editTaskRequirements(int taskIndexNumber, String[] updatedTaskRequirements, boolean haveRemove) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (haveRemove) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            String[] indexesToBeRemoved \u003d updatedTaskRequirements[2].split(\" \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            Arrays.sort(indexesToBeRemoved);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            for (int i \u003d indexesToBeRemoved.length - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                int indexToBeRemoved \u003d Integer.parseInt(indexesToBeRemoved[i]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                this.taskList.get(taskIndexNumber - 1).removeTaskRequirement(indexToBeRemoved);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (updatedTaskRequirements.length \u003e 3) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                addTaskRequirements(taskIndexNumber, updatedTaskRequirements, 3);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (updatedTaskRequirements.length \u003e 2) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                addTaskRequirements(taskIndexNumber, updatedTaskRequirements, 2);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Adds new task requirements to a specific task."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskIndexNumber Index of task to be edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param updatedTaskRequirements Array containing indexes of task requirements to be removed and"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                                task requirements to be added."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param indexOfFirstTaskReq Index in updatedTaskRequirements from which the contents are new task requirements"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                            to be added."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private void addTaskRequirements(int taskIndexNumber, String[] updatedTaskRequirements, int indexOfFirstTaskReq) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int i \u003d indexOfFirstTaskReq; i \u003c updatedTaskRequirements.length; i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskList.get(taskIndexNumber - 1).addTaskRequirement(updatedTaskRequirements[i]);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean contains(Task task) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return (taskList.contains(task));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 27,
      "sinteary": 15,
      "seanlimhx": 93,
      "Dkenobi": 29
    }
  },
  {
    "path": "src/main/java/models/task/TaskState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "public enum TaskState {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    OPEN, TODO, DOING, DONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlimhx": 5
    }
  },
  {
    "path": "src/main/java/repositories/IRepository.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package repositories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface IRepository\u003cT\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ArrayList\u003cT\u003e getAll();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    boolean addToRepo(String input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void deleteItem(int projectNumber);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    T getItem(int projectNumber);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 5,
      "-": 8
    }
  },
  {
    "path": "src/main/java/repositories/ProjectRepository.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package repositories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.data.Project;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.ProjectFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.data.IProject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.DukeLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ProjectRepository implements IRepository\u003cProject\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private ArrayList\u003cProject\u003e allProjects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private ProjectFactory projectFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ProjectRepository() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.allProjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.projectFactory \u003d new ProjectFactory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ArrayList\u003cProject\u003e getAll() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return allProjects;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public boolean addToRepo(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IProject newProject \u003d projectFactory.create(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logDebug(ProjectRepository.class, \"New project created with name: \u0027\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + newProject.getDescription() + \"\u0027\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (newProject.getDescription() \u003d\u003d null || newProject.getMembers() \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project newlyCreatedProject \u003d (Project) newProject;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        allProjects.add(newlyCreatedProject);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public Project getItem(int projectNumber) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.allProjects.get(projectNumber - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void deleteItem(int projectNumber) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.allProjects.remove(projectNumber - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 4,
      "Lucria": 36,
      "Dkenobi": 3
    }
  },
  {
    "path": "src/main/java/util/ParserHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class ParserHelper {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private SortHelper sortHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ParserHelper() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.sortHelper \u003d new SortHelper();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parses the string input to extract the name, phone number and email."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param input Contains the name, phone number and email."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An array consisting on name in index 0, phone number in index 1 and email in index 2."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String[] parseMemberDetails(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String[] memberDetails \u003d new String[4];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        memberDetails[0] \u003d \"No name\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        memberDetails[1] \u003d \"No phone number\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        memberDetails[2] \u003d \"No email address\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        memberDetails[3] \u003d \"0\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String[] tempInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String s : tempInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (s.length() \u003e\u003d 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                switch (s.substring(0, 2)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                case \"i/\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    memberDetails[1] \u003d s.substring(2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                case \"e/\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    memberDetails[2] \u003d s.substring(2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                case \"x/\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    memberDetails[3] \u003d s.substring(2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int indexOfNameFlag \u003d input.indexOf(\"n/\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int indexOfPhoneFlag \u003d input.indexOf(\"i/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int indexOfEmailFlag \u003d input.indexOf(\"e/\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int indexOfMemberIndexFlag \u003d input.indexOf(\"x/\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (indexOfNameFlag \u003d\u003d -1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return memberDetails;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (indexOfPhoneFlag !\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            memberDetails[0] \u003d input.substring(indexOfNameFlag + 2, indexOfPhoneFlag - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else if (indexOfEmailFlag !\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            memberDetails[0] \u003d input.substring(indexOfNameFlag + 2, indexOfEmailFlag - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else if (indexOfMemberIndexFlag !\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            memberDetails[0] \u003d input.substring(indexOfNameFlag + 2, indexOfMemberIndexFlag - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            memberDetails[0] \u003d input.substring(2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return memberDetails;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parses the criteria specified by the user to sort the list of tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList A list of all tasks in the project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param sortCriteria Criteria to sort the list of tasks"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList with String descriptions of task details sorted by the criteria specified by the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e parseSortTaskDetails(ArrayList\u003cTask\u003e taskList, String sortCriteria) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (sortCriteria.length() \u003e\u003d 4) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String[] detailedCriteria \u003d sortCriteria.split(\"-\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            switch (detailedCriteria[0]) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/NAME\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskName(taskList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/INDEX\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskIndex(taskList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/DATE\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskDueDate(taskList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/PRIORITY\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskPriority(taskList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/CREDIT\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskCredit(taskList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/WHO\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskMember(taskList, detailedCriteria[1]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/KANBAN\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskState(taskList, detailedCriteria[1]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 84,
      "Lucria": 16
    }
  },
  {
    "path": "src/main/java/util/SortHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class SortHelper {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task name in alphabetical order."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskName(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.sort(Comparator.comparing(Task::getTaskName));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task index."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task index."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskIndex(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Empty method"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task due date in descending order."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task due date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskDueDate(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (task.getDueDate() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                sortedTaskList.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        sortedTaskList.sort((task1, task2) -\u003e task2.getDueDate().compareTo(task1.getDueDate()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : sortedTaskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task priority in descending order."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task priority."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskPriority(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.sort((task1, task2) -\u003e task2.getTaskPriority() - task1.getTaskPriority());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task credit in descending order."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task credit."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskCredit(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.sort((task1, task2) -\u003e task2.getTaskCredit() - task1.getTaskCredit());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the name of the members assigned to the tasks in alphabetical order."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the name of the members assigned to the tasks in alphabetical order."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskMember(ArrayList\u003cTask\u003e taskList, String memberName) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cTask\u003e allAssignedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String details : task.getAssignedMembers().getAllMemberDetails()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (details.split(\" \")[1].equals(memberName)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    allAssignedTasks.add(task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.sortTaskName(allAssignedTasks);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Filters the list of tasks by the task state."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The List of tasks."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param state The task state required to filter the task list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks filtered by the task state."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskState(ArrayList\u003cTask\u003e taskList, String state) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (state.equals(task.getTaskState().toString())) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 128
    }
  },
  {
    "path": "src/main/java/util/constant/ConstantHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.constant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class ConstantHelper {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 4
    }
  },
  {
    "path": "src/main/java/util/date/DateTimeHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class DateTimeHelper {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * This method takes in the date in String and return is as a Date object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param date String of the date"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return a Date object for consumption."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @throws ParseException throws when there is an error with parsing the date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Date formatDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return formatter.parse(date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * This method format the Date object and return as a String date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param date takes in the Date object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return a date String format for consumption."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String formatDateForDisplay(Date date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return formatter.format(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 28
    }
  },
  {
    "path": "src/main/java/util/factories/IArchDukeFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface IArchDukeFactory\u003cT\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    T create(String input);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 5
    }
  },
  {
    "path": "src/main/java/util/factories/MemberFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.NullMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class MemberFactory implements IArchDukeFactory\u003cIMember\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public MemberFactory() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method to create a new member."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param input Input containing details of member to be added (name, phone, email)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return Member with the relevant details. Index number is set later when adding to list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public IMember create(String input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String[] memberDetails \u003d this.parserHelper.parseMemberDetails(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        boolean isNameCreated \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String name \u003d memberDetails[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (!(\"No name\").equals(name)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            isNameCreated \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String phone \u003d memberDetails[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String email \u003d memberDetails[2];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int index \u003d Integer.parseInt(memberDetails[3]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (isNameCreated) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new Member(name, phone, email, index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullMember();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 8,
      "Lucria": 28
    }
  },
  {
    "path": "src/main/java/util/factories/ProjectFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.data.IProject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.data.NullProject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.data.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ProjectFactory implements IArchDukeFactory\u003cIProject\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Creation of an IProject object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Project may be a NullProject due to errors in input. Validation of project will be handled by Repository"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param input : User input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return Method will return an IProject object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public IProject create(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (input.length() \u003c 8) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            System.out.println(\"Please specify the command correctly in the format create n/PROJECT_NAME\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullProject();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else if (!input.contains(\"n/\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            System.out.println(\"Please specify the n/ flag before your PROJECT_NAME using n/PROJECT_NAME\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullProject();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else if (input.length() \u003c 10) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            System.out.println(\"Please remember to specify the project name after the n/ flag!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullProject();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String projectName \u003d input.substring(9);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return new Project(projectName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 29
    }
  },
  {
    "path": "src/main/java/util/factories/TaskFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.NullTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class TaskFactory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Method to create a new task and put it into a list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param input Input containing the information about the task and priority."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return Task as an object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ITask createTask(String input) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String [] taskDetails \u003d input.split(\"[tpdcsr]\\\\/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ITask newTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String newTaskName \u003d taskDetails[1].trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int newTaskPriority \u003d Integer.parseInt(taskDetails[2].trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        boolean hasDueDateFlag \u003d input.contains(\" d/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        boolean hasStateFlag \u003d input.contains(\" s/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (!input.contains(\"t/\") || !input.contains(\"p/\") || !input.contains(\"c/\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullTask();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (!hasDueDateFlag \u0026\u0026 !hasStateFlag) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (taskDetails.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                newTask \u003d new Task(newTaskName, newTaskPriority,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        null, Integer.parseInt(taskDetails[3].trim()), TaskState.OPEN,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                ArrayList\u003cString\u003e taskRequirements \u003d parseTaskRequirements(taskDetails, 4);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                newTask \u003d new Task(newTaskName, newTaskPriority,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        null, Integer.parseInt(taskDetails[3].trim()), TaskState.OPEN,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        taskRequirements);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else if (hasDueDateFlag \u0026\u0026 !hasStateFlag) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (taskDetails.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                Date dueDate \u003d dateTimeHelper.formatDate(taskDetails[3]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                newTask \u003d new Task(newTaskName, newTaskPriority,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        dueDate, Integer.parseInt(taskDetails[4].trim()), TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                Date dueDate \u003d dateTimeHelper.formatDate(taskDetails[3]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                ArrayList\u003cString\u003e taskRequirements \u003d parseTaskRequirements(taskDetails, 5);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                newTask \u003d new Task(newTaskName, newTaskPriority,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        dueDate, Integer.parseInt(taskDetails[4].trim()), TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else if (!hasDueDateFlag) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            TaskState newTaskState \u003d convertStringToTaskState(taskDetails[4]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            if (taskDetails.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                newTask \u003d new Task(newTaskName, newTaskPriority,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        null, Integer.parseInt(taskDetails[3].trim()), newTaskState, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                ArrayList\u003cString\u003e taskRequirements \u003d parseTaskRequirements(taskDetails, 5);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                newTask \u003d new Task(newTaskName, newTaskPriority,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        null, Integer.parseInt(taskDetails[3].trim()), newTaskState, taskRequirements);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Date dueDate \u003d dateTimeHelper.formatDate(taskDetails[3]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            TaskState newTaskState \u003d convertStringToTaskState(taskDetails[5].trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            if (taskDetails.length \u003d\u003d 6) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                newTask \u003d new Task(newTaskName, newTaskPriority,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        dueDate, Integer.parseInt(taskDetails[4].trim()), newTaskState, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                ArrayList\u003cString\u003e taskRequirements \u003d parseTaskRequirements(taskDetails, 6);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                newTask \u003d new Task(newTaskName, newTaskPriority,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        dueDate, Integer.parseInt(taskDetails[4].trim()), newTaskState, taskRequirements);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Creates ArrayList of Strings containing task requirements."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskDetails  Details of new task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param startIndexOfTaskRequirements index from which the content in taskDetails will be task requirements."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return ArrayList of type String containing task requirements."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private ArrayList\u003cString\u003e parseTaskRequirements(String[] taskDetails, int startIndexOfTaskRequirements) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int i \u003d startIndexOfTaskRequirements; i \u003c taskDetails.length; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            taskRequirements.add(taskDetails[i].trim());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return taskRequirements;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Converts string input for state into enum TaskState object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param inputState String input of state."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return enum TaskState object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private TaskState convertStringToTaskState(String inputState) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String inputStateLowerCase \u003d inputState.toLowerCase();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        switch (inputStateLowerCase) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return TaskState.DONE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return TaskState.TODO;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        case \"doing\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return TaskState.DOING;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return TaskState.OPEN;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlimhx": 63,
      "Lucria": 32,
      "Dkenobi": 17
    }
  },
  {
    "path": "src/main/java/util/json/JsonHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class JsonHelper {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 4
    }
  },
  {
    "path": "src/main/java/util/log/DukeLogger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.log;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import org.apache.logging.log4j.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import org.apache.logging.log4j.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class DukeLogger {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private static Logger _logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static void logDebug(Class className, String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        _logger \u003d LogManager.getLogger(className);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        _logger.debug(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static void logInfo(Class className, String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        _logger \u003d LogManager.getLogger(className);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        _logger.info(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static void logError(Class className, String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        _logger \u003d LogManager.getLogger(className);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        _logger.error(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 23
    }
  },
  {
    "path": "src/main/java/views/CLIView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import controllers.ConsoleInputController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.data.IProject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.data.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.DukeLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CLIView {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private static final String horiLine \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private static final String indentation \u003d \"\\t\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private ConsoleInputController consoleInputController;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CLIView() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.consoleInputController \u003d new ConsoleInputController(this);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Prints an indented and formatted message with a top and bottom border."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param lines The lines to be printed in between the border."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void consolePrint(String... lines) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        System.out.println(horiLine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String message : lines) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            System.out.println(indentation + message);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        System.out.println(horiLine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to call when View model is started."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logInfo(CLIView.class, \"ArchDuke have started.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(\"Hello! I\u0027m Duke\", \"What can I do for you?\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        //noinspection InfiniteLoopStatement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleInputController.onCommandReceived(command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to be called when user says bye to exit the program."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logInfo(CLIView.class, \"ArchDuke have stopped.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method called when users wishes to view all Projects that are currently created or stored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param allProjects List of Projects returned to View model by the Controller from the Repository"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void viewAllProjects(ArrayList\u003cProject\u003e allProjects) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        toPrint.add(\"Here are all the Projects you are managing:\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        for (int i \u003d 0; i \u003c allProjects.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            toPrint.add(\"\" + (i + 1) + \". \" + allProjects.get(i).getDescription() + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                + allProjects.get(i).getMembers().getAllMemberDetails());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(toPrint.toArray(new String[0]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Method called to inform the user that the project has exited."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectName The name of the project exited."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void exitProject(String projectName) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(\"Exited project: \" + projectName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Adds a member to the project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void addMember(IProject projectToManage, String memberDetails) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(\"Added new member to: \" + projectToManage.getDescription(), \"\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            + \"Member details: \" + memberDetails);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Edits the details of a member belonging to the project."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param memberIndexNumber The member whose details are to be updated."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param memberDetails The updated details of the member."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void editMember(IProject projectToManage, int memberIndexNumber, String memberDetails) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectToManage.editMember(memberIndexNumber, memberDetails);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        consolePrint(\"Updated member details with the index number \" + memberIndexNumber);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Adds a member to the project."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param newTask A new task with details specified by the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addTask(IProject projectToManage, Task newTask) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectToManage.addTask(newTask);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        consolePrint(\"Added new task to the list.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Deletes a task from the project."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskIndexNumber The index of the task to be deleted."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void removeTask(IProject projectToManage, int taskIndexNumber) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        consolePrint(\"Removed \" + projectToManage.getTask(taskIndexNumber).getTaskName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectToManage.removeTask(taskIndexNumber);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Shows the details of all the members in the project."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Can be updated later on to include more information (tasks etc)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void viewAllMembers(Project projectToManage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e allMemberDetails \u003d projectToManage.getMembers().getAllMemberDetails();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logDebug(CLIView.class, allMemberDetails.toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(allMemberDetails.toArray(new String[0]));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Shows the details of all the task in the project."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void viewAllTasks(IProject projectToManage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e allTaskDetails \u003d projectToManage.getTasks().getAllTaskDetails();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logDebug(CLIView.class, allTaskDetails.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        consolePrint(allTaskDetails.toArray(new String[0]));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Shows a list of all tasks in the project, sorted based on certain criteria as chosen by the user."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param sortCriteria Criteria to sort chosen by user."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void viewSortedTasks(IProject projectToManage, String sortCriteria) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e allTaskDetails \u003d projectToManage.getTasks().getAllSortedTaskDetails(sortCriteria);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logDebug(CLIView.class, allTaskDetails.toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        consolePrint(allTaskDetails.toArray(new String[0]));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Shows all the task that is assigned in the project."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void viewAssignedTask(IProject projectToManage) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        for (Task task: projectToManage.getTasks().getTaskList()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ArrayList\u003cString\u003e allAssignedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            allAssignedTasks.add(task.getTaskName() + \" is assigned to: \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            allAssignedTasks.addAll(task.getAssignedMembers().getAllMemberDetails());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            DukeLogger.logDebug(CLIView.class,allAssignedTasks.toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            consolePrint(allAssignedTasks.toArray(new String[0]));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Shows specific requirements of a task."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param projectToManage The project in which the aforementioned task belongs to."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskIndex Index of task to be viewed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void viewTaskRequirements(IProject projectToManage, int taskIndex) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d projectToManage.getTask(taskIndex).getTaskRequirements();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DukeLogger.logDebug(CLIView.class,taskRequirements.toString());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        consolePrint(taskRequirements.toArray(new String[0]));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void editTask(IProject projectToManage, String updatedTaskDetails, int taskIndexNumber) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        projectToManage.editTask(updatedTaskDetails);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        consolePrint(\"The task has been updated!\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void editTaskRequirements(IProject projectToManage, int taskIndexNumber, String[] updatedTaskRequirements,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                                     boolean haveRemove) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        projectToManage.editTaskRequirements(taskIndexNumber, updatedTaskRequirements, haveRemove);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        consolePrint(\"The requirements of your specified task has been updated!\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 35,
      "iamabhishek98": 19,
      "seanlimhx": 17,
      "Lucria": 13,
      "-": 74,
      "Dkenobi": 30
    }
  },
  {
    "path": "src/main/java/views/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package views.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * This method return the dialog box containing the output and image of duke."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 2,
      "Dkenobi": 61
    }
  },
  {
    "path": "src/main/java/views/ui/DukeUI.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package views.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class DukeUI  {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 7
    }
  },
  {
    "path": "src/main/java/views/ui/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package views.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * A GUI for DukeTest using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DukeUI duke \u003d new DukeUI();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 30
    }
  },
  {
    "path": "src/main/java/views/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package views.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * Controller for views.ui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DukeUI duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/lucria.jpg\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/lucria.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setDuke(DukeUI d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        dukeGreeting();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private void dukeGreeting() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String greetingText \u003d \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"What can i do for you\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                DialogBox.getDukeDialog(greetingText, dukeImage)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing DukeTest\u0027s"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (input.contains(\"bye\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            duke.getResponse(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            timeDelay(1000);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private void timeDelay(long t) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Thread.sleep(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 76
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"views.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 19
    }
  },
  {
    "path": "src/test/java/AssignmentControllerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import controllers.AssignmentController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.data.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import views.CLIView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class AssignmentControllerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final CLIView consoleView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    AssignmentControllerTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project \u003d new Project(\"Test Project\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        member1 \u003d new Member(\"Tom\", \"NIL\", \"NIL\", 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        member2 \u003d new Member(\"Dick\", \"NIL\", \"NIL\", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        member3 \u003d new Member(\"Harry\", \"NIL\", \"NIL\", 3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Task task \u003d new Task(\"Test task\", 0,null, 0, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.addMember(member1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.addMember(member2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.addMember(member3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.addTask(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.consoleView \u003d new CLIView();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testSetupOfProjectAndMembers() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test Project\", project.getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"1. Tom (Phone: NIL | Email: NIL)\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member1.getDetails());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"2. Dick (Phone: NIL | Email: NIL)\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member2.getDetails());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"3. Harry (Phone: NIL | Email: NIL)\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member3.getDetails());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(3, project.getNumOfMembers());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tom\", project.getMembers().getMember(1).getName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Dick\", project.getMembers().getMember(2).getName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Harry\", project.getMembers().getMember(3).getName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getTasks().getSize());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test task\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testParseAssignmentInput() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        AssignmentController assignmentController \u003d new AssignmentController(project);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String assignCommand \u003d \"assign task -i 1 -to 1 2 -rm 3 4\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController.parseAssignmentInput(assignCommand.substring(12));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, assignmentController.getValidMembersToAssign().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, assignmentController.getValidMembersToAssign().get(0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, assignmentController.getValidMembersToAssign().get(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, assignmentController.getValidMembersToUnassign().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(3, assignmentController.getValidMembersToUnassign().get(0));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, assignmentController.getValidTaskIndexes().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, assignmentController.getValidTaskIndexes().get(0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testAssignAndUnassign() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        AssignmentController assignmentController \u003d new AssignmentController(project);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String assignCommand \u003d \"assign task -i 1 -to 1 2 -rm 3 4\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController.assignAndUnassign(assignCommand.substring(12));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(project.getTask(1), member1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(project.getTask(1), member2));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertFalse(project.containsAssignment(project.getTask(1), member3));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController \u003d new AssignmentController(project);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignCommand \u003d \"assign task -i 1 -to 3 -rm 1 \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController.assignAndUnassign(assignCommand.substring(12));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertFalse(project.containsAssignment(project.getTask(1), member1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(project.getTask(1), member2));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(project.getTask(1), member3));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 89
    }
  },
  {
    "path": "src/test/java/factorytests/MemberFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package factorytests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.NullMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.MemberFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class MemberFactoryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private MemberFactory memberFactory \u003d new MemberFactory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String simulatedFactoryInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Always true test just to test if jUnit is working."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * This test is to test if user gives a valid input, whether MemberFactory"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * can create the desired Member properly."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_fullCorrectInputs_creationSuccess() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"n/Thor i/91234567 e/thor@marvel.com x/1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member expectedMember \u003d new Member(\"Thor\", \"91234567\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                \"thor@marvel.com\", 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_correctPartialInputs_creationSuccess() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"n/Iron man i/12345678 x/2\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member expectedMember \u003d new Member(\"Iron man\", \"12345678\", \"No email address\", 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"n/Dr Strange x/3\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedMember \u003d new Member(\"Dr Strange\", \"No phone number\", \"No email address\", 3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_wrongInputs_creationFailed() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"i/12341234 x/1\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        NullMember expectedMember \u003d new NullMember();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 64
    }
  },
  {
    "path": "src/test/java/factorytests/TaskFactoryTests.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package factorytests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.NullTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.TaskFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class TaskFactoryTests {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private TaskFactory taskFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String simulatedFactoryInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Always true test just to test if Junit is working."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void taskCreation_fullCorrectInputs_creationSuccess() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"t/Killing Thanos p/1 d/28/09/2019 c/100 s/done r/Use Iron Man\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ITask simulatedTask \u003d taskFactory.createTask(simulatedFactoryInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ArrayList\u003cString\u003e expectedRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            expectedRequirements.add(\"Use Iron Man\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            Task expectedTask \u003d new Task(\"Killing Thanos\", 1,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    dateTimeHelper.formatDate(\"28/09/2019\"), 100, TaskState.DONE, expectedRequirements);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getDetails(), simulatedTask.getDetails());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskName(),simulatedTask.getTaskName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskCredit(), simulatedTask.getTaskCredit());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskPriority(), simulatedTask.getTaskPriority());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (ParseException err) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fail(\"ParseException was detected when it shouldn\u0027t have\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void taskCreation_correctPartialInputs_creationSuccess() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"t/Turning back time p/5 c/5\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ITask simulatedTask \u003d taskFactory.createTask(simulatedFactoryInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            Task expectedTask \u003d new Task(\"Turning back time\", 5,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    null, 5, TaskState.OPEN, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getDetails(), simulatedTask.getDetails());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskName(),simulatedTask.getTaskName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskCredit(), simulatedTask.getTaskCredit());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskPriority(), simulatedTask.getTaskPriority());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (ParseException err) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fail(\"ParseException was detected when it shouldn\u0027t have\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void taskCreation_wrongInputs_creationFailed() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"t/Missing priority c/5\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ITask simulatedTask \u003d taskFactory.createTask(simulatedFactoryInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            NullTask expectedTask \u003d new NullTask();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getDetails(), simulatedTask.getDetails());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskName(),simulatedTask.getTaskName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskCredit(), simulatedTask.getTaskCredit());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskPriority(), simulatedTask.getTaskPriority());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getDueDate(), simulatedTask.getDueDate());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskState(), simulatedTask.getTaskState());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getAssignedMembers(), simulatedTask.getAssignedMembers());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskRequirements(), simulatedTask.getTaskRequirements());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fail(\"ParseException was detected when it shouldn\u0027t have\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 82
    }
  },
  {
    "path": "src/test/java/modeltests/member/ListOfMembersInProjectTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.MemberList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class ListOfMembersInProjectTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testAddMember() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        MemberList listOfMembersInProject \u003d new MemberList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.addMember(member);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Tom (Phone: 91198766 | Email: tom@gmail.com)\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                listOfMembersInProject.getMember(1).getDetails());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testEditMember() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        MemberList listOfMembersInProject \u003d new MemberList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.addMember(member);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.editMember(1,\"n/John i/91177777 e/john@gmail.com\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. John (Phone: 91177777 | Email: john@gmail.com)\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                listOfMembersInProject.getMember(1).getDetails());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        listOfMembersInProject.editMember(1,\"n/Matthew e/matthew@gmail.com\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"1. Matthew (Phone: 91177777 | Email: matthew@gmail.com)\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                listOfMembersInProject.getMember(1).getDetails());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetNumOfMembers() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        MemberList listOfMembersInProject \u003d new MemberList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.addMember(member);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(1, listOfMembersInProject.getNumOfMembers());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testRemoveMember() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        MemberList listOfMembersInProject \u003d new MemberList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.addMember(member);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member toBeRemoved \u003d listOfMembersInProject.getMember(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.removeMember(toBeRemoved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(0, listOfMembersInProject.getNumOfMembers());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 2,
      "Lucria": 47,
      "Dkenobi": 5
    }
  },
  {
    "path": "src/test/java/modeltests/member/MemberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class MemberTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetDetails() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"1. Tom (Phone: 91198766 | Email: tom@gmail.com)\",member.getDetails());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testSetIndexNumber() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        member.setIndexNumber(2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"2. Tom (Phone: 91198766 | Email: tom@gmail.com)\",member.getDetails());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testUpdateDetails() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        member.updateDetails(\"John\", \"911\", \"john@hotmail.com\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"1. John (Phone: 911 | Email: john@hotmail.com)\", member.getDetails());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 26,
      "Lucria": 7
    }
  },
  {
    "path": "src/test/java/modeltests/member/TaskAssignmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package modeltests.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.data.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "class TaskAssignmentTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    Set up a dummy project for the test. It is assumed that all other components are working."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    Some tests for other classes are included in this test to ensure proper functioning before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    testing. Testing:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    TaskAssignmentTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project \u003d new Project(\"New project\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        member1 \u003d new Member(\"Tom\", \"NIL\", \"NIL\", 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        member2 \u003d new Member(\"Dick\", \"NIL\",\"NIL\", 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        member3 \u003d new Member(\"Harry\", \"NIL\", \"NIL\", 3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Task task \u003d new Task(\"Test task\", 0,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            null, 0, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.addMember(member1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.addMember(member2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.addMember(member3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.addTask(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testSetupOfProjectAndMembers() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"1. Tom (Phone: NIL | Email: NIL)\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member1.getDetails());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"2. Dick (Phone: NIL | Email: NIL)\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member2.getDetails());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"3. Harry (Phone: NIL | Email: NIL)\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member3.getDetails());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(3, project.getNumOfMembers());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tom\", project.getMembers().getMember(1).getName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Dick\", project.getMembers().getMember(2).getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Harry\", project.getMembers().getMember(3).getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getTasks().getSize());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test task\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testManageAssignment() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getTasks().getSize());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test task\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.createAssignment(project.getTask(1),member1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.createAssignment(project.getTask(1),member2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.createAssignment(project.getTask(1),member3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertEquals(\"[Test task is assigned to: , Tom, Dick, Harry]\", project.getAssignedTaskList().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /* assertEquals(0, projectInputController.getUnassigneesIndex().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            project.getTask(1).getAssignedMembers().getNumberOfAssignees());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tom\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            project.getTask(1).getAssignedMembers().getMember(1).getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Harry\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            project.getTask(1).getAssignedMembers().getMember(2).getName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Cannot unassign member with index 2 (Dick) \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            + \"because they are not assigned the task yet!\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            projectInputController.getMessageForView().get(0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Member with index number 4 does not exist!\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            projectInputController.getMessageForView().get(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        projectCommand \u003d \"assign task i/1 to/ 1 rm/ 3\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController \u003d new AssignmentController();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.manageAssignment(project,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            projectCommand.substring(12).split(\" \"), consoleView);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertEquals(0, projectInputController.getAssigneesIndex().size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertEquals(1, projectInputController.getUnassigneesIndex().size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Member with index 1 (Tom) has already been assigned this task!\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            projectInputController.getMessageForView().get(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            project.getTask(1).getAssignedMembers().getNumberOfAssignees());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tom\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.getTask(1).getAssignedMembers().getMember(1).getName()); */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testManageAssignmentInvalidTaskNumber() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getTasks().getSize());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test task\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String projectCommand \u003d \"assign task i/200 to/ 1\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        AssignmentController assignmentController \u003d new AssignmentController();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] args \u003d projectCommand.substring(12).split(\" \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController.manageAssignment(project,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                args, this.consoleView);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, assignmentController.getAssigneesIndex().size());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, assignmentController.getUnassigneesIndex().size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"The task you wish to assign (task index 200 ) does not exist!\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                assignmentController.getMessageForView().get(0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Please check the index number of the task and try again.\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                assignmentController.getMessageForView().get(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 88,
      "Lucria": 8,
      "Dkenobi": 16
    }
  },
  {
    "path": "src/test/java/modeltests/task/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.data.Project;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testAddTask() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task task \u003d new Task(\"task\", 5, null,100, TaskState.OPEN,taskRequirements);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"task | Priority: 5 | Due: -- | Credit: 100 | State: OPEN\",taskList.getTask(1).getDetails());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testRemoveTask() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task task \u003d new Task(\"task\", 5, null,100, TaskState.OPEN,taskRequirements);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.removeTask(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(0,taskList.getSize());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetAllTaskDetails() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Task task1 \u003d new Task(\"task1\", 1, null, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Task task2 \u003d new Task(\"task2\", 2, null, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Task task3 \u003d new Task(\"task3\", 3, null, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Task task4 \u003d new Task(\"task4\", 4, null, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.addTask(task1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.addTask(task2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.addTask(task3);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.addTask(task4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertNotNull(taskList.getTaskList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String testTaskListString \u003d \"[1. task4 | Priority: 4 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"2. task3 | Priority: 3 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"3. task2 | Priority: 2 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"4. task1 | Priority: 1 | Due: -- | Credit: 100 | State: OPEN]\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(testTaskListString,taskList.getAllTaskDetails().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String testRemoveTaskListString \u003d \"[1. task4 | Priority: 4 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"2. task2 | Priority: 2 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"3. task1 | Priority: 1 | Due: -- | Credit: 100 | State: OPEN]\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.removeTask(2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(testRemoveTaskListString,taskList.getAllTaskDetails().toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetAllSortedTaskDetails() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate1 \u003d dateTimeHelper.formatDate(\"31/10/2019\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate2 \u003d dateTimeHelper.formatDate(\"21/09/2019\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate3 \u003d dateTimeHelper.formatDate(\"21/01/2020\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate4 \u003d dateTimeHelper.formatDate(\"21/12/1920\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task1 \u003d new Task(\"taskOne\", 1, dueDate1, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task2 \u003d new Task(\"taskTwo\", 2, dueDate2, 90, TaskState.DONE, taskRequirements);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task3 \u003d new Task(\"taskEight\", 3, dueDate3, 80, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task4 \u003d new Task(\"taskSix\", 4, dueDate4, 70, TaskState.DONE, taskRequirements);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task5 \u003d new Task(\"taskFive\", 5, null, 60, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task3);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task4);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task5);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertNotNull(taskList.getTaskList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testPriorityTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"1. taskFive | Priority: 5 | Due: -- | Credit: 60 | State: OPEN, \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. taskSix | Priority: 4 | Due: 21 Dec 1920 | Credit: 70 | State: DONE, \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. taskEight | Priority: 3 | Due: 21 Jan 2020 | Credit: 80 | State: OPEN, \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"4. taskTwo | Priority: 2 | Due: 21 Sep 2019 | Credit: 90 | State: DONE, \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"5. taskOne | Priority: 1 | Due: 31 Oct 2019 | Credit: 100 | State: OPEN\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testPriorityTaskListString,taskList.getAllSortedTaskDetails(\"/PRIORITY\").toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testNameTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"1. taskEight | Priority: 3 | Due: 21 Jan 2020 | Credit: 80 | State: OPEN, \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. taskFive | Priority: 5 | Due: -- | Credit: 60 | State: OPEN, \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. taskOne | Priority: 1 | Due: 31 Oct 2019 | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"4. taskSix | Priority: 4 | Due: 21 Dec 1920 | Credit: 70 | State: DONE, \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"5. taskTwo | Priority: 2 | Due: 21 Sep 2019 | Credit: 90 | State: DONE\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testNameTaskListString,taskList.getAllSortedTaskDetails(\"/NAME\").toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testDueDateTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"1. taskEight | Priority: 3 | Due: 21 Jan 2020 | Credit: 80 | State: OPEN, \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. taskOne | Priority: 1 | Due: 31 Oct 2019 | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. taskTwo | Priority: 2 | Due: 21 Sep 2019 | Credit: 90 | State: DONE, \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"4. taskSix | Priority: 4 | Due: 21 Dec 1920 | Credit: 70 | State: DONE\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testDueDateTaskListString,taskList.getAllSortedTaskDetails(\"/DATE\").toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testCreditTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"1. taskOne | Priority: 1 | Due: 31 Oct 2019 | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. taskTwo | Priority: 2 | Due: 21 Sep 2019 | Credit: 90 | State: DONE, \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. taskEight | Priority: 3 | Due: 21 Jan 2020 | Credit: 80 | State: OPEN, \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"4. taskSix | Priority: 4 | Due: 21 Dec 1920 | Credit: 70 | State: DONE, \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"5. taskFive | Priority: 5 | Due: -- | Credit: 60 | State: OPEN\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testCreditTaskListString,taskList.getAllSortedTaskDetails(\"/CREDIT\").toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testKanbanTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. taskTwo | Priority: 2 | Due: 21 Sep 2019 | Credit: 90 | State: DONE, \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"4. taskSix | Priority: 4 | Due: 21 Dec 1920 | Credit: 70 | State: DONE\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testKanbanTaskListString,taskList.getAllSortedTaskDetails(\"/KANBAN-DONE\").toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.addTask(new Task(\"task2\",5, null,10,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    TaskState.TODO, taskRequirements));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.addTask(new Task(\"task1\",10, null,10,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    TaskState.TODO, taskRequirements));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.addMember(new Member(\"Dillen\", \"9999\", \"dillen@gmail.com\",1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.addMember(new Member(\"Jerry\", \"9999\", \"jerryn@gmail.com\",2));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.getTask(1).assignMember(project.getMembers().getMember(1));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.getTask(1).assignMember(project.getMembers().getMember(2));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.getTask(2).assignMember(project.getMembers().getMember(1));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testMemberTaskListString \u003d \"[1. task2 | Priority: 5 | Due: -- | Credit: 10 | State: TODO]\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testMemberTaskListString2 \u003d \"[1. task1 | Priority: 10 | Due: -- | Credit: 10 | \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"State: TODO, 2. task2 | Priority: 5 | Due: -- | Credit: 10 | State: TODO]\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testMemberTaskListString,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasks().getAllSortedTaskDetails(\"/WHO-Jerry\").toString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testMemberTaskListString2,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasks().getAllSortedTaskDetails(\"/WHO-Dillen\").toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 127,
      "Lucria": 10,
      "Dkenobi": 21
    }
  },
  {
    "path": "src/test/java/modeltests/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.factories.TaskFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private TaskFactory consoleInputFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetDetails() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task task1 \u003d new Task(\"task1\", 5, null,100, TaskState.OPEN,taskRequirements);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"task1 | Priority: 5 | Due: -- | Credit: 100 | State: OPEN\",task1.getDetails());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Date date \u003d dateTimeHelper.formatDate(\"20/1/2019\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task2 \u003d new Task(\"task2\", 5, date, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(\"task2 | Priority: 5 | Due: 20 Jan 2019 | Credit: 100 | State: OPEN\", task2.getDetails());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            System.out.println(\"Parsing error\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetTaskRequirements() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Date dueDate \u003d dateTimeHelper.formatDate(\"19/10/2019\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            taskRequirements.add(\"requirement1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            Task dummyTask \u003d new Task(\"task1\",1,dueDate,10, TaskState.TODO, taskRequirements);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ITask task \u003d consoleInputFactory.createTask(\"t/task1 p/1 d/19/10/2019 c/10 s/todo r/requirement1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            assertEquals(dummyTask.getDetails(),task.getDetails());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            assertEquals(dummyTask.getTaskRequirements(), task.getTaskRequirements());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ArrayList\u003cString\u003e taskRequirements2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskRequirements2.add(\"requirement1\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskRequirements2.add(\"requirement2\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task dummyTask2 \u003d new Task(\"task2\",2,null,10, TaskState.OPEN, taskRequirements2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ITask task2 \u003d consoleInputFactory.createTask(\"t/task2 p/2 c/10 r/requirement1 r/requirement2\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(dummyTask2.getDetails(),task2.getDetails());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(dummyTask2.getTaskRequirements(), task2.getTaskRequirements());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            System.out.println(\"Parsing error\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 40,
      "seanlimhx": 5,
      "Lucria": 9,
      "Dkenobi": 7
    }
  },
  {
    "path": "src/test/java/modeltests/task/ViewAssignedTasksTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.data.Project;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class ViewAssignedTasksTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testViewAssignedTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String testAssignedTasks \u003d \"1. Dillen (Phone: 9999 | Email: dillen@gmail.com)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"2. Jerry (Phone: 9999 | Email: jerryn@gmail.com)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String testAssignedTasks2 \u003d \"1. Dillen (Phone: 9999 | Email: dillen@gmail.com)\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Date dueDate \u003d dateTimeHelper.formatDate(\"19/10/2019\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            taskRequirements.add(\"requirement1\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.addTask(new Task(\"task2\",5, dueDate,10, TaskState.TODO, taskRequirements));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.addTask(new Task(\"task1\",10, dueDate,10, TaskState.TODO, taskRequirements));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.addMember(new Member(\"Dillen\", \"9999\", \"dillen@gmail.com\",1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.addMember(new Member(\"Jerry\", \"9999\", \"jerryn@gmail.com\",2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.getTask(1).assignMember(project.getMembers().getMember(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.getTask(1).assignMember(project.getMembers().getMember(2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            project.getTask(2).assignMember(project.getMembers().getMember(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            assertEquals(project.getTask(1).getAssignedMembers().getAllMemberDetails().get(0) + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + project.getTask(1).getAssignedMembers().getAllMemberDetails().get(1),testAssignedTasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            assertEquals(project.getTask(2).getAssignedMembers().getAllMemberDetails().get(0),testAssignedTasks2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 3,
      "Lucria": 6,
      "Dkenobi": 44
    }
  },
  {
    "path": "src/test/java/repositorytests/ProjectRepositoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package repositorytests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import controllers.ConsoleInputController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import controllers.ProjectInputController;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.data.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import views.CLIView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class ProjectRepositoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String simulatedUserinput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Junit Tests for Project Repository. This is to test the creation of projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ProjectRepositoryTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.projectRepository \u003d new ProjectRepository();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Always true test just to test if jUnit is working."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void addToRepo_correctInputs_projectReturned() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create n/Thor Fanclub\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectRepository.addToRepo(simulatedUserinput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project simulatedProject \u003d projectRepository.getItem(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project expectedProject \u003d new Project(\"Thor Fanclub\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getDescription(), simulatedProject.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getNumOfMembers(), simulatedProject.getNumOfMembers());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getNumOfTasks(), simulatedProject.getNumOfTasks());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getMembers().getAllMemberDetails(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                simulatedProject.getMembers().getAllMemberDetails());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getTasks().getAllTaskDetails(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                simulatedProject.getTasks().getAllTaskDetails());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void addToRepo_incorrectInputs_falseReturned() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertFalse(projectRepository.addToRepo(simulatedUserinput));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertFalse(projectRepository.addToRepo(simulatedUserinput));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create n/\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertFalse(projectRepository.addToRepo(simulatedUserinput));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertFalse(projectRepository.addToRepo(simulatedUserinput));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void getItem_ProjectExists_projectReturned() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create n/Ironman Fanclub\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectRepository.addToRepo(simulatedUserinput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project expectedProject \u003d new Project(\"Ironman Fanclub\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project simulatedProject \u003d projectRepository.getItem(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getDescription(), simulatedProject.getDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getNumOfMembers(), simulatedProject.getNumOfMembers());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getNumOfTasks(), simulatedProject.getNumOfTasks());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getMembers().getAllMemberDetails(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                simulatedProject.getMembers().getAllMemberDetails());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getTasks().getAllTaskDetails(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                simulatedProject.getTasks().getAllTaskDetails());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void deleteItem_ProjectExists_successfulDeletion() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create n/Ironman Fanclub\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectRepository.addToRepo(simulatedUserinput);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 84
    }
  }
]
