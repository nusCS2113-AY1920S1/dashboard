[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": "group \u0027leduc.Duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "version \u00271.2\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"leduc.Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"leduc\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    archiveVersion \u003d \"v1.2\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "test{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 1,
      "-": 37,
      "laurenthg": 2
    }
  },
  {
    "path": "src/main/java/leduc/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.NonExistentDateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a date and contains a GregorianCalendar type field."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime d;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.Date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param d LocalDateTime which is a date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date(LocalDateTime d) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.d \u003d d;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *  Constructor of leduc.Date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param date the String date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the task to delete does not exist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public Date( String date ) throws NonExistentDateException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d1 \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(date.trim(), formatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new NonExistentDateException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.d \u003d d1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow to snooze the date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fixed to 30 minutes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void snoozeLocalDateTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.d \u003d this.d.plusMinutes(30);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Setter of the LocalDateTime d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d the new value of date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setD(LocalDateTime d) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.d \u003d d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of the LocalDateTime d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return d the LocalDateTime d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDateTime getD() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.d;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String representing a date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String representation of date."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter formatters \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateFormatted \u003d this.d.format(formatters);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateFormatted; //no need secondes and time zone"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "laurenthg": 19
    }
  },
  {
    "path": "src/main/java/leduc/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.command.ShortcutCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the main program leduc.Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Run the project from here."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.Duke class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialization of ui,parser, tasks list and storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The tasks will load the information provided by the data file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath String which represents the path of the data file to load."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke(String[] filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ShortcutCommand.initializedSetShortcut();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String file; // file name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (filePath.length !\u003d 0 ){ // test file in case of test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            file \u003d filePath[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        else{ // no test file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            file \u003d System.getProperty(\"user.dir\")+ \"/data/duke.txt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String configFile \u003d System.getProperty(\"user.dir\")+ \"/data/config.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "            this.storage \u003d new Storage(file, configFile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tasks \u003d new TaskList(storage.load()); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method which run the duke program."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.ui.showWelcome();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                String user \u003d this.ui.readCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Command c \u003d parser.parse(user);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                c.execute(tasks, ui, storage); // parser is needed because stringToDate is in leduc.Parser class"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (DukeException e){ // catch one of subclass of dukeException and print the right message"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                e.print();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main of leduc.Duke."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args String[] which could be the data file to load."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        new Duke(args).run();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 6,
      "rshah918": 5,
      "-": 68,
      "laurenthg": 1
    }
  },
  {
    "path": "src/main/java/leduc/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a leduc.Parser which deals with making sense of the user command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of a leduc.Parser."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public Parser(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the leduc.command.Command instanced according to the input string of the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a leduc.command.Command which is asked by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parse(String user){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Command c ;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if (user.equals(ListCommand.getListShortcut())) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new ListCommand(user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"find (.*)\") | user.matches(\"find\")){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new FindCommand(user);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(FindCommand.getFindShortcut()+\" (.*)\") | user.matches(FindCommand.getFindShortcut())) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new FindCommand(user);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"done \\\\d+\")) {// if it is done and a number of task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new DoneCommand(user);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(DoneCommand.getDoneShortcut() + \" \\\\d+\")) {// if it is done and a number of task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new DoneCommand(user);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"snooze \\\\d+\")){ // if it is snooze and a number of task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new SnoozeCommand(user);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(SnoozeCommand.getSnoozeShortcut() + \" \\\\d+\")){ // if it is snooze and a number of task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new SnoozeCommand(user);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"postpone \\\\d+ (.*)\")){ //example: postpone 1 /by 12/12/2012 22:22"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new PostponeCommand(user);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(PostponeCommand.getPostponeShortcut() + \" \\\\d+ (.*)\")){ //example: postpone 1 /by 12/12/2012 22:22"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new PostponeCommand(user);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.trim().matches(EditCommand.getEditShortcut())){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new EditCommand(user);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"delete \\\\d+\")) {// if it is done and a number of task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new DeleteCommand(user);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(DeleteCommand.getDeleteShortcut() + \" \\\\d+\")) {// if it is done and a number of task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new DeleteCommand(user);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"sort (.*)\") | user.matches(\"sort\")){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new SortCommand(user);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(SortCommand.getSortShortcut() + \" (.*)\") | user.matches(SortCommand.getSortShortcut())){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new SortCommand(user);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"todo (.*)\") | user.matches(\"todo\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new TodoCommand(user);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(TodoCommand.getTodoShortcut() + \" (.*)\") | user.matches(TodoCommand.getTodoShortcut())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new TodoCommand(user);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\" deadline (.*)\") | user.matches(\" deadline\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new DeadlineCommand(user);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(DeadlineCommand.getDeadlineShortcut() + \"(.*)\") | user.matches(DeadlineCommand.getDeadlineShortcut())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new DeadlineCommand(user);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"event (.*)\") | user.matches(\"event\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new EventCommand(user);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(EventCommand.getEventShortcut() + \" (.*)\") | user.matches(EventCommand.getEventShortcut())) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new EventCommand(user);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"reschedule \\\\d+ (.*)\") | user.matches(\"reschedule\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new RescheduleCommand(user);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(RescheduleCommand.getRescheduleShortcut() + \" \\\\d+ (.*)\") | user.matches(RescheduleCommand.getRescheduleShortcut())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new RescheduleCommand(user);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (user.matches(\"prioritize \\\\d+ (.*)\") | user.matches(\"prioritize\")){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new PrioritizeCommand(user);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (user.matches(PrioritizeCommand.getPrioritizeShortcut() + \" \\\\d+ (.*)\") | user.matches(PrioritizeCommand.getPrioritizeShortcut())) { // prioritize 1 prio 2"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new PrioritizeCommand(user);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"setwelcome (.*)\") | user.matches(\"setwelcome\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new SetWelcomeCommand(user);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(SetWelcomeCommand.getSetWelcomeShortcut() + \" (.*)\") | user.matches(SetWelcomeCommand.getSetWelcomeShortcut())) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c \u003d new SetWelcomeCommand(user);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"show (.*)\") | user.matches(\"show\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new ShowCommand(user);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches( ShowCommand.getShowShortcut() + \" (.*)\") | user.matches(ShowCommand.getShowShortcut())) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new ShowCommand(user);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(RemindCommand.getRemindShortcut())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c \u003d new RemindCommand(user);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(user.matches(HelpCommand.getHelpShortcut())){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new HelpCommand(user);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(ByeCommand.getByeShortcut())){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new ByeCommand(user);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else if (user.matches(StatsCommand.getStatsShortcut())){"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c \u003d new StatsCommand(user);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(user.matches(\"shortcut\") | user.matches(\"shortcut (.*)\")){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new ShortcutCommand(user);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new MeaninglessCommand(user);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return c ;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 59,
      "rshah918": 9,
      "-": 55,
      "laurenthg": 20
    }
  },
  {
    "path": "src/main/java/leduc/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *  Represents leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of the leduc.Ui"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the String representing the next line of command of the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the String representing the next line of command of the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.sc.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Returns a File object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return a file object containing the welcome message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public static File openFile(String filepath) throws FileException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //open file, throw exception if the file doesnt exist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        File file;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        file \u003d new File(filepath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display the duke logo."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayLogo(){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Show welcome to the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void showWelcome() throws FileException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //open the file"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String filepath \u003d System.getProperty(\"user.dir\")+ \"/data/welcome.txt\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        File file \u003d openFile(filepath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //create Scanner object to read file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        Scanner sc2 \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            sc2 \u003d new Scanner(file);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String welcomeMessage \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //build welcome message"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        while (sc2.hasNext()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            welcomeMessage \u003d welcomeMessage + \u0027\\t\u0027 + sc2.nextLine() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //display welcome message"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.displayLogo();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        this.display(welcomeMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Bye message to the user."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showBye(){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.display(\"\\t Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display the String in the parameter between two lines."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param s String which will be printed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display(String s){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display the list of tasks."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks tasks list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showList(TaskList tasks){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0 ;i\u003c tasks.size() ; i++ ){"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.print(tasks.displayOneElementList(i));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showNotCompeteList(ArrayList\u003cTask\u003e notCompleteTasks, TaskList tasks){//print the task so they have the same index"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huangje"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(notCompleteTasks.contains(tasks.get(i))){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huangje"
        },
        "content": "                System.out.print(tasks.displayOneElementList(i));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display the error message"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param e the error that has been catch"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(DukeException e){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(e.print());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display every command"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showHelp(){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t All command will be display as :\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t commandName [PARAMETERS] : description of the command\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t All parameters will be written in UPPER_CASE\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Parameters are :\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t DESCRIPTION : the description of a task\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t SORTTYPE : the date or description\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t DATE : the date of a task\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t INDEX : the index of the task (goes from 1 to ...)\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t KEYWORD : the keyword to find a task\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t WELCOME: the welcome message\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t DATEOPTION\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Date format is DD/MM/YYYY HH:mm except for show\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t All blank space should be respected\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Here are the list of all command:\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t todo DESCRIPTION : create a todo task\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t deadline DESCRIPTION /by DATE : create a deadline task\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t event DESCRIPTION /at DATE - DATE : create an event task\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t list : show all the tasks\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t bye : exit the application\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t done INDEX : mark as done the task of index INDEX\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t delete INDEX : delete the task of index INDEX\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t find KEYWORD : find the task with a keyword\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t snooze INDEX : snooze a task of index INDEX\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t postpone INDEX /by DATE : postpone a deadline task\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t sort SORTTYPE : Sort all task by date/description\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t reschedule INDEX /at DATE - DATE : reschedule an event task\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t remind : remind the first three task\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t setwelcome WELCOME : customize the welcome message\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t edit : edit a task (then, you have to follow the instructions)\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t show DATEOPTION DATE: show task by day/dayofweek/month/year ( day format is DD/MM/YYYY; \" +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"dayofweek format is monday,tuesday...; month format is MM/YYYY; year format is YYYY)\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t help : show the list of all command\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 48,
      "rshah918": 45,
      "-": 84,
      "laurenthg": 5
    }
  },
  {
    "path": "src/main/java/leduc/command/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a bye command when the user input \"bye\"."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String byeShortcut \u003d \"bye\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.command.ByeCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public  ByeCommand(String user){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execution of leduc.command.ByeCommand: the execution of leduc.Duke is ending and the leduc.Ui display a bye message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws FileException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns is true for a leduc.command.ByeCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param byeShortcut the new shortcut"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setByeShortcut(String byeShortcut){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ByeCommand.byeShortcut \u003d byeShortcut;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getByeShortcut(){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return ByeCommand.byeShortcut;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 21,
      "-": 39,
      "laurenthg": 1
    }
  },
  {
    "path": "src/main/java/leduc/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class which represent a Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The command asked by the user will be represented by one of the subclasses of leduc.command.Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String user;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "    protected boolean callByShortcut \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of Command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command(String user ){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.user\u003duser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method that return false except for the subclass ByeCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean: True if the input string of the user is \"bye\", False if not."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Abstract method: the operation of the specified command will be implemented."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException one of the subclass of leduc.exception.DukeException could be caught in the execution of this method."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void calledByShortcut(){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        this.callByShortcut \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 5,
      "-": 39
    }
  },
  {
    "path": "src/main/java/leduc/command/DeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.DeadlinesTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a deadline task Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Allow to add a deadline task to the task list and to the data file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String deadlineShortcut \u003d \"deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of DeadlineCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeadlineCommand(String user){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow to add a deadline task to the task list and to the data file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyDeadlineDateException Exception caught when the date of the deadline task is not given."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyDeadlineException Exception caught when the description of the deadline task is not given."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws PrioritizeLimitException Exception caught when the new priority is greater than 9 or less than 0."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throws EmptyDeadlineDateException, EmptyDeadlineException, NonExistentDateException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            FileException, PrioritizeLimitException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(DeadlineCommand.deadlineShortcut.length());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(8);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(userSubstring.isBlank()){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new EmptyDeadlineException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String[] taskDescription \u003d userSubstring.split(\"/by\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskDescription[0].isBlank()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyDeadlineException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (taskDescription.length \u003d\u003d 1) { // no /by in input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyDeadlineDateException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d taskDescription[0].trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String[] prioritySplit \u003d taskDescription[1].trim().split(\"prio\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String deadlineString \u003d prioritySplit[0].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            //date format used: dd/MM/yyyy HH:mm"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            if (deadlineString.isBlank()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyDeadlineDateException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                Date d \u003d new Date(deadlineString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                DeadlinesTask newTask \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if (prioritySplit.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    newTask \u003d new DeadlinesTask(description, d);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    int priority \u003d -1 ;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    try{"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        priority \u003d Integer.parseInt(prioritySplit[1].trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    catch(Exception e){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (priority \u003c 0 || priority \u003e 9) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    newTask \u003d new DeadlinesTask(description,d,priority);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.save(tasks.getList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.display(\"\\t Got it. I\u0027ve added this task:\\n\\t   \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                        + newTask.toString() +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"\\n\\t Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getDeadlineShortcut() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return deadlineShortcut;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param deadlineShortcut the new shortcut"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setDeadlineShortcut(String deadlineShortcut) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "        DeadlineCommand.deadlineShortcut \u003d deadlineShortcut;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 31,
      "-": 55,
      "laurenthg": 23
    }
  },
  {
    "path": "src/main/java/leduc/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.NonExistentTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Delete Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String deleteShortcut \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of DeleteCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public  DeleteCommand(String user){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Delete the task from the task list and rewrite the data file without the deleted task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task to delete does not exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws NonExistentTaskException, FileException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(DeleteCommand.deleteShortcut.length() + 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(7);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        int index \u003d Integer.parseInt(userSubstring) - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        else { // the tasks exist"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Task removedTask \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.display(\"\\t Noted. I\u0027ve removed this task: \\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"\\t\\t\" + removedTask.toString() +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"\\n\\t Now you have \"+ tasks.size() +\" tasks in the list\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getDeleteShortcut() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return deleteShortcut;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param deleteShortcut the new shortcut"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setDeleteShortcut(String deleteShortcut) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "        DeleteCommand.deleteShortcut \u003d deleteShortcut;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 26,
      "-": 43
    }
  },
  {
    "path": "src/main/java/leduc/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.NonExistentTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Delete Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String doneShortcut \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of DoneCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public  DoneCommand(String user){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Change the mark of a task to done (\"[✓]\")."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task which is done does not exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws NonExistentTaskException, FileException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(DoneCommand.doneShortcut.length() + 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(5);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        int index \u003d Integer.parseInt(userSubstring) - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        else { // to change the mark, the whole file is rewritten ( probably a better way to do it)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.get(index).taskDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            //get the String with the index task marked done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.display(\"\\t Nice! I\u0027ve marked this task as done:\\n\\t \" + tasks.get(index).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getDoneShortcut() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return doneShortcut;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param doneShortcut the new shortcut"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setDoneShortcut(String doneShortcut) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "        DoneCommand.doneShortcut \u003d doneShortcut;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 27,
      "-": 40
    }
  },
  {
    "path": "src/main/java/leduc/command/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.DeadlinesTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a EditCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Allow to edit a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String editShortcut \u003d \"edit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of EditCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EditCommand(String user){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Allow to edit a task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentTaskException  Exception caught when the task to delete does not exist."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws MeaninglessException  Exception caught when the input string could not be interpreted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EmptyEventDateException Exception caught when one of the two date given does not exist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws ConflictDateException Exception thrown when the new event is in conflict with others event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws DateComparisonEventException  Exception caught when the second date is before the first one."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throws NonExistentDateException, FileException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            NonExistentTaskException, MeaninglessException, EmptyEventDateException, ConflictDateException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            DateComparisonEventException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ui.display(\"\\t Please choose the task to edit from the list by its index: \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(user);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        listCommand.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        // The user choose the task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String userEditTaskNumber \u003d ui.readCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if ( userEditTaskNumber.matches(\"\\\\d+\")){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            int index \u003d Integer.parseInt(userEditTaskNumber.trim()) - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                Task t \u003d tasks.get(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if ( t.isTodo()){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    ui.display(\"\\t Please enter the new description of the todo Task\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    t.setTask(ui.readCommand());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else{"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    ui.display(\"\\t Please choose what you want to edit (1 or 2)\\n\\t 1. The description \" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            \"\\n\\t 2. The deadline/period\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    String userEditTPart \u003d ui.readCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if ( userEditTPart.matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        int choice \u003d Integer.parseInt(userEditTPart.trim());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        if (choice \u003d\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            ui.display(\"\\t Please enter the new description of the task\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            t.setTask(ui.readCommand());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        } else if (choice \u003d\u003d 2) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            if (t.isDeadline()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                ui.display(\"\\t Please enter the new deadline of the task\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                String deadlineString \u003d ui.readCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                Date d \u003d new Date(deadlineString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                DeadlinesTask deadlinesTask \u003d (DeadlinesTask) t;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                deadlinesTask.setDeadlines(d);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            } else { //event task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                ui.display(\"\\t Please enter the new period of the task\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                String periodString \u003d ui.readCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                String[] dateString \u003d periodString.split(\" - \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                if (dateString.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                } else if (dateString[0].isBlank() || dateString[1].isBlank()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                Date date1 \u003d new Date(dateString[0]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                Date date2 \u003d new Date(dateString[1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                tasks.verifyConflictDate(date1, date2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                EventsTask eventsTask \u003d (EventsTask) t;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                eventsTask.reschedule(date1, date2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            throw new MeaninglessException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new MeaninglessException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ui.display(\"\\t The task is edited: \\n\\t \"+ (index+1) + \" \" + t.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new MeaninglessException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getEditShortcut() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return editShortcut;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param editShortcut the new shortcut"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setEditShortcut(String editShortcut) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "        EditCommand.editShortcut \u003d editShortcut;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 20,
      "laurenthg": 106
    }
  },
  {
    "path": "src/main/java/leduc/command/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a event task Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Allow to add a event task to the task list and to the data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String eventShortcut \u003d \"event\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of EventCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public  EventCommand(String user){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow to add a event task to the task list and to the data file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyEventDateException Exception caught when the period of the event task is not given by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyEventException Exception caught when the description of the event task is not given by the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentDateException Exception caught when one of the two date given does not exist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ConflictDateException Exception thrown when the new event is in conflict with others event"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws PrioritizeLimitException Exception caught when the new priority is greater than 9 or less than 0."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throws EmptyEventDateException, EmptyEventException, NonExistentDateException, FileException, ConflictDateException, PrioritizeLimitException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(EventCommand.eventShortcut.length());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(5);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(userSubstring.isBlank()){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new EmptyEventException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String[] taskDescription \u003d userSubstring.split(\"/at\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskDescription[0].isBlank()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyEventException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (taskDescription.length \u003d\u003d 1) { // no /at in input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d taskDescription[0].trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            String periodString \u003d taskDescription[1].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            //date format used: dd/MM/yyyy HH:mm - dd/MM/yyyy HH:mm"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String[] prioritySplit \u003d periodString.split(\"prio\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String[] dateString \u003d prioritySplit[0].split(\" - \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            if(dateString.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            else if(dateString[0].isBlank() || dateString[1].isBlank()){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date date1 \u003d new Date(dateString[0]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date date2 \u003d new Date(dateString[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.verifyConflictDate(date1, date2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            EventsTask newTask \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (prioritySplit.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                newTask \u003d new EventsTask(description, date1,date2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                int priority \u003d -1 ;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    priority \u003d Integer.parseInt(prioritySplit[1].trim());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                catch(Exception e){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if (priority \u003c 0 || priority \u003e 9) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                newTask \u003d new EventsTask(description,date1,date2,priority);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.display(\"\\t Got it. I\u0027ve added this task:\\n\\t   \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                    + newTask.toString() +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"\\n\\t Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getEventShortcut() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return eventShortcut;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param eventShortcut the new shortcut"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setEventShortcut(String eventShortcut) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "        EventCommand.eventShortcut \u003d eventShortcut;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 31,
      "-": 60,
      "laurenthg": 22
    }
  },
  {
    "path": "src/main/java/leduc/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.lang.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Find Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Allow to find a specific task from the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String findShortcut \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of FindCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String user){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Finds the index of the maximum value in the arraylist"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param scores ArrayList\u003cDouble\u003e containing relevance scores for all tasks in the list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return returns index of the index of the maximum score in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public int findMaxIndex(ArrayList\u003cDouble\u003e scores){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //index of scores correspond to tasks in TaskList. To preserve index, processed scores are assigned a null Value"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        double nullDouble \u003d -99.0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        int nullInt \u003d -99;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        double max \u003d 0.0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        int max_index \u003d nullInt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        for (int j \u003d 0; j \u003c scores.size(); j++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(scores.get(j) \u003d\u003d 0.0){//tasks with no common characters will be flagged as null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                scores.set(j, nullDouble);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if (scores.get(j) \u003e max) {//update max"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                max \u003d scores.get(j);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                max_index \u003d j;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return max_index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Compares each task description with the user query, generates a score from 0-1 based on how close the match is."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param find String that contains the user\u0027s query"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return returns an ArrayList containing relevance scores for each task description"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public ArrayList\u003cDouble\u003e generateRelevanceScores(String find, TaskList tasks){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        ArrayList\u003cDouble\u003e scores \u003d new ArrayList\u003cDouble\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        double relevanceScore \u003d 0.0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            double numMatches \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            double shortestStringLength \u003d Math.min(tasks.get(i).getTask().length(), find.length());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            double longestStringLength \u003d Math.max(tasks.get(i).getTask().length(), find.length());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            //use nested for loop to compare query and task description elementwise"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            for (int j \u003d 0; j \u003c shortestStringLength; j++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                for (int k \u003d 0; k \u003c tasks.get(i).getTask().length(); k++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    //compare characters, if they match, increment nummatches then break"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    if (find.charAt(j) \u003d\u003d tasks.get(i).getTask().charAt(k)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                        numMatches +\u003d 1.0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            relevanceScore \u003d numMatches / longestStringLength;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            scores.add(relevanceScore);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return scores;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allow to find top relevant tasks from the task list by utilizing fuzzy matching algorithm."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EmptyArgumentException Exception caught when there is no argument"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyArgumentException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            userSubstring \u003d user.substring(FindCommand.findShortcut.length());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            userSubstring \u003d user.substring(4);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if(userSubstring.isBlank()){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String find \u003d user.substring(FindCommand.findShortcut.length()+1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        ArrayList\u003cDouble\u003e scores;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //populate list of relevance scores"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        scores \u003d generateRelevanceScores(find, tasks);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //Add tasks to \"String result\" in the order of relevance."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        for(int i \u003d 0; i \u003c scores.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            double nullDouble \u003d -99.0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            //find the index of the task that is most similar to the user query"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            int max_index \u003d findMaxIndex(scores);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(max_index \u003e nullDouble) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                result +\u003d tasks.displayOneElementList(max_index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                //To preserve indices, previously sorted scores are replaced with a null value"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                scores.set(max_index, nullDouble);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            else{//all tasks are sorted"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.display(\"\\t There is no matching tasks in your list\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            ui.display(\"\\t Here are the matching tasks in your list:\\n\" + result);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getFindShortcut() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return findShortcut;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param findShortcut the new shortcut"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setFindShortcut(String findShortcut) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "        FindCommand.findShortcut \u003d findShortcut;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 20,
      "rshah918": 70,
      "-": 31,
      "laurenthg": 17
    }
  },
  {
    "path": "src/main/java/leduc/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": " * Display every command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class HelpCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String helpShortcut \u003d \"help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param user user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public HelpCommand(String user) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display every command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showHelp();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getHelpShortcut() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return helpShortcut;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param helpShortcut the new shortcut"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setHelpShortcut(String helpShortcut) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        HelpCommand.helpShortcut \u003d helpShortcut;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 50
    }
  },
  {
    "path": "src/main/java/leduc/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a List Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Allow to display all the tasks contained in the tasks list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String listShortcut \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public  ListCommand(String user){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow to displau all the tasks contained in the tasks list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tasks.size() !\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showList(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.display(\"\\t There is any task yet \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getListShortcut() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return listShortcut;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param listShortcut the new shortcut"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setListShortcut(String listShortcut) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ListCommand.listShortcut \u003d listShortcut;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 18,
      "-": 35
    }
  },
  {
    "path": "src/main/java/leduc/command/PostponeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.DeadlinesTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents Postpone command which postpone the deadline of a deadline task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PostponeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String postponeShortcut \u003d \"postpone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of PostponeCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public PostponeCommand(String user){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to postpone the deadline of a deadline task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task does not exist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DeadlineTypeException Exception caught when the task is not a deadline task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file doesn\u0027t exist or cannot be created or cannot be opened."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyDeadlineDateException Exception caught when the date of the deadline task is not given."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PostponeDeadlineException Exception caught when the new deadline is before the old deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws NonExistentTaskException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            DeadlineTypeException, FileException, EmptyDeadlineDateException, NonExistentDateException,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            PostponeDeadlineException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(PostponeCommand.postponeShortcut.length() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(9);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String[] postponeString \u003d userSubstring.split(\"/by\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (postponeString.length \u003d\u003d 1) { // no /by in input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyDeadlineDateException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d Integer.parseInt(postponeString[0].trim()) - 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        catch(Exception e){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        else { // the tasks exist"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Task postponeTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!postponeTask.isDeadline()){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DeadlineTypeException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            DeadlinesTask postponeDeadlineTask \u003d (DeadlinesTask) postponeTask;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date d \u003d new Date(postponeString[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            postponeDeadlineTask.postponeDeadline(d);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.display(\"\\t Noted. I\u0027ve postponed this task: \\n\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"\\t\\t \"+postponeDeadlineTask.getTag() + postponeDeadlineTask.getMark() + \" \" + postponeDeadlineTask.getTask()+"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" by:\" + postponeDeadlineTask.getDeadlines() + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getPostponeShortcut() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return postponeShortcut;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param postponeShortcut the new shortcut"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setPostponeShortcut(String postponeShortcut) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "        PostponeCommand.postponeShortcut \u003d postponeShortcut;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 25,
      "-": 68,
      "laurenthg": 3
    }
  },
  {
    "path": "src/main/java/leduc/command/PrioritizeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a prioritize command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class PrioritizeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static String prioritizeShortcut \u003d \"prioritize\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.command.PrioritizeCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public PrioritizeCommand(String user){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Execution of leduc.command.PrioritizeCommand: allows to set the priority of a task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task to delete does not exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws PrioritizeFormatException Exception caught when the format of a prioritize command is not respected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws PrioritizeLimitException Exception caught when the new priority is not an int or is greater than 9 or less than 0."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EmptyArgumentException Exception caught when there is no argument"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws FileException,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            NonExistentTaskException, PrioritizeFormatException, PrioritizeLimitException, EmptyArgumentException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String[] commandString \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String subString \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            subString \u003d user.substring(PrioritizeCommand.prioritizeShortcut.length()).trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            subString \u003d user.substring(10).trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (subString.isBlank()){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        commandString \u003d subString.split(\"prio\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (commandString.length\u003d\u003d1){ // \"prio\" is not in the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new PrioritizeFormatException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(commandString[0].trim()) - 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (taskIndex \u003e tasks.size() - 1 || taskIndex \u003c 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        int priority \u003d -1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            priority \u003d Integer.parseInt(commandString[1].trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (Exception e ){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (priority \u003c 0 || priority \u003e 9) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Task t \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        t.setPriority(priority);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ui.display(\"\\t Got it. I\u0027ve set the priority of this task:\\n\\t   \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        + t.toString()+ \" to \" + t.getPriority());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Returns is false for a leduc.command.PrioritizeCommand."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param prioritizeShortcut the new shortcut"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void setPrioritizeShortcut(String prioritizeShortcut){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand.prioritizeShortcut \u003d prioritizeShortcut;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static String getPrioritizeShortcut(){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return PrioritizeCommand.prioritizeShortcut;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 100
    }
  },
  {
    "path": "src/main/java/leduc/command/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Represents a Remind Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Allow to remind user of upcoming tasks in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String remindShortcut \u003d \"remind\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of FindCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public RemindCommand(String user){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Returns a boolean false as it is a remind command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return a boolean false."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allow to remind user of upcoming tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasklist \u003d tasks.filterTasks(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e extractedTodo \u003d tasks.extractTodo(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TaskList sortedTasks \u003d new TaskList(tasks.sort(filteredTasklist, extractedTodo));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        if (sortedTasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            for (int i \u003d 0; i \u003c sortedTasks.size(); i++) {//prints first 3 tasks in the sorted taskList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                if (i \u003c 3) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    result +\u003d sortedTasks.displayOneElementList(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            System.out.println(result);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            ui.display(\"\\t There is no upcoming tasks in your list\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getRemindShortcut() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return remindShortcut;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param remindShortcut the new shortcut"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setRemindShortcut(String remindShortcut) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "        RemindCommand.remindShortcut \u003d remindShortcut;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 21,
      "rshah918": 52,
      "laurenthg": 4
    }
  },
  {
    "path": "src/main/java/leduc/command/RescheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents Reschedule command which reschedule the period of a event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String rescheduleShortcut \u003d \"reschedule\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of RescheduleCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public RescheduleCommand(String user){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to reschedule the period of a event task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyEventDateException Exception caught when the period of the event task is not given by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task does not exist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTypeException Exception caught when the task is not a event task while it should be."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DateComparisonEventException Exception caught when the second date is before the first one."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file doesn\u0027t exist or cannot be created or cannot be opened."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws ConflictDateException Exception thrown when the new event is in conflict with others event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyEventDateException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            NonExistentTaskException, EventTypeException, NonExistentDateException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "            DateComparisonEventException, FileException, ConflictDateException, EmptyArgumentException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            userSubstring \u003d user.substring(RescheduleCommand.rescheduleShortcut.length());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            userSubstring \u003d user.substring(10);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(userSubstring.isBlank()){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String[] rescheduleString \u003d userSubstring.split(\"/at\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (rescheduleString.length \u003d\u003d 1) { // no /by in input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d Integer.parseInt(rescheduleString[0].trim()) - 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        catch(Exception e){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        else { // the tasks exist"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Task rescheduleTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!rescheduleTask.isEvent()){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTypeException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsTask rescheduleEventTask \u003d (EventsTask) rescheduleTask;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] dateString \u003d rescheduleString[1].split(\" - \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            if(dateString.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            else if(dateString[0].isBlank() || dateString[1].isBlank()){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date date1 \u003d new Date(dateString[0]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date date2 \u003d new Date(dateString[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.verifyConflictDate(date1, date2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            rescheduleEventTask.reschedule(date1,date2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.display(\"\\t Noted. I\u0027ve rescheduled this task: \\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"\\t\\t \"+rescheduleEventTask.getTag() + rescheduleEventTask.getMark() + \" \" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    rescheduleEventTask.getTask()+ \" at:\" + rescheduleEventTask.getDateFirst() +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" - \" + rescheduleEventTask.getDateSecond() + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getRescheduleShortcut() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return rescheduleShortcut;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param rescheduleShortcut the new shortcut"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setRescheduleShortcut(String rescheduleShortcut) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "        RescheduleCommand.rescheduleShortcut \u003d rescheduleShortcut;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 27,
      "-": 76,
      "laurenthg": 8
    }
  },
  {
    "path": "src/main/java/leduc/command/SetWelcomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class SetWelcomeCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public SetWelcomeCommand(String user){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rshah918"
        },
        "content": "       super(user);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String setWelcomeShortcut \u003d \"setwelcome\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allow to change the welcome message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws FileException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        FileWriter fileWriter \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String filepath \u003d System.getProperty(\"user.dir\")+ \"/data/welcome.txt\";//get location of welcome message file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        File file \u003d Ui.openFile(filepath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //open fileWriter object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String welcomeMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                //removes the first word of the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                welcomeMessage \u003d String.join(\" \", Arrays.copyOfRange(user.split(\" \"), 1, user.split( \" \").length));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                fileWriter.write(welcomeMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            finally{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                fileWriter.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ui.display(\"\\t The welcome message is edited: \" + welcomeMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getSetWelcomeShortcut() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return setWelcomeShortcut;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param setWelcomeShortcut the new shortcut"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setSetWelcomeShortcut(String setWelcomeShortcut) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "        SetWelcomeCommand.setWelcomeShortcut \u003d setWelcomeShortcut;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 21,
      "rshah918": 43,
      "laurenthg": 6
    }
  },
  {
    "path": "src/main/java/leduc/command/ShortcutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.DuplicationShortcutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.MeaninglessException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class ShortcutCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public ShortcutCommand(String user){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static HashSet\u003cString\u003e setShortcut \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String[] userCommand \u003d user.split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String newShortcut\u003d\"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if (userCommand.length \u003e\u003d 2){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(userCommand.length \u003e\u003d 3){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d userCommand[2].trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"Please enter a shortcut for \" + userCommand[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(setShortcut.contains(newShortcut)){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new DuplicationShortcutException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setOneShortcut(userCommand[1], newShortcut);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The shortcut for \" + userCommand[1] +\" has been set\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for bye is \" + ByeCommand.getByeShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"bye\", newShortcut);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for list is \" + ListCommand.getListShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"list\", newShortcut);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for help is \" + HelpCommand.getHelpShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"help\", newShortcut);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for done is \" + DoneCommand.getDoneShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"done\", newShortcut);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for find is \" + FindCommand.getFindShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"find\", newShortcut);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for delete is \" + DeleteCommand.getDeleteShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"delete\", newShortcut);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for deadline is \" + DeadlineCommand.getDeadlineShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"deadline\", newShortcut);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for event is \" + EventCommand.getEventShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"event\", newShortcut);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for todo is \" + TodoCommand.getTodoShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"todo\", newShortcut);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for edit is \" + EditCommand.getEditShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"edit\", newShortcut);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for postpone is \" + PostponeCommand.getPostponeShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"postpone\", newShortcut);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for snooze is \" + SnoozeCommand.getSnoozeShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"snooze\", newShortcut);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for reschedule is \" + RescheduleCommand.getRescheduleShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"reschedule\", newShortcut);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for remind is \" + RemindCommand.getRemindShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"remind\", newShortcut);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for sort is \" + SortCommand.getSortShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"sort\", newShortcut);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for setWelcome is \" + SetWelcomeCommand.getSetWelcomeShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"setwelcome\", newShortcut);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"The precedent shortcut for setWelcome is \" + ShowCommand.getShowShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"show\", newShortcut);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ui.display(\"The precedent shortcut for prioritize is \" + PrioritizeCommand.getPrioritizeShortcut() +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } while(setShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            setOneShortcut(\"prioritize\", newShortcut);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.display(\"All shortcut has been set\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "        storage.saveConfig();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setOneShortcut(String commandName, String shortcutName) throws MeaninglessException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "        switch (commandName){"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"bye\" :"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(ByeCommand.getByeShortcut());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ByeCommand.setByeShortcut(shortcutName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"list\" :"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(ListCommand.getListShortcut());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ListCommand.setListShortcut(shortcutName);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"help\" :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(HelpCommand.getHelpShortcut());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "                HelpCommand.setHelpShortcut(shortcutName);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"done\" :"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(DoneCommand.getDoneShortcut());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huangje"
        },
        "content": "                DoneCommand.setDoneShortcut(shortcutName);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"find\" :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(FindCommand.getFindShortcut());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huangje"
        },
        "content": "                FindCommand.setFindShortcut(shortcutName);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"delete\" :"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(DeleteCommand.getDeleteShortcut());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "                DeleteCommand.setDeleteShortcut(shortcutName);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"deadline\" :"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(DeadlineCommand.getDeadlineShortcut());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huangje"
        },
        "content": "                DeadlineCommand.setDeadlineShortcut(shortcutName);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"event\" :"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(EventCommand.getEventShortcut());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huangje"
        },
        "content": "                EventCommand.setEventShortcut(shortcutName);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"todo\" :"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(TodoCommand.getTodoShortcut());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huangje"
        },
        "content": "                TodoCommand.setTodoShortcut(shortcutName);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"edit\" :"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(EditCommand.getEditShortcut());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huangje"
        },
        "content": "                EditCommand.setEditShortcut(shortcutName);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"postpone\" :"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(PostponeCommand.getPostponeShortcut());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huangje"
        },
        "content": "                PostponeCommand.setPostponeShortcut(shortcutName);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"snooze\" :"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(SnoozeCommand.getSnoozeShortcut());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huangje"
        },
        "content": "                SnoozeCommand.setSnoozeShortcut(shortcutName);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"reschedule\" :"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(RescheduleCommand.getRescheduleShortcut());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huangje"
        },
        "content": "                RescheduleCommand.setRescheduleShortcut(shortcutName);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"remind\" :"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(RemindCommand.getRemindShortcut());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huangje"
        },
        "content": "                RemindCommand.setRemindShortcut(shortcutName);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"sort\" :"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(SortCommand.getSortShortcut());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huangje"
        },
        "content": "                SortCommand.setSortShortcut(shortcutName);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"setwelcome\" :"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(SetWelcomeCommand.getSetWelcomeShortcut());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huangje"
        },
        "content": "                SetWelcomeCommand.setSetWelcomeShortcut(shortcutName);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"show\":"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(ShowCommand.getShowShortcut());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShowCommand.setShowShortcut(shortcutName);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            case \"prioritize\" :"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                setShortcut.remove(PrioritizeCommand.getPrioritizeShortcut());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                PrioritizeCommand.setPrioritizeShortcut(shortcutName);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huangje"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new MeaninglessException();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static HashSet\u003cString\u003e getSetShortcut(){"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return setShortcut;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void initializedSetShortcut(){"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"bye\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"list\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"done\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"edit\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"deadline\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"event\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"find\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"help\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"postpone\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"remind\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"reschedule\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"setwelcome\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"snooze\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"sort\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"todo\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"delete\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setShortcut.add(\"show\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 259,
      "laurenthg": 11
    }
  },
  {
    "path": "src/main/java/leduc/command/ShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.MeaninglessException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.NonExistentDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.WrongParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.DeadlinesTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String showShortcut \u003d \"show\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of Command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public ShowCommand(String user) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ArrayList\u003cTask\u003e allTaskHavingDate \u003d tasks.filterTasks(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ArrayList\u003cTask\u003e showTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        Boolean multiStep \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(ShowCommand.showShortcut.length()).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(4).trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String[] userSubSubString \u003d userSubstring.split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(userSubSubString.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "            multiStep \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(userSubSubString[0].matches(\"day\")){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(multiStep){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"please enter the day as DD/MM/YYYY\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "                date \u003d ui.readCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "                date \u003d userSubSubString[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "            LocalDate d1 \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "                d1 \u003d LocalDate.parse(date.trim(), formatter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }catch(Exception e){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "            for(Task t : allTaskHavingDate){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(t.isDeadline()){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(((DeadlinesTask)t).getDeadlines().getD().toLocalDate().isEqual(d1)){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        showTaskList.add(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(t.isEvent()){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(((EventsTask)t).getDateFirst().getD().toLocalDate().isEqual(d1)){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        showTaskList.add(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(userSubSubString[0].matches(\"dayofweek\")){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "            int dayOfWeekInt \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String dayOfWeek;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(multiStep){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"please enter the day of the ween as monday, tuesday, wednesday, thursday, friday, saturday, sunday\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dayOfWeek \u003d ui.readCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dayOfWeek \u003d userSubSubString[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "            switch(dayOfWeek){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "                case \"monday\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    dayOfWeekInt \u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "                case \"tuesday\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    dayOfWeekInt \u003d 2;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "                case \"wednesday\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    dayOfWeekInt \u003d 3;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "                case \"thursday\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    dayOfWeekInt \u003d 4;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "                case \"friday\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    dayOfWeekInt \u003d 5;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "                case \"saturday\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    dayOfWeekInt \u003d 6;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "                case \"sunday\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    dayOfWeekInt \u003d 7;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    throw new MeaninglessException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huangje"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huangje"
        },
        "content": "            LocalDate dateFindDayOfWeek \u003d dateNow.plusDays(1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": "            while(dateFindDayOfWeek.getDayOfWeek().getValue()!\u003d dayOfWeekInt){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dateFindDayOfWeek \u003d dateFindDayOfWeek.plusDays(1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huangje"
        },
        "content": "            for(Task t : allTaskHavingDate){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(t.isDeadline()){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(((DeadlinesTask)t).getDeadlines().getD().toLocalDate().isEqual(dateFindDayOfWeek)){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        showTaskList.add(t);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(t.isEvent()){"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(((EventsTask)t).getDateFirst().getD().toLocalDate().isEqual(dateFindDayOfWeek)){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        showTaskList.add(t);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(userSubSubString[0].matches(\"today\")){"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "            for(Task t : allTaskHavingDate){"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(t.isDeadline()){"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(((DeadlinesTask)t).getDeadlines().getD().toLocalDate().isEqual(dateNow)){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        showTaskList.add(t);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(t.isEvent()){"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(((EventsTask)t).getDateFirst().getD().toLocalDate().isEqual(dateNow)){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        showTaskList.add(t);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(userSubSubString[0].matches(\"week\")){"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "            for (int i \u003d 0; i \u003c 7; i++){"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "                LocalDate dateWeek \u003d dateNow.plusDays(i);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "                for(Task t : allTaskHavingDate){"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(t.isDeadline()){"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        if(((DeadlinesTask)t).getDeadlines().getD().toLocalDate().isEqual(dateNow)){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            showTaskList.add(t);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(t.isEvent()){"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        if(((EventsTask)t).getDateFirst().getD().toLocalDate().isEqual(dateNow)){"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            showTaskList.add(t);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (userSubSubString[0].matches(\"month\")){"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String date;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(multiStep){"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"please enter the month as MM/YYYY\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huangje"
        },
        "content": "                date \u003d ui.readCommand();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huangje"
        },
        "content": "                date \u003d userSubSubString[1];"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String[] dateSplit \u003d date.trim().split(\"/\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(dateSplit.length \u003d\u003d 1 || dateSplit[0].isBlank()){"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": "            int dateMonth \u003d 0;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "            int dateYear \u003d 0;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huangje"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dateMonth \u003d Integer.parseInt(dateSplit[0]);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dateYear \u003d Integer.parseInt(dateSplit[1]);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }catch(Exception e){"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(dateMonth \u003c1 || dateMonth \u003e 12){"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huangje"
        },
        "content": "            for(Task t : allTaskHavingDate){"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(t.isDeadline()){"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(((DeadlinesTask)t).getDeadlines().getD().getMonthValue() \u003d\u003d dateMonth \u0026\u0026 ((DeadlinesTask)t).getDeadlines().getD().getYear() \u003d\u003d dateYear){"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        showTaskList.add(t);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(t.isEvent()){"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(((EventsTask)t).getDateFirst().getD().getMonthValue() \u003d\u003d dateMonth \u0026\u0026 ((EventsTask)t).getDateFirst().getD().getYear() \u003d\u003d dateYear){"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        showTaskList.add(t);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (userSubSubString[0].matches(\"year\")){"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String date;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(multiStep){"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.display(\"please enter the year as YYYY\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huangje"
        },
        "content": "                date \u003d ui.readCommand();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huangje"
        },
        "content": "                date \u003d userSubSubString[1];"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huangje"
        },
        "content": "            int dateYear \u003d 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huangje"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dateYear \u003d Integer.parseInt(date);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }catch(Exception e){"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huangje"
        },
        "content": "            for(Task t : allTaskHavingDate){"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(t.isDeadline()){"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(((DeadlinesTask)t).getDeadlines().getD().getYear() \u003d\u003d dateYear){"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        showTaskList.add(t);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(t.isEvent()){"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(((EventsTask)t).getDateFirst().getD().getYear() \u003d\u003d dateYear){"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        showTaskList.add(t);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new WrongParameterException();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showNotCompeteList(showTaskList, tasks);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getShowShortcut() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return showShortcut;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param showShortcut the new shortcut"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setShowShortcut(String showShortcut) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ShowCommand.showShortcut \u003d showShortcut;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 254
    }
  },
  {
    "path": "src/main/java/leduc/command/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.DeadlinesTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents Snooze command which snooze the deadline of a deadline task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String snoozeShortcut \u003d \"snooze\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of SnoozeCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user user String which represent the input string of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public SnoozeCommand(String user){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to snooze the deadline of a deadline task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task does not exist."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DeadlineTypeException Exception caught when the task is not a deadline task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file doesn\u0027t exist or cannot be created or cannot be opened."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws NonExistentTaskException, DeadlineTypeException, FileException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(SnoozeCommand.snoozeShortcut.length() + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(7);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "        int index \u003d Integer.parseInt(userSubstring) - 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        else { // the tasks exist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Task snoozeTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!snoozeTask.isDeadline()){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DeadlineTypeException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            DeadlinesTask snoozeDeadlineTask \u003d (DeadlinesTask) snoozeTask;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            snoozeDeadlineTask.snoozeDeadline();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.display(\"\\t Noted. I\u0027ve snoozed this task: \\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"\\t\\t \"+snoozeDeadlineTask.getTag() + snoozeDeadlineTask.getMark() + \" \" + snoozeDeadlineTask.getTask()+"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" by:\" + snoozeDeadlineTask.getDeadlines() + \"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getSnoozeShortcut() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return snoozeShortcut;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param snoozeShortcut the new shortcut"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setSnoozeShortcut(String snoozeShortcut) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "        SnoozeCommand.snoozeShortcut \u003d snoozeShortcut;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 24,
      "-": 53
    }
  },
  {
    "path": "src/main/java/leduc/command/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.MeaninglessException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a sort command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Allows to sort the task by date or description or priority"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String sortShortcut \u003d \"sort\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.command.SortCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public SortCommand(String user){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Execution of leduc.command.SortCommand: Allows to sort the task list ( by description or by date or ny priority)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws MeaninglessException  Exception caught when the input string could not be interpreted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EmptyArgumentException Exception caught when there is no argument"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws FileException, MeaninglessException, EmptyArgumentException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(SortCommand.sortShortcut.length());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(4);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String sort \u003d userSubstring.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(sort.isBlank()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (sort.equals(\"date\")){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            ArrayList\u003cTask\u003e filteredTasklist \u003d tasks.filterTasks(tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            ArrayList\u003cTask\u003e extractedTodo \u003d tasks.extractTodo(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            // The todo task list is sort by description"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            extractedTodo.sort(Comparator.comparing(Task::getTask));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.setList(tasks.sort(filteredTasklist, extractedTodo));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (sort.equals(\"priority\")){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.getList().sort(Comparator.comparingInt(Task::getPriority));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (sort.equals(\"description\")){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.getList().sort(Comparator.comparing(Task::getTask));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new MeaninglessException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ui.display(\"\\t This is the new task list order: \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(user);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "        listCommand.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getSortShortcut() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return sortShortcut;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param sortShortcut the new shortcut"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setSortShortcut(String sortShortcut) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "        SortCommand.sortShortcut \u003d sortShortcut;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 31,
      "laurenthg": 58
    }
  },
  {
    "path": "src/main/java/leduc/command/StatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class StatsCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private static String StatsShortcut \u003d \"stats\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public StatsCommand(String user){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allow to see statistics on their taskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param taskList leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        double numComplete \u003d 0.0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        double numTasks \u003d taskList.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        float percentComplete;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        double numTodos \u003d 0.0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        double numDeadlines \u003d 0.0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        double numEvents \u003d 0.0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        double numIncomplete \u003d 0.0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        for (int i \u003d 0 ;i\u003c taskList.size() ; i++ ){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(task.getMark().equals(\"[✓]\")){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numComplete++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            else{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numIncomplete++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(task.isDeadline()){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numDeadlines++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            else if(task.isEvent()){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numEvents++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            else if(task.isTodo()){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numTodos++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentComplete \u003d (float) (numComplete/numTasks) * 100;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String message \u003d \"Here are some statistics about your task list: \\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks: \" + numTasks + \"\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of Todo\u0027s : \" + numTodos + \"\\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of Events: \" + numEvents + \"\\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of Deadlines: \" + numDeadlines + \"\\n\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of Uncompleted Tasks: \" + numIncomplete + \"\\n\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of Completed Tasks: \" + numComplete + \"\\n\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent Complete: \" + percentComplete + \"%\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                ui.display(message);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public static String getStatsShortcut() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return StatsShortcut;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param StatsShortcut the new shortcut"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public static void setStatsShortcut(String StatsShortcut) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        StatsCommand.StatsShortcut \u003d StatsShortcut;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 75
    }
  },
  {
    "path": "src/main/java/leduc/command/TodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.EmptyTodoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.PrioritizeLimitException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TodoTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Todo Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Allows to add the todo task in the tasks list and the data file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String todoShortcut \u003d \"todo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of TodoCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public  TodoCommand(String user){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow to add the task in the tasks list and the data file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyTodoException Exception caught when the description of the todo list is not given by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws PrioritizeLimitException Exception caught when the new priority is greater than 9 or less than 0."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyTodoException, FileException, PrioritizeLimitException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(TodoCommand.todoShortcut.length());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(4);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String[] prioritySplit \u003d userSubstring.split(\"prio\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoTask newTask \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        int priority \u003d -1 ;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (prioritySplit.length !\u003d 1 \u0026\u0026 prioritySplit[1].trim().matches(\"\\\\d+\")){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            priority \u003d Integer.parseInt(prioritySplit[1].trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (priority \u003c 0 || priority \u003e 9) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (prioritySplit[0].isBlank()){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new EmptyTodoException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            newTask \u003d new TodoTask(prioritySplit[0],priority );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else { // The description of the todo task could contain \"prio\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            // For exmaple, \"todo prio\" create a todo task with description prio and priority 5"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if (userSubstring.isBlank()){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new EmptyTodoException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            newTask \u003d new TodoTask(userSubstring.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ui.display(\"\\t Got it. I\u0027ve added this task:\\n\\t   \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "                + newTask.toString() +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                \"\\n\\t Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getTodoShortcut() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return todoShortcut;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param todoShortcut the new shortcut"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setTodoShortcut(String todoShortcut) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "        TodoCommand.todoShortcut \u003d todoShortcut;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 27,
      "-": 37,
      "laurenthg": 24
    }
  },
  {
    "path": "src/main/java/leduc/exception/DuplicationShortcutException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": " * Thrown when the shortcut name already exists"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class DuplicationShortcutException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of leduc.exception.DuplicationShortcutException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public DuplicationShortcutException(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Tell the user that the shortcut name already exist"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return \"\\t DuplicationShortcutException:\\n\\t\\t ☹ OOPS!!! The shortcut already exists\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 23
    }
  },
  {
    "path": "src/main/java/leduc/exception/EmptyArgumentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": " * Exception when there is no argument"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class EmptyArgumentException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of leduc.exception.EmptyArgumentException"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public EmptyArgumentException(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Tell the user that the tasks chosen should be a deadline task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return \"\\t EmptyArgumentException:\\n\\t\\t ☹ OOPS!!! There should have an argument\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 23
    }
  },
  {
    "path": "src/main/java/leduc/exception/PrioritizeFormatException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represent a exception when the format of a prioritize command is not respected."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class PrioritizeFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.exception.PrioritizeFormatException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public PrioritizeFormatException(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Provide the prioritize format to respect to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return \"\\t PrioritizeFormatException:\\n\\t\\t ☹ OOPS!!! Please respect the prioritize command format\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                \"\\n\\t\\t\\t prioritize INDEX prio INDEX\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 23
    }
  },
  {
    "path": "src/main/java/leduc/exception/PrioritizeLimitException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represent a exception when the new priority is not an int or is greater than 9 or less than 0."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class PrioritizeLimitException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.exception.PrioritizeLimitException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public PrioritizeLimitException(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Tells the users that priority should be an int greater than or equal to 0 and less than or equal than 9."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return \"\\t PrioritizeLimitException:\\n\\t\\t ☹ OOPS!!! The priority of a task should be an int greater than or equal to  0 and less than or equal to 9.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 22
    }
  },
  {
    "path": "src/main/java/leduc/exception/WrongParameterException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class WrongParameterException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of leduc.exception.PostponeDeadlineException"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public WrongParameterException(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Tell the user that the new deadline should not be before the old one."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return \"\\t WrongParameterException:\\n\\t\\t ☹ OOPS!!! The parameters are wrong\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 19
    }
  },
  {
    "path": "src/main/java/leduc/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.MeaninglessException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private File configFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.storage.Storage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file String representing the path of the file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param configFile String representing the path of the file storing the shortcut"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public Storage(String file, String configFile) throws FileException, MeaninglessException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.file \u003d new File(file);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            this.file.createNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "        this.configFile \u003d new File(configFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(this.configFile.createNewFile()){ //if file exist, return false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "                saveConfig();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "                loadConfig();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * read the file and write all the task to an array of task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * if the file is empty, the array is empty too"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return an array of task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException thrown when there is a reading error of the file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cTask\u003e load() throws FileException { // load the initial data file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner sc \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            sc \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] tokens \u003d line.split(\"//\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            int priority \u003d -1 ;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (tokens[0]){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                case \"T\" :"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (tokens.length \u003d\u003d3 ){ // priority not specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        tasks.add(new TodoTask(tokens[2],tokens[1].trim()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        priority \u003d  Integer.parseInt(tokens[3].trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        if (priority \u003c 0 || priority \u003e 9) { // the priority is set by default to 5"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            tasks.add(new TodoTask(tokens[2], tokens[1].trim()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            tasks.add(new TodoTask(tokens[2], tokens[1].trim(),priority));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                case \"D\" :"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (tokens.length \u003d\u003d4 ){ // priority not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        tasks.add(new DeadlinesTask(tokens[2],tokens[1].trim(), new Date(LocalDateTime.parse(tokens[3], formatter))));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        priority \u003d  Integer.parseInt(tokens[4].trim());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        if (priority \u003c 0 || priority \u003e 9) { // the priority is set by default to 5"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            tasks.add(new DeadlinesTask(tokens[2],tokens[1].trim(), new Date(LocalDateTime.parse(tokens[3], formatter))));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            tasks.add(new DeadlinesTask(tokens[2],tokens[1].trim(), new Date(LocalDateTime.parse(tokens[3], formatter)),priority));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (tokens.length \u003d\u003d5 ){ // priority not specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        tasks.add(new EventsTask(tokens[2], tokens[1].trim(), new Date(LocalDateTime.parse(tokens[3], formatter)), new Date(LocalDateTime.parse(tokens[4], formatter))));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        priority \u003d  Integer.parseInt(tokens[5].trim());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        if (priority \u003c 0 || priority \u003e 9) { // the priority is set by default to 5"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            tasks.add(new EventsTask(tokens[2], tokens[1].trim(), new Date(LocalDateTime.parse(tokens[3], formatter)), new Date(LocalDateTime.parse(tokens[4], formatter))));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            tasks.add(new EventsTask(tokens[2], tokens[1].trim(), new Date(LocalDateTime.parse(tokens[3], formatter)), new Date(LocalDateTime.parse(tokens[4], formatter)),priority));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * write all task to the files"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks all the tasks that have to be written to the file"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException thrown when there is writing problem to the files"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e tasks) throws FileException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        FileWriter fileWriter \u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            fileWriter \u003d new FileWriter(this.file);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                for (Task task : tasks){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (task.isTodo()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        fileWriter.write(\"T//\"+ task.getMark() +\"//\" + task.getTask() + \"//\" + task.getPriority() + \"\\n\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (task.isDeadline()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        fileWriter.write(\"D//\"+ task.getMark() +\"//\" + task.getTask() + \"//\" + ((DeadlinesTask) task).getDeadlines().toString()+ \"//\" + task.getPriority() +\"\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (task.isEvent()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        fileWriter.write(\"E//\"+ task.getMark() +\"//\" + task.getTask() + \"//\" + ((EventsTask) task).getDateFirst().toString() + \"//\" + ((EventsTask) task).getDateSecond().toString() + \"//\" + task.getPriority() + \"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                fileWriter.close();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        catch(IOException e){"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void saveConfig() throws FileException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "        FileWriter fileWriter \u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "            fileWriter \u003d new FileWriter(this.configFile);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"bye:\" + ByeCommand.getByeShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(ByeCommand.getByeShortcut());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"list:\" + ListCommand.getListShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(ListCommand.getListShortcut());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"help:\" + HelpCommand.getHelpShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(HelpCommand.getHelpShortcut());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"done:\" + DoneCommand.getDoneShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(DoneCommand.getDoneShortcut());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"find:\" + FindCommand.getFindShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(FindCommand.getFindShortcut());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"delete:\" + DeleteCommand.getDeleteShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(DeleteCommand.getDeleteShortcut());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"deadline:\" + DeadlineCommand.getDeadlineShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(DeadlineCommand.getDeadlineShortcut());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"event:\" + EventCommand.getEventShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(EventCommand.getEventShortcut());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"todo:\" + TodoCommand.getTodoShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(TodoCommand.getTodoShortcut());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"edit:\" + EditCommand.getEditShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(EditCommand.getEditShortcut());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"postpone:\" + PostponeCommand.getPostponeShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(PostponeCommand.getPostponeShortcut());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"snooze:\" + SnoozeCommand.getSnoozeShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(SnoozeCommand.getSnoozeShortcut());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"reschedule:\" + RescheduleCommand.getRescheduleShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(RescheduleCommand.getRescheduleShortcut());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"remind:\" + RemindCommand.getRemindShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(RemindCommand.getRemindShortcut());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"sort:\" + SortCommand.getSortShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(SortCommand.getSortShortcut());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"setwelcome:\" + SetWelcomeCommand.getSetWelcomeShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(SetWelcomeCommand.getSetWelcomeShortcut());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                fileWriter.write(\"prioritize:\" + PrioritizeCommand.getPrioritizeShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(PrioritizeCommand.getPrioritizeShortcut());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }finally {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.close();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }catch(IOException e){"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void loadConfig() throws FileException, MeaninglessException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huangje"
        },
        "content": "        Scanner sc \u003d null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huangje"
        },
        "content": "            sc \u003d new Scanner(this.configFile);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huangje"
        },
        "content": "        while(sc.hasNext()){"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String commandShortcut \u003d sc.nextLine();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String[] commandShortcutSplit \u003d commandShortcut.split(\":\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ShortcutCommand.setOneShortcut(commandShortcutSplit[0].trim(), commandShortcutSplit[1].trim());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 77,
      "-": 90,
      "laurenthg": 43
    }
  },
  {
    "path": "src/main/java/leduc/task/DeadlinesTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.PostponeDeadlineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a deadline Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlinesTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tag; // [D]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date deadlines;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.DeadlinesTask. The task is not done by default."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * And the priority is 5 by default."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param deadlines the deadline of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeadlinesTask(String task, Date deadlines){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tag \u003d\"[D]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.DeadlinesTask. The task is not done by default."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task  String representing the description of the Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param deadlines the deadline of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the deadline task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public DeadlinesTask(String task, Date deadlines, int priority){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,priority);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.DeadlinesTask. The task could be done or not depending on the parameter given."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * And the priority is 5 by default."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task  String representing the description of the Task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param deadlines the deadline of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeadlinesTask(String task, String mark, Date deadlines){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,mark);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.tag \u003d\"[D]\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of leduc.task.DeadlinesTask. The task could be done or not depending on the parameter given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task  String representing the description of the Task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param deadlines the deadline of the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the deadline task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public DeadlinesTask(String task, String mark, Date deadlines, int priority){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,mark,priority);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tag \u003d\"[D]\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of Tag ( [D] )."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String : [D]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTag(){ return this.tag;}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of deadline."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the deadline date of the task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDeadlines(){ return this.deadlines;}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Setter of deadlines."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param deadlines the new deadline date of the task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void setDeadlines(Date deadlines){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to snooze the deadline date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void snoozeDeadline() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deadlines.snoozeLocalDateTime();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is a deadline task of not"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDeadline(){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * visualize a deadline task"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string format to see a deadline task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return super.toString() + \" by: \" + getDeadlines() + \" [Priority: \" + getPriority() + \"]\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow postpone the deadline of the deadline task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * With verification that the new deadline should be after the old one."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param d Date d : the new deadline"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PostponeDeadlineException Exception caught when the new deadline is before the old one."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void postponeDeadline(Date d) throws PostponeDeadlineException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (d.getD().isBefore(this.deadlines.getD())){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PostponeDeadlineException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.deadlines \u003d d;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huangje": 1,
      "-": 80,
      "laurenthg": 42
    }
  },
  {
    "path": "src/main/java/leduc/task/EventsTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.DateComparisonEventException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Event Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tag; // [E]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateFirst;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateSecond;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.EventsTask. The task is not done by default."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * And the priority is 5 by default."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateFirst the start date of the period of the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateSecond the end date of the period of the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EventsTask(String task, Date dateFirst, Date dateSecond) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tag \u003d \"[E]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateFirst \u003d dateFirst;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateSecond \u003d dateSecond;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.EventsTask. The task is not done by default."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the Task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param dateFirst the start date of the period of the event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param dateSecond the end date of the period of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EventsTask(String task, Date dateFirst, Date dateSecond, int priority){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,priority);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.dateFirst\u003d dateFirst;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.dateSecond \u003d dateSecond;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.EventsTask. The task could be done or not depending on the parameter given."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * the priority is 5 by default."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the Task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateFirst the start date of the period of the event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateSecond the end date of the period of the event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public EventsTask(String task, String mark, Date dateFirst, Date dateSecond) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,mark);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.tag \u003d \"[E]\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.dateFirst \u003d dateFirst;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.dateSecond \u003ddateSecond;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of leduc.task.EventsTask. The task could be done or not depending on the parameter given."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the Task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param dateFirst the start date of the period of the event."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param dateSecond the end date of the period of the event."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the event."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EventsTask(String task, String mark, Date dateFirst, Date dateSecond, int priority) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,mark,priority);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tag \u003d \"[E]\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateFirst \u003d dateFirst;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateSecond \u003ddateSecond;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of Tag ( [T] )."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String : [T]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTag(){ return this.tag;}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of start date."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the start date of the task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateFirst(){ return this.dateFirst;}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of end date."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the end date of the task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateSecond(){ return this.dateSecond; }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is an event task of not"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEvent(){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * visualize a event task"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string format to see a event task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return super.toString() + \" at: \" + getDateFirst() + \" - \" + getDateSecond() + \" [Priority: \" + getPriority() + \"]\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow reschedule the period of the event task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * With verification that the second date should be after the first one."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d1 the first date."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d2 the second date."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DateComparisonEventException Exception caught when the second date is before the first one."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void reschedule(Date d1, Date d2) throws DateComparisonEventException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (d2.getD().isBefore(d1.getD())){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DateComparisonEventException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.dateFirst \u003d d1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.dateSecond \u003d d2 ;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huangje": 1,
      "-": 84,
      "laurenthg": 40
    }
  },
  {
    "path": "src/main/java/leduc/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class representing a leduc.task.Task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private String mark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private int priority \u003d 5 ; // the priority of the task is initialized to 5"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task String representing the description of the leduc.task.Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Task (String task){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mark \u003d \"[✗]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.Task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the leduc.task.Task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the deadline task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    protected Task(String task, int priority){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.mark \u003d \"[✗]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.Task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the leduc.task.Task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    protected Task (String task, String mark){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.mark \u003d mark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.Task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the leduc.task.Task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    protected Task (String task, String mark, int priority){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.mark \u003d mark;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.priority\u003d priority;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Getter of the priority of the task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @return the priority of the task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Setter of the priority of the task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the new priority of the task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Setter of the task description of the leduc.task.Task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param taskDescription String corresponding to the new task description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void setTask(String taskDescription){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.task\u003d taskDescription;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Setter of the mark of the leduc.task.Task ( done or not)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param mark String ( \"[✓]\" or \"[✗]\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void setMark(String mark){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mark\u003d mark;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the task to done"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void taskDone(){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mark \u003d \"[✓]\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of the description of the leduc.task.Task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string representing the description of the task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTask(){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the mark of the task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to know if the task is done or not."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String which allows to know if the task is done or not."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMark(){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.mark;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of the tag of the task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to know if it is a todo, deadline or event task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String which allows to know if it is a todo, deadline or event task."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String getTag();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is a todo task of not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isTodo(){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is a deadline task of not"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDeadline(){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is an event task of not"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEvent(){"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * visualize a task"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string format to see a task"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return getTag() + getMark() + \" \" + getTask();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Help method which returns the date from any task Object."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public LocalDateTime getDate(){"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (this.isDeadline()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            DeadlinesTask deadline \u003d (DeadlinesTask)this;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            return (deadline.getDeadlines()).getD();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (this.isEvent()){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            EventsTask event \u003d (EventsTask)this;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            return(event.getDateFirst()).getD();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "laurenthg": 77
    }
  },
  {
    "path": "src/main/java/leduc/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.ConflictDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of tasks list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks Arraylist of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the task in the position i of the tasks list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i position of the task in the tasks list to returns."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the task in the position i of the tasks list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task get(int i ){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.tasks.get(i);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Add a task to the tasks list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param t the task to add."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task t ){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks.add(t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the tasks list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return size of the tasks list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int size(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the task which is removed from the tasks list at the position i."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i the position of the task to remove in the tasks list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the task which is removed from the tasks list at the position i."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task remove( int i){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.tasks.remove(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the String of display of one element of the list of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index the position of the task to display in the tasks list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the String of display of one element of the list of tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String displayOneElementList(int index){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Task t \u003d this.tasks.get(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String result \u003d \"\\t \"+ (index+1) + \". \" + t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * get the list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the task list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getList(){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return (ArrayList\u003cTask\u003e) this.tasks;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Setter of the list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void setList(ArrayList\u003cTask\u003e task){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.tasks\u003d task;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Verify if there are event that are in conflict with the date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date1 the start date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date2 the end date"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws  ConflictDateException Exception thrown when the new event is in conflict with others event."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void verifyConflictDate(Date date1, Date date2) throws ConflictDateException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e conflictTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task t : tasks){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            if(t.isEvent()){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                if(date1.getD().isAfter(((EventsTask)t).getDateFirst().getD()) \u0026\u0026 date1.getD().isBefore(((EventsTask)t).getDateSecond().getD())){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                    conflictTasks.add(t);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                else if(date2.getD().isAfter(((EventsTask)t).getDateFirst().getD()) \u0026\u0026 date2.getD().isBefore(((EventsTask)t).getDateSecond().getD())){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    conflictTasks.add(t);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                else if(date1.getD().isBefore(((EventsTask)t).getDateFirst().getD()) \u0026\u0026 date2.getD().isAfter(((EventsTask)t).getDateSecond().getD())){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    conflictTasks.add(t);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if(!conflictTasks.isEmpty()){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new ConflictDateException(conflictTasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Sorts the list of tasks by date."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param filteredTasklist which filters out all Tasks that do not have a date field.."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param extractedTodos which is a list of all Todo objects, will get appended to the final sorted list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public  ArrayList\u003cTask\u003e sort(ArrayList\u003cTask\u003e filteredTasklist, ArrayList\u003cTask\u003e extractedTodos){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for(int i \u003d 0; filteredTasklist.size() \u003e 0; i++){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Task initialTask \u003d filteredTasklist.get(0);//set initial task"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            for(int j \u003d 0; j \u003c filteredTasklist.size(); j++){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if((filteredTasklist.get(j).getDate().compareTo(initialTask.getDate())) \u003c 0) {//compare each date to initialdate"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    initialTask \u003d filteredTasklist.get(j);//update if necessary"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortedTasks.add(initialTask);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            filteredTasklist.remove(initialTask);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        sortedTasks.addAll(extractedTodos);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return sortedTasks;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Extracts all EventsTask/DeadlinesTask into a seperate arraylist. Tasks with/without dates must be seperated prior to sorting"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *@param tasks tasks is the list of tasks"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public  ArrayList\u003cTask\u003e filterTasks(TaskList tasks){"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasklist \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (!(tasks.get(i) instanceof TodoTask)){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                filteredTasklist.add(tasks.get(i));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return filteredTasklist;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Extracts all Todo\u0027s into a seperate arraylist. Tasks with/without dates must be separated prior to sorting"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param  tasks is the list of tasks"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public  ArrayList\u003cTask\u003e extractTodo(TaskList tasks){"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e extractedTodos \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if ((tasks.get(i) instanceof TodoTask)){"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                extractedTodos.add(tasks.get(i));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return extractedTodos;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 2,
      "-": 94,
      "laurenthg": 62
    }
  },
  {
    "path": "src/main/java/leduc/task/TodoTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Todo leduc.task.Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tag; // [T]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.TodoTask. The task is not done by default."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * And the priority is 5 by default."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task String representing the description of the todo task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TodoTask(String task){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tag \u003d\"[T]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.TodoTask. The task is not done by default."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the todo task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the todo task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public TodoTask( String task, int priority){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,priority);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.TodoTask."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * And the priority is 5 by default."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task String representing the description of the todo task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public TodoTask(String task, String mark){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,mark);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.tag \u003d\"[T]\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of leduc.task.TodoTask. The task could be done or not depending on the parameter given."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the todo task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the todo task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public TodoTask(String task, String mark, int priority){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,mark,priority);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tag \u003d\"[T]\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of the tag ([T])."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String ([T])."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTag(){ return this.tag;}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is a todo task of not"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isTodo(){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * visualize a event task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string format to see a event task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return super.toString() + \" [Priority: \" + getPriority() + \"]\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 1,
      "-": 46,
      "laurenthg": 27
    }
  },
  {
    "path": "src/test/java/leduc/DeadlineCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.DeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a JUnit test class for the DeadlineCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a JUnit test method for the DeadlineCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deadlineCommandExecuteTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/testFile/DeadlineCommandTest.txt\", System.getProperty(\"user.dir\")+ \"/src/test/testFile/configTest.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList(storage.load()); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            e.print();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineCommand deadlineCommand1 \u003d new DeadlineCommand(\"deadline ok\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            deadlineCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof EmptyDeadlineDateException);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineCommand deadlineCommand2 \u003d new DeadlineCommand(\"deadline /by 12/12/2000 22:22\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            deadlineCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        catch(DukeException e ){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof EmptyDeadlineException);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineCommand deadlineCommand3 \u003d new DeadlineCommand(\"deadline d1 /by 12-12-2000 22:22\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            deadlineCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue( e instanceof NonExistentDateException);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineCommand deadlineCommand4 \u003d new DeadlineCommand(\"deadline d1 /by 12/12/2000 22:22\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            deadlineCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e){ //should not happen"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        DeadlineCommand deadlineCommand5 \u003d new DeadlineCommand(\"deadline d1 /by 12/12/2000 22:22 prio 6\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            deadlineCommand5.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d 6);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d 5);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        DeadlineCommand deadlineCommand6 \u003d new DeadlineCommand(\"deadline d1 /by 12/12/2000 22:22 prio 12\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            deadlineCommand6.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        DeadlineCommand deadlineCommand7 \u003d new DeadlineCommand(\"deadline d1 /by 12/12/2000 22:22 prio Qzeaze\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            deadlineCommand7.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand delete \u003d new DeleteCommand(\"delete 1\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            delete.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e){ //should not happen"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            delete.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e){ //should not happen"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 9,
      "-": 88,
      "laurenthg": 37
    }
  },
  {
    "path": "src/test/java/leduc/EventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.command.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.EventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void eventCommandExecuteTest(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/testFile/EventCommandTest.txt\", System.getProperty(\"user.dir\")+ \"/src/test/testFile/configTest.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList( tasksList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime d1 \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime d2 \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"11/12/2019 20:30\".trim(), formatter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            d2 \u003d LocalDateTime.parse(\"12/12/2019 20:40\".trim(), formatter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date2 \u003d new Date(d2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(new EventsTask(\"testConflict\", date1, date2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand1 \u003d new EventCommand(\"event\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand1.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no description\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"description\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand2 \u003d new EventCommand(\"event testNoDate\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand2.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no date\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand3 \u003d new EventCommand(\"event testNoDate /at\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand3.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no date\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand4 \u003d new EventCommand(\"event testNoDate /at 12/12/2019 20:30\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand4.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no period\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand5 \u003d new EventCommand(\"event testNoDate /at 12/12/2019 20:30 12/12/2019 20:40\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand5.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a problem with the date\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand6 \u003d new EventCommand(\"event testNoDate /at - 12/12/2019 20:30\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand6.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no date\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand7 \u003d new EventCommand(\"event testNoDate /at 12/12/2019 20:30 - \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand7.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no date\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand8 \u003d new EventCommand(\"event testNoDate /at a - b\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand8.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a wrong format\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"date doesn\u0027t exist\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand9 \u003d new EventCommand(\"event testNoDate /at 12-12-2019 20:30 - 12-12-2019 20:40\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand9.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a wrong format\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"date doesn\u0027t exist\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand10 \u003d new EventCommand(\"event testNoDate /at 12/12/2019 2030 - 12/12/2019 20:40\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand10.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a wrong format\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"date doesn\u0027t exist\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand11 \u003d new EventCommand(\"event testConflictDate /at 11/12/2019 20:20 - 11/12/2019 21:00\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand11.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a conflict between the date\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"conflict\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand12 \u003d new EventCommand(\"event testConflictDate /at 11/12/2019 20:20 - 12/12/2019 21:00\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand12.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a conflict between the date\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"conflict\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand13 \u003d new EventCommand(\"event testConflictDate /at 12/12/2019 20:20 - 12/12/2019 21:00\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand13.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a conflict between the date\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"conflict\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand14 \u003d new EventCommand(\"event testConflictDate /at 12/12/2019 20:20 - 12/12/2019 20:30\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand14.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a conflict between the date\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException | PrioritizeLimitException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"conflict\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EventCommand eventCommand15 \u003d new EventCommand(\"event e1 /at 12/12/2000 22:22 - 12/12/2000 22:23 prio 6\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            eventCommand15.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e){"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d2);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d 6);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EventCommand eventCommand16 \u003d new EventCommand(\"event e2 /at 12/12/2001 22:22 - 12/12/2001 22:23 prio 12\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            eventCommand16.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e){"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d2);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EventCommand eventCommand17 \u003d new EventCommand(\"event e3 /at 12/12/2002 22:22 - 12/12/2002 22:23 prio Qzeaze\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            eventCommand17.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e){"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d2);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        DeleteCommand delete \u003d new DeleteCommand(\"delete 1\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            delete.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e){ //should not happen"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            delete.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e){ //should not happen"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 8,
      "-": 142,
      "laurenthg": 61
    }
  },
  {
    "path": "src/test/java/leduc/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a JUnit test class for the Parser."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a JUnit test method to test if the parser could"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * create the right command depending on the input String (user)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandCreatedTest(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"ok\") instanceof MeaninglessCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(parser.parse(\"listlist\") instanceof ListCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"find eizae\") instanceof FindCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"done 12\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(parser.parse(\"done okk\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"delete 12\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(parser.parse(\"delete e\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"todo ekzoa\") instanceof TodoCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"deadline d1\")instanceof DeadlineCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"event e\") instanceof EventCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"bye\")instanceof ByeCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"edit\")instanceof EditCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"setwelcome message\")instanceof SetWelcomeCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"postpone 2 /by 12/12/2000 22:22\")instanceof PostponeCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"reschedule 2 /at 12/12/2000 11:11 - 13/12/2000 12:22\")instanceof RescheduleCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"snooze 2\")instanceof SnoozeCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"help\")instanceof HelpCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"sort date\")instanceof SortCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"sort description\")instanceof SortCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(parser.parse(\"bye \" )instanceof ByeCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "laurenthg": 8
    }
  },
  {
    "path": "src/test/java/leduc/PostponeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.PostponeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.DeadlinesTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a JUnit test class for the PostponeCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PostponeCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a JUnit test method for the PostponeCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void PostponeCommandTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/testFile/PostponeCommandTest.txt\", System.getProperty(\"user.dir\")+ \"/src/test/testFile/configTest.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList(storage.load()); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            e.print();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d6);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand1 \u003d new PostponeCommand(\"postpone 4ee /by 12/12/2222 22:22\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentTaskException);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand2 \u003d new PostponeCommand(\"postpone 15 /by 12/12/2222 22:22\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentTaskException);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand3 \u003d new PostponeCommand(\"postpone 3 /by 12/12/2222 22:22\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof DeadlineTypeException);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand4 \u003d new PostponeCommand(\"postpone 2\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof EmptyDeadlineDateException);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand5 \u003d new PostponeCommand(\"postpone 2 /by 12/12/22a2 22:22\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand5.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentDateException);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d tasks.get(tasks.size()-1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(task.isDeadline());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Date d \u003d ((DeadlinesTask) task).getDeadlines();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Date dAfter \u003d d;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        dAfter.setD(d.getD().plusDays(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Date dBefore \u003d d;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        dAfter.setD(d.getD().plusDays(-1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand6 \u003d new PostponeCommand(\"postpone 6 /by \"+ dBefore);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand6.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof PostponeDeadlineException);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand7 \u003d new PostponeCommand(\"postpone 6 /by \" +dAfter);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand7.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){ // Should not happen"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 8,
      "-": 103
    }
  },
  {
    "path": "src/test/java/leduc/PrioritizeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.command.PrioritizeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a JUnit test class for the PrioritizeCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class PrioritizeCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents a JUnit test method for the PrioritizeCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void PrioritizeCommandTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/testFile/PrioritizeCommandTest.txt\", System.getProperty(\"user.dir\")+ \"/src/test/testFile/configTest.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks \u003d new TaskList(storage.load()); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.print();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d6);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for (Task t : tasks.getList()){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(t.getPriority()\u003d\u003d5);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand1 \u003d new PrioritizeCommand(\"prioritize 5 ,ez\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeFormatException);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand2 \u003d new PrioritizeCommand(\"prioritize 5 \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeFormatException);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand3 \u003d new PrioritizeCommand(\"prioritize 5 prio\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeFormatException);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand4 \u003d new PrioritizeCommand(\"prioritize 5 pfzezfe\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeFormatException);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand5  \u003d new PrioritizeCommand(\"prioritize 5 prio dqsdqs\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand5.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand6  \u003d new PrioritizeCommand(\"prioritize 15 prio 2\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand6.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof NonExistentTaskException);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand7  \u003d new PrioritizeCommand(\"prioritize\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand7.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EmptyArgumentException);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for ( int i \u003d 0 ; i\u003c tasks.getList().size() ; i++){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            int j \u003d i *2;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            PrioritizeCommand prioritizeCommand \u003d new PrioritizeCommand(\"prioritize \" + (i+1) + \" prio \" + j);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (j\u003c 9) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    prioritizeCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    assertTrue(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            else{"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    prioritizeCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TaskList tasks2 \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks2 \u003d new TaskList(storage.load()); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.print();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks2.size()\u003d\u003d6);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks2.get(0).getPriority() \u003d\u003d 0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks2.get(1).getPriority()\u003d\u003d2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks2.get(2).getPriority()\u003d\u003d 4);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks2.get(3).getPriority()\u003d\u003d6);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks2.get(4).getPriority()\u003d\u003d8);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks2.get(5).getPriority()\u003d\u003d5);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for ( int i \u003d 0 ; i\u003c tasks2.getList().size() ; i++){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            PrioritizeCommand prioritizeCommand \u003d new PrioritizeCommand(\"prioritize \"+ (i+1) + \" prio \" + 5);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    prioritizeCommand.execute(tasks2, ui, storage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    assertTrue(false);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 149
    }
  },
  {
    "path": "src/test/java/leduc/RescheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.RescheduleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a JUnit test class for the RescheduleCommandTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a JUnit test method for the RescheduleCommandTest."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void RescheduleCommandTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/testFile/RescheduleCommandTest.txt\", System.getProperty(\"user.dir\")+ \"/src/test/testFile/configTest.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList(storage.load()); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            e.print();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d6);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand1 \u003d new RescheduleCommand("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reschedule 4ee /at 12/12/2222 22:22 - 12/12/2222 22:24\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentTaskException);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand2 \u003d new RescheduleCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reschedule 15 /at 12/12/2222 22:22 - 12/12/2222 22:24\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentTaskException);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand3 \u003d new RescheduleCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reschedule 2 /at 12/12/2222 22:22 - 12/12/2222 22:24\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof EventTypeException);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand4 \u003d new RescheduleCommand(\"reschedule 3\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof EmptyEventDateException);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand5 \u003d new RescheduleCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reschedule 3 /at 12/12/22a2 22:22 - 12/12/2222 22:24\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand5.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentDateException);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand6 \u003d new RescheduleCommand("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reschedule 3 /at 12/12/2222 22:22 - 12/12/1222 22:24\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand6.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof DateComparisonEventException);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand7 \u003d new RescheduleCommand("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reschedule 3 /at 12/12/2019 22:22 - 12/12/2019 22:24\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand7.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){ // Should not happen"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 8,
      "-": 99
    }
  },
  {
    "path": "src/test/java/leduc/SnoozeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.SnoozeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a JUnit test class for the SnoozeCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a JUnit test method for the SnoozeCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void SnoozeCommandExecuteTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/testFile/SnoozeCommandTest.txt\", System.getProperty(\"user.dir\")+ \"/src/test/testFile/configTest.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList(storage.load()); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            e.print();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        SnoozeCommand snoozeCommand1 \u003d new SnoozeCommand(\"snooze 4\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            snoozeCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof DeadlineTypeException);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        SnoozeCommand snoozeCommand2 \u003d new SnoozeCommand(\"snooze 15\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            snoozeCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentTaskException);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        SnoozeCommand snoozeCommand3 \u003d new SnoozeCommand(\"snooze 2\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            snoozeCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){ // Should not happen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 8,
      "-": 61
    }
  },
  {
    "path": "src/test/java/leduc/SortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.command.SortCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a JUnit test class for the SortCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents a JUnit test method for the SortCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void SortCommandExecuteTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/testFile/SortCommandTest.txt\", System.getProperty(\"user.dir\")+ \"/src/test/testFile/configTest.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks \u003d new TaskList(storage.load()); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.print();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommandDate \u003d new SortCommand(\"sort date\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortCommandDate.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"d1\",tasks.get(0).getTask());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadline\",tasks.get(1).getTask());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"e1\",tasks.get(2).getTask());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadlineOther\",tasks.get(3).getTask());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"\u0026\",tasks.get(4).getTask());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"1\",tasks.get(5).getTask());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"2\",tasks.get(6).getTask());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"5\",tasks.get(7).getTask());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td1\",tasks.get(8).getTask());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td3\",tasks.get(9).getTask());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td4\",tasks.get(10).getTask());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td5\",tasks.get(11).getTask());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test\",tasks.get(12).getTask());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 2\",tasks.get(13).getTask());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 3\",tasks.get(14).getTask());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand1 \u003d new SortCommand(\"sort ok\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "            sortCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof MeaninglessException);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand2 \u003d new SortCommand(\"sort 4\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "            sortCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof MeaninglessException);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand10 \u003d new SortCommand(\"sort\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortCommand10.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EmptyArgumentException);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand3 \u003d new SortCommand(\"sort description\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": "            sortCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"\u0026\",tasks.get(0).getTask());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"1\",tasks.get(1).getTask());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"2\",tasks.get(2).getTask());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"5\",tasks.get(3).getTask());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"d1\",tasks.get(4).getTask());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadline\",tasks.get(5).getTask());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadlineOther\",tasks.get(6).getTask());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"e1\",tasks.get(7).getTask());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td1\",tasks.get(8).getTask());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td3\",tasks.get(9).getTask());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td4\",tasks.get(10).getTask());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td5\",tasks.get(11).getTask());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test\",tasks.get(12).getTask());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 2\",tasks.get(13).getTask());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 3\",tasks.get(14).getTask());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand13 \u003d new SortCommand(\"sort priority\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortCommand13.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"\u0026\",tasks.get(4).getTask());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"1\",tasks.get(5).getTask());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"2\",tasks.get(6).getTask());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"5\",tasks.get(8).getTask());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"d1\",tasks.get(0).getTask());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadline\",tasks.get(1).getTask());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadlineOther\",tasks.get(2).getTask());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"e1\",tasks.get(3).getTask());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td1\",tasks.get(10).getTask());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td3\",tasks.get(12).getTask());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td4\",tasks.get(14).getTask());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td5\",tasks.get(13).getTask());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test\",tasks.get(11).getTask());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 2\",tasks.get(9).getTask());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 3\",tasks.get(7).getTask());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand4 \u003d new SortCommand(\"sort date\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "            sortCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"d1\",tasks.get(0).getTask());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadline\",tasks.get(1).getTask());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"e1\",tasks.get(2).getTask());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadlineOther\",tasks.get(3).getTask());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"\u0026\",tasks.get(4).getTask());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"1\",tasks.get(5).getTask());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"2\",tasks.get(6).getTask());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"5\",tasks.get(7).getTask());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td1\",tasks.get(8).getTask());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td3\",tasks.get(9).getTask());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td4\",tasks.get(10).getTask());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td5\",tasks.get(11).getTask());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test\",tasks.get(12).getTask());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 2\",tasks.get(13).getTask());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 3\",tasks.get(14).getTask());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 12,
      "laurenthg": 161
    }
  },
  {
    "path": "src/test/java/leduc/TodoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.command.DeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.command.TodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a JUnit test class for the TodoCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class TodoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents a JUnit test method for the TodoCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void TodoCommandTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/testFile/TodoCommandTest.txt\", System.getProperty(\"user.dir\")+ \"/src/test/testFile/configTest.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks \u003d new TaskList(storage.load()); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.print();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand1 \u003d new TodoCommand(\"todo ok\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand2\u003d new TodoCommand(\"todo prio\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand3\u003d new TodoCommand(\"todo okprio\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand4\u003d new TodoCommand(\"todo\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EmptyTodoException);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand5\u003d new TodoCommand(\"todo prio 5\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand5.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EmptyTodoException);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d3);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand6\u003d new TodoCommand(\"todo priotask\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand6.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d4);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(3).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand7\u003d new TodoCommand(\"todo td prio 23\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand7.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d4);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(3).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand8\u003d new TodoCommand(\"todo td prio 2\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand8.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d5);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(3).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(4).getPriority() \u003d\u003d2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        DeleteCommand delete \u003d new DeleteCommand(\"delete 1\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for (int i \u003d 0 ; i\u003c 5 ; i ++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                delete.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (DukeException e) { //should not happen"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                assertTrue(false);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(tasks.size() \u003d\u003d 5-1-i);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 159
    }
  }
]
