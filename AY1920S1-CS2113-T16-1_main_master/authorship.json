[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": "group \u0027leduc.Duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "version \u00271.1\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"leduc.Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"leduc\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    archiveVersion \u003d \"v1.1\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "test{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 1,
      "-": 37,
      "laurenthg": 2
    }
  },
  {
    "path": "src/main/java/leduc/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.NonExistentDateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a date and contains a GregorianCalendar type field."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime d;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.Date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param d LocalDateTime which is a date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date(LocalDateTime d) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.d \u003d d;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *  Constructor of leduc.Date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param date the String date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the task to delete does not exist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public Date( String date ) throws NonExistentDateException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d1 \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(date.trim(), formatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new NonExistentDateException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.d \u003d d1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow to snooze the date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fixed to 30 minutes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void snoozeLocalDateTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.d \u003d this.d.plusMinutes(30);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Setter of the LocalDateTime d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d the new value of date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setD(LocalDateTime d) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.d \u003d d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of the LocalDateTime d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return d the LocalDateTime d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDateTime getD() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.d;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String representing a date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String representation of date."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter formatters \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateFormatted \u003d this.d.format(formatters);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateFormatted; //no need secondes and time zone"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "laurenthg": 19
    }
  },
  {
    "path": "src/main/java/leduc/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the main program leduc.Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Run the project from here."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.Duke class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialization of ui,parser, tasks list and storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The tasks will load the information provided by the data file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath String which represents the path of the data file to load."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke(String[] filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String file; // file name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (filePath.length !\u003d 0 ){ // test file in case of test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            file \u003d filePath[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        else{ // no test file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            file \u003d System.getProperty(\"user.dir\")+ \"/data/duke.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tasks \u003d new TaskList(storage.load()); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method which run the duke program."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.ui.showWelcome();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                String user \u003d this.ui.readCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Command c \u003d parser.parse(user);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                c.execute(tasks, ui, storage); // parser is needed because stringToDate is in leduc.Parser class"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (DukeException e){ // catch one of subclass of dukeException and print the right message"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                e.print();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main of leduc.Duke."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args String[] which could be the data file to load."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        new Duke(args).run();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 5,
      "-": 69,
      "laurenthg": 1
    }
  },
  {
    "path": "src/main/java/leduc/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.NonExistentDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a leduc.Parser which deals with making sense of the user command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of a leduc.Parser."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Parser(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the leduc.command.Command instanced according to the input string of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a leduc.command.Command which is asked by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parse(String user){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Command c ;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (user.equals(\"list\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new ListCommand(user);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"find (.*)\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new FindCommand(user);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"done \\\\d+\")) {// if it is done and a number of task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new DoneCommand(user);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"snooze \\\\d+\")){ // if it is snooze and a number of task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new SnoozeCommand(user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"postpone \\\\d+ (.*)\")){ //example: postpone 1 /by 12/12/2012 22:22"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new PostponeCommand(user);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (user.trim().matches(\"edit\")){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new EditCommand(user);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"delete \\\\d+\")) {// if it is done and a number of task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new DeleteCommand(user);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (user.matches(\"sort (.*)\")){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new SortCommand(user);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"todo(.*)\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new TodoCommand(user);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"deadline (.*)\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new DeadlineCommand(user);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"event (.*)\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new EventCommand(user);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"reschedule \\\\d+ (.*)\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new RescheduleCommand(user);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else if (user.matches(\"setwelcome (.*)\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c \u003d new SetWelcomeCommand(user);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else if (user.matches(\"remind\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c \u003d new RemindCommand(user);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(user.matches(\"help\")){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new HelpCommand(user);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches((\"bye\"))){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new ByeCommand(user);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new MeaninglessCommand(user);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return c ;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 2,
      "rshah918": 8,
      "-": 67,
      "laurenthg": 6
    }
  },
  {
    "path": "src/main/java/leduc/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *  Represents leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of the leduc.Ui"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the String representing the next line of command of the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the String representing the next line of command of the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.sc.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Returns a File object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return a file object containing the welcome message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public static File openFile(String filepath) throws FileException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //open file, throw exception if the file doesnt exist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        File file;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        file \u003d new File(filepath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display the duke logo."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayLogo(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Show welcome to the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void showWelcome() throws FileException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //open the file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String filepath \u003d System.getProperty(\"user.dir\")+ \"/data/welcome.txt\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        File file \u003d openFile(filepath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //create Scanner object to read file"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        Scanner sc2 \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            sc2 \u003d new Scanner(file);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String welcomeMessage \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //build welcome message"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        while (sc2.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            welcomeMessage \u003d welcomeMessage + \u0027\\t\u0027 + sc2.nextLine() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //display welcome message"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.displayLogo();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        this.display(welcomeMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Bye message to the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showBye(){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.display(\"\\t Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display the String in the parameter between two lines."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param s String which will be printed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display(String s){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display the list of tasks."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks tasks list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showList(TaskList tasks){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0 ;i\u003c tasks.size() ; i++ ){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.print(tasks.displayOneElementList(i));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display the error message"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param e the error that has been catch"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(DukeException e){"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(e.print());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display every command"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showHelp(){"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t All command will be display as :\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t commandName [PARAMETERS] : description of the command\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t All parameters will be written in UPPER_CASE\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Parameters are :\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t DESCRIPTION : the description of a task\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t SORTTYPE : the date or description\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t DATE : the date of a task\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t INDEX : the index of the task (goes from 1 to ...)\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t KEYWORD : the keyword to find a task\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t WELCOME: the welcome message\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Date format is DD/MM/YYYY HH:mm\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t All blank space should be respected\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Here are the list of all command:\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t todo DESCRIPTION : create a todo task\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t deadline DESCRIPTION /by DATE : create a deadline task\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t event DESCRIPTION /at DATE - DATE : create an event task\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t list : show all the tasks\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t bye : exit the application\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t done INDEX : mark as done the task of index INDEX\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t delete INDEX : delete the task of index INDEX\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t find KEYWORD : find the task with a keyword\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t snooze INDEX : snooze a task of index INDEX\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t postpone INDEX /by DATE : postpone a deadline task\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t sort SORTTYPE : Sort all task by date/description\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t reschedule INDEX /at DATE - DATE : reschedule an event task\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t remind : remind the first three task\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t setwelcome WELCOME : customize the welcome message\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t edit : edit a task (then, you have to follow the instructions)\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t help : show the list of all command\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 32,
      "rshah918": 45,
      "-": 84,
      "laurenthg": 5
    }
  },
  {
    "path": "src/main/java/leduc/command/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a bye command when the user input \"bye\"."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.command.ByeCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public  ByeCommand(String user){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execution of leduc.command.ByeCommand: the execution of leduc.Duke is ending and the leduc.Ui display a bye message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws FileException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns is true for a leduc.command.ByeCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "laurenthg": 1
    }
  },
  {
    "path": "src/main/java/leduc/command/DeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.DeadlinesTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a deadline task Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Allow to add a deadline task to the task list and to the data file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of DeadlineCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeadlineCommand(String user){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow to add a deadline task to the task list and to the data file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyDeadlineDateException Exception caught when the date of the deadline task is not given."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyDeadlineException Exception caught when the description of the deadline task is not given."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EmptyDeadlineDateException, EmptyDeadlineException, NonExistentDateException, FileException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] taskDescription \u003d user.substring(8).split(\"/by\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskDescription[0].isBlank()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyDeadlineException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (taskDescription.length \u003d\u003d 1) { // no /by in input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyDeadlineDateException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d taskDescription[0].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            String deadlineString \u003d taskDescription[1].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            //date format used: dd/MM/yyyy HH:mm"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            if (deadlineString.isBlank()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyDeadlineDateException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                Date d \u003d new Date(deadlineString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                DeadlinesTask newTask \u003d new DeadlinesTask(description, d);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.save(tasks.getList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.display(\"\\t Got it. I\u0027ve added this task:\\n\\t   \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                        + newTask.toString() +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"\\n\\t Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "laurenthg": 2
    }
  },
  {
    "path": "src/main/java/leduc/command/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.DeadlinesTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a EditCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Allow to edit a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of EditCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EditCommand(String user){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Allow to edit a task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentTaskException  Exception caught when the task to delete does not exist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws MeaninglessException  Exception caught when the input string could not be interpreted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EmptyEventDateException Exception caught when one of the two date given does not exist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws ConflictDateException Exception thrown when the new event is in conflict with others event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws DateComparisonEventException  Exception caught when the second date is before the first one."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throws NonExistentDateException, FileException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            NonExistentTaskException, MeaninglessException, EmptyEventDateException, ConflictDateException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            DateComparisonEventException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ui.display(\"\\t Please choose the task to edit from the list by its index: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(user);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        listCommand.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        // The user choose the task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String userEditTaskNumber \u003d ui.readCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if ( userEditTaskNumber.matches(\"\\\\d+\")){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            int index \u003d Integer.parseInt(userEditTaskNumber.trim()) - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                Task t \u003d tasks.get(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if ( t.isTodo()){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    ui.display(\"\\t Please enter the new description of the todo Task\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    t.setTask(ui.readCommand());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    ui.display(\"\\t Please choose what you want to edit (1 or 2)\\n\\t 1. The description \" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            \"\\n\\t 2. The deadline/period\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    String userEditTPart \u003d ui.readCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if ( userEditTPart.matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        int choice \u003d Integer.parseInt(userEditTPart.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        if (choice \u003d\u003d 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            ui.display(\"\\t Please enter the new description of the task\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            t.setTask(ui.readCommand());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        } else if (choice \u003d\u003d 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            if (t.isDeadline()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                ui.display(\"\\t Please enter the new deadline of the task\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                String deadlineString \u003d ui.readCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                Date d \u003d new Date(deadlineString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                DeadlinesTask deadlinesTask \u003d (DeadlinesTask) t;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                deadlinesTask.setDeadlines(d);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            } else { //event task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                ui.display(\"\\t Please enter the new period of the task\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                String periodString \u003d ui.readCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                String[] dateString \u003d periodString.split(\" - \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                if (dateString.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                } else if (dateString[0].isBlank() || dateString[1].isBlank()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                Date date1 \u003d new Date(dateString[0]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                Date date2 \u003d new Date(dateString[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                tasks.verifyConflictDate(date1, date2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                EventsTask eventsTask \u003d (EventsTask) t;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                eventsTask.reschedule(date1, date2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            throw new MeaninglessException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new MeaninglessException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ui.display(\"\\t The task is edited: \\n\\t \"+ (index+1) + \" \" + t.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new MeaninglessException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 107
    }
  },
  {
    "path": "src/main/java/leduc/command/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a event task Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Allow to add a event task to the task list and to the data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of EventCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public  EventCommand(String user){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow to add a event task to the task list and to the data file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyEventDateException Exception caught when the period of the event task is not given by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyEventException Exception caught when the description of the event task is not given by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentDateException Exception caught when one of the two date given does not exist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ConflictDateException Exception thrown when the new event is in conflict with others event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EmptyEventDateException, EmptyEventException, NonExistentDateException, FileException, ConflictDateException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] taskDescription \u003d user.substring(5).split(\"/at\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskDescription[0].isBlank()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyEventException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (taskDescription.length \u003d\u003d 1) { // no /at in input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d taskDescription[0].trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String periodString \u003d taskDescription[1].trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            //date format used: dd/MM/yyyy HH:mm - dd/MM/yyyy HH:mm"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] dateString \u003d periodString.split(\" - \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if(dateString.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            else if(dateString[0].isBlank() || dateString[1].isBlank()){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date date1 \u003d new Date(dateString[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date date2 \u003d new Date(dateString[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.verifyConflictDate(date1, date2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsTask newTask \u003d new EventsTask(description, date1 , date2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.display(\"\\t Got it. I\u0027ve added this task:\\n\\t   \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    + newTask.toString() +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"\\n\\t Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "laurenthg": 3
    }
  },
  {
    "path": "src/main/java/leduc/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": " * Display every command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class HelpCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param user user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public HelpCommand(String user) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display every command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showHelp();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 31
    }
  },
  {
    "path": "src/main/java/leduc/command/PostponeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.DeadlinesTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents Postpone command which postpone the deadline of a deadline task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PostponeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of PostponeCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public PostponeCommand(String user){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to postpone the deadline of a deadline task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task does not exist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DeadlineTypeException Exception caught when the task is not a deadline task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file doesn\u0027t exist or cannot be created or cannot be opened."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyDeadlineDateException Exception caught when the date of the deadline task is not given."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PostponeDeadlineException Exception caught when the new deadline is before the old deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui , Storage storage) throws NonExistentTaskException,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            DeadlineTypeException, FileException, EmptyDeadlineDateException, NonExistentDateException,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            PostponeDeadlineException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] postponeString \u003d user.substring(9).split(\"/by\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (postponeString.length \u003d\u003d 1) { // no /by in input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyDeadlineDateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d Integer.parseInt(postponeString[0].trim()) - 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        catch(Exception e){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        else { // the tasks exist"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Task postponeTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!postponeTask.isDeadline()){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DeadlineTypeException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            DeadlinesTask postponeDeadlineTask \u003d (DeadlinesTask) postponeTask;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date d \u003d new Date(postponeString[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            postponeDeadlineTask.postponeDeadline(d);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.display(\"\\t Noted. I\u0027ve postponed this task: \\n\" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"\\t\\t \"+postponeDeadlineTask.getTag() + postponeDeadlineTask.getMark() + \" \" + postponeDeadlineTask.getTask()+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" by:\" + postponeDeadlineTask.getDeadlines() + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a boolean false as it is a PostponeCommand."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean false."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "laurenthg": 3
    }
  },
  {
    "path": "src/main/java/leduc/command/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Represents a Remind Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Allow to remind user of upcoming tasks in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of FindCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public RemindCommand(String user){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Returns a boolean false as it is a remind command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return a boolean false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allow to remind user of upcoming tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void execute(TaskList tasks, Ui ui , Storage storage){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasklist \u003d tasks.filterTasks(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e extractedTodo \u003d tasks.extractTodo(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TaskList sortedTasks \u003d new TaskList(tasks.sort(filteredTasklist, extractedTodo));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        if (sortedTasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            for (int i \u003d 0; i \u003c sortedTasks.size(); i++) {//prints first 3 tasks in the sorted taskList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                if (i \u003c 3) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    result +\u003d sortedTasks.displayOneElementList(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            System.out.println(result);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            ui.display(\"\\t There is no upcoming tasks in your list\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 54,
      "laurenthg": 4
    }
  },
  {
    "path": "src/main/java/leduc/command/RescheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents Reschedule command which reschedule the period of a event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of RescheduleCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public RescheduleCommand(String user){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to reschedule the period of a event task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyEventDateException Exception caught when the period of the event task is not given by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task does not exist."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTypeException Exception caught when the task is not a event task while it should be."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DateComparisonEventException Exception caught when the second date is before the first one."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file doesn\u0027t exist or cannot be created or cannot be opened."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws ConflictDateException Exception thrown when the new event is in conflict with others event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui , Storage storage) throws EmptyEventDateException,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            NonExistentTaskException, EventTypeException, NonExistentDateException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            DateComparisonEventException, FileException, ConflictDateException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] rescheduleString \u003d user.substring(11).split(\"/at\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (rescheduleString.length \u003d\u003d 1) { // no /by in input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d Integer.parseInt(rescheduleString[0].trim()) - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        catch(Exception e){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        else { // the tasks exist"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Task rescheduleTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!rescheduleTask.isEvent()){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTypeException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsTask rescheduleEventTask \u003d (EventsTask) rescheduleTask;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] dateString \u003d rescheduleString[1].split(\" - \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            if(dateString.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            else if(dateString[0].isBlank() || dateString[1].isBlank()){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date date1 \u003d new Date(dateString[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date date2 \u003d new Date(dateString[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.verifyConflictDate(date1, date2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            rescheduleEventTask.reschedule(date1,date2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.display(\"\\t Noted. I\u0027ve rescheduled this task: \\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"\\t\\t \"+rescheduleEventTask.getTag() + rescheduleEventTask.getMark() + \" \" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                    rescheduleEventTask.getTask()+ \" at:\" + rescheduleEventTask.getDateFirst() +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" - \" + rescheduleEventTask.getDateSecond() + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a boolean false as it is a RescheduleCommand."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean false."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "laurenthg": 7
    }
  },
  {
    "path": "src/main/java/leduc/command/SetWelcomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class SetWelcomeCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public SetWelcomeCommand(String user){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rshah918"
        },
        "content": "       super(user);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allow to change the welcome message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void execute(TaskList tasks, Ui ui , Storage storage) throws FileException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        FileWriter fileWriter \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String filepath \u003d System.getProperty(\"user.dir\")+ \"/data/welcome.txt\";//get location of welcome message file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        File file \u003d Ui.openFile(filepath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //open fileWriter object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                //removes the first word of the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                fileWriter.write(String.join(\" \", Arrays.copyOfRange(user.split(\" \"), 1, user.split( \" \").length)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            finally{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                fileWriter.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 45,
      "laurenthg": 1
    }
  },
  {
    "path": "src/main/java/leduc/command/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.MeaninglessException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a sort command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Allows to sort the task by date or description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.command.SortCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public SortCommand(String user){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Execution of leduc.command.SortCommand: Allows to sort the task list ( by description or by date)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws MeaninglessException  Exception caught when the input string could not be interpreted."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws FileException, MeaninglessException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String sort \u003d user.substring(5).trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (sort.equals(\"date\")){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            ArrayList\u003cTask\u003e filteredTasklist \u003d tasks.filterTasks(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            ArrayList\u003cTask\u003e extractedTodo \u003d tasks.extractTodo(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            // The todo task list is sort by description"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            extractedTodo.sort(Comparator.comparing(Task::getTask));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.setList(tasks.sort(filteredTasklist, extractedTodo));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (sort.equals(\"description\")){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.getList().sort(Comparator.comparing(Task::getTask));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new MeaninglessException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ui.display(\"\\t This is the new task list order: \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(user);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        listCommand.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Returns is false for a leduc.command.ByeCommand."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 63
    }
  },
  {
    "path": "src/main/java/leduc/task/DeadlinesTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.PostponeDeadlineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a deadline Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlinesTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tag; // [D]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date deadlines;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.DeadlinesTask. The task is not done by default."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param deadlines the deadline of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeadlinesTask(String task, Date deadlines){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tag \u003d\"[D]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.DeadlinesTask. The task could be done or not depending on the parameter given."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param deadlines the deadline of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeadlinesTask(String task, String mark, Date deadlines){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super.setMark(mark);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tag \u003d\"[D]\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of Tag ( [D] )."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String : [D]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTag(){ return this.tag;}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of deadline."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the deadline date of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDeadlines(){ return this.deadlines;}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Setter of deadlines."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param deadlines the new deadline date of the task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void setDeadlines(Date deadlines){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to snooze the deadline date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void snoozeDeadline() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deadlines.snoozeLocalDateTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is a deadline task of not"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDeadline(){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * visualize a deadline task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string format to see a deadline task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.toString() + \" by: \" + getDeadlines();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow postpone the deadline of the deadline task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * With verification that the new deadline should be after the old one."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param d Date d : the new deadline"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PostponeDeadlineException Exception caught when the new deadline is before the old one."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void postponeDeadline(Date d) throws PostponeDeadlineException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (d.getD().isBefore(this.deadlines.getD())){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PostponeDeadlineException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.deadlines \u003d d;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "laurenthg": 12
    }
  },
  {
    "path": "src/main/java/leduc/task/EventsTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.DateComparisonEventException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Event Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tag; // [E]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateFirst;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateSecond;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.EventsTask. The task is not done by default."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task tasks list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateFirst the start date of the period of the event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateSecond the end date of the period of the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public EventsTask(String task, Date dateFirst, Date dateSecond) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tag \u003d \"[E]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateFirst \u003d dateFirst;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateSecond \u003d dateSecond;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.EventsTask. The task could be done or not depending on the parameter given."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task tasks list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateFirst the start date of the period of the event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateSecond the end date of the period of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EventsTask(String task, String mark, Date dateFirst, Date dateSecond) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super.setMark(mark);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tag \u003d \"[E]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateFirst \u003d dateFirst;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateSecond \u003ddateSecond;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of Tag ( [T] )."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String : [T]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTag(){ return this.tag;}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of start date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the start date of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateFirst(){ return this.dateFirst;}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of end date."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the end date of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateSecond(){ return this.dateSecond; }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is an event task of not"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEvent(){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * visualize a event task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string format to see a event task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.toString() + \" at: \" + getDateFirst() + \" - \" + getDateSecond();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow reschedule the period of the event task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * With verification that the second date should be after the first one."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d1 the first date."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d2 the second date."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DateComparisonEventException Exception caught when the second date is before the first one."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void reschedule(Date d1, Date d2) throws DateComparisonEventException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (d2.getD().isBefore(d1.getD())){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DateComparisonEventException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.dateFirst \u003d d1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.dateSecond \u003d d2 ;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 89,
      "laurenthg": 4
    }
  },
  {
    "path": "src/main/java/leduc/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class representing a leduc.task.Task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private String mark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task String representing the description of the leduc.task.Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Task (String task){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mark \u003d \"[✗]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Setter of the task description of the leduc.task.Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param taskDescription String corresponding to the new task description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void setTask(String taskDescription){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.task\u003d taskDescription;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Setter of the mark of the leduc.task.Task ( done or not)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param mark String ( \"[✓]\" or \"[✗]\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void setMark(String mark){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mark\u003d mark;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the task to done"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void taskDone(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mark \u003d \"[✓]\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of the description of the leduc.task.Task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string representing the description of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTask(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the mark of the task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to know if the task is done or not."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String which allows to know if the task is done or not."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMark(){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.mark;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of the tag of the task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to know if it is a todo, deadline or event task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String which allows to know if it is a todo, deadline or event task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String getTag();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is a todo task of not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isTodo(){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is a deadline task of not"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDeadline(){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is an event task of not"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEvent(){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * visualize a task"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string format to see a task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return getTag() + getMark() + \" \" + getTask();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Help method which returns the date from any task Object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public LocalDateTime getDate(){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (this.isDeadline()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            DeadlinesTask deadline \u003d (DeadlinesTask)this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            return (deadline.getDeadlines()).getD();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (this.isEvent()){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            EventsTask event \u003d (EventsTask)this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            return(event.getDateFirst()).getD();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "laurenthg": 28
    }
  },
  {
    "path": "src/main/java/leduc/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.ConflictDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of tasks list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks Arraylist of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the task in the position i of the tasks list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i position of the task in the tasks list to returns."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the task in the position i of the tasks list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task get(int i ){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.tasks.get(i);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Add a task to the tasks list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param t the task to add."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task t ){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks.add(t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the tasks list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return size of the tasks list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int size(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the task which is removed from the tasks list at the position i."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i the position of the task to remove in the tasks list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the task which is removed from the tasks list at the position i."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task remove( int i){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.tasks.remove(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the String of display of one element of the list of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index the position of the task to display in the tasks list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the String of display of one element of the list of tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String displayOneElementList(int index){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Task t \u003d this.tasks.get(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String result \u003d \"\\t \"+ (index+1) + \". \" + t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * get the list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the task list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getList(){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return (ArrayList\u003cTask\u003e) this.tasks;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Setter of the list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void setList(ArrayList\u003cTask\u003e task){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.tasks\u003d task;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Verify if there are event that are in conflict with the date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date1 the start date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date2 the end date"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws  ConflictDateException Exception thrown when the new event is in conflict with others event."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void verifyConflictDate(Date date1, Date date2) throws ConflictDateException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e conflictTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task t : tasks){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            if(t.isEvent()){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                if(date1.getD().isAfter(((EventsTask)t).getDateFirst().getD()) \u0026\u0026 date1.getD().isBefore(((EventsTask)t).getDateSecond().getD())){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                    conflictTasks.add(t);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                else if(date2.getD().isAfter(((EventsTask)t).getDateFirst().getD()) \u0026\u0026 date2.getD().isBefore(((EventsTask)t).getDateSecond().getD())){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    conflictTasks.add(t);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                else if(date1.getD().isBefore(((EventsTask)t).getDateFirst().getD()) \u0026\u0026 date2.getD().isAfter(((EventsTask)t).getDateSecond().getD())){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    conflictTasks.add(t);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if(!conflictTasks.isEmpty()){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new ConflictDateException(conflictTasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Sorts the list of tasks by date."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param filteredTasklist which filters out all Tasks that do not have a date field.."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param extractedTodos which is a list of all Todo objects, will get appended to the final sorted list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public  ArrayList\u003cTask\u003e sort(ArrayList\u003cTask\u003e filteredTasklist, ArrayList\u003cTask\u003e extractedTodos){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for(int i \u003d 0; filteredTasklist.size() \u003e 0; i++){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Task initialTask \u003d filteredTasklist.get(0);//set initial task"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            for(int j \u003d 0; j \u003c filteredTasklist.size(); j++){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if((filteredTasklist.get(j).getDate().compareTo(initialTask.getDate())) \u003c 0) {//compare each date to initialdate"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    initialTask \u003d filteredTasklist.get(j);//update if necessary"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortedTasks.add(initialTask);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            filteredTasklist.remove(initialTask);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        sortedTasks.addAll(extractedTodos);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return sortedTasks;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Extracts all EventsTask/DeadlinesTask into a seperate arraylist. Tasks with/without dates must be seperated prior to sorting"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *@param tasks tasks is the list of tasks"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public  ArrayList\u003cTask\u003e filterTasks(TaskList tasks){"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasklist \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (!(tasks.get(i) instanceof TodoTask)){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                filteredTasklist.add(tasks.get(i));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return filteredTasklist;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Extracts all Todo\u0027s into a seperate arraylist. Tasks with/without dates must be separated prior to sorting"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param  tasks is the list of tasks"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public  ArrayList\u003cTask\u003e extractTodo(TaskList tasks){"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e extractedTodos \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if ((tasks.get(i) instanceof TodoTask)){"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                extractedTodos.add(tasks.get(i));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return extractedTodos;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 2,
      "-": 94,
      "laurenthg": 62
    }
  },
  {
    "path": "src/test/java/leduc/EventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.EventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void eventCommandExecuteTest(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Storage storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/testFile/EventCommandTest.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList( tasksList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime d1 \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime d2 \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"11/12/2019 20:30\".trim(), formatter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            d2 \u003d LocalDateTime.parse(\"12/12/2019 20:40\".trim(), formatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date2 \u003d new Date(d2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(new EventsTask(\"testConflict\", date1, date2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand1 \u003d new EventCommand(\"event\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand1.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no description\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"description\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand2 \u003d new EventCommand(\"event testNoDate\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand2.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no date\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand3 \u003d new EventCommand(\"event testNoDate /at\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand3.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no date\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand4 \u003d new EventCommand(\"event testNoDate /at 12/12/2019 20:30\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand4.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no period\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand5 \u003d new EventCommand(\"event testNoDate /at 12/12/2019 20:30 12/12/2019 20:40\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand5.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a problem with the date\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand6 \u003d new EventCommand(\"event testNoDate /at - 12/12/2019 20:30\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand6.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no date\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand7 \u003d new EventCommand(\"event testNoDate /at 12/12/2019 20:30 - \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand7.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no date\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand8 \u003d new EventCommand(\"event testNoDate /at a - b\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand8.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a wrong format\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"date doesn\u0027t exist\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand9 \u003d new EventCommand(\"event testNoDate /at 12-12-2019 20:30 - 12-12-2019 20:40\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand9.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a wrong format\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"date doesn\u0027t exist\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand10 \u003d new EventCommand(\"event testNoDate /at 12/12/2019 2030 - 12/12/2019 20:40\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand10.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a wrong format\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"date doesn\u0027t exist\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand11 \u003d new EventCommand(\"event testConflictDate /at 11/12/2019 20:20 - 11/12/2019 21:00\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand11.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a conflict between the date\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"conflict\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand12 \u003d new EventCommand(\"event testConflictDate /at 11/12/2019 20:20 - 12/12/2019 21:00\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand12.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a conflict between the date\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"conflict\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand13 \u003d new EventCommand(\"event testConflictDate /at 12/12/2019 20:20 - 12/12/2019 21:00\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand13.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a conflict between the date\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"conflict\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand14 \u003d new EventCommand(\"event testConflictDate /at 12/12/2019 20:20 - 12/12/2019 20:30\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            eventCommand14.execute(tasks,ui, storage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a conflict between the date\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EmptyEventException | EmptyEventDateException | FileException | NonExistentDateException | ConflictDateException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"conflict\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 156,
      "laurenthg": 1
    }
  },
  {
    "path": "src/test/java/leduc/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a JUnit test class for the Parser."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a JUnit test method to test if the parser could"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * create the right command depending on the input String (user)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandCreatedTest(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"ok\") instanceof MeaninglessCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(parser.parse(\"listlist\") instanceof ListCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"find eizae\") instanceof FindCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"done 12\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(parser.parse(\"done okk\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"delete 12\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(parser.parse(\"delete e\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"todo ekzoa\") instanceof TodoCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"deadline d1\")instanceof DeadlineCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"event e\") instanceof EventCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"bye\")instanceof ByeCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"edit\")instanceof EditCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"setwelcome message\")instanceof SetWelcomeCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"postpone 2 /by 12/12/2000 22:22\")instanceof PostponeCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"reschedule 2 /at 12/12/2000 11:11 - 13/12/2000 12:22\")instanceof RescheduleCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"snooze 2\")instanceof SnoozeCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"help\")instanceof HelpCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"sort date\")instanceof SortCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"sort description\")instanceof SortCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(parser.parse(\"bye \" )instanceof ByeCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "laurenthg": 8
    }
  },
  {
    "path": "src/test/java/leduc/SortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.command.SortCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a JUnit test class for the SortCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents a JUnit test method for the SortCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void SortCommandExecuteTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Storage storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/testFile/SortCommandTest.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks \u003d new TaskList(storage.load()); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.print();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"d1\",tasks.get(0).getTask());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadline\",tasks.get(1).getTask());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"e1\",tasks.get(2).getTask());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadlineOther\",tasks.get(3).getTask());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"\u0026\",tasks.get(4).getTask());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"1\",tasks.get(5).getTask());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"2\",tasks.get(6).getTask());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"5\",tasks.get(7).getTask());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td1\",tasks.get(8).getTask());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td3\",tasks.get(9).getTask());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td4\",tasks.get(10).getTask());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td5\",tasks.get(11).getTask());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test\",tasks.get(12).getTask());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 2\",tasks.get(13).getTask());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 3\",tasks.get(14).getTask());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand1 \u003d new SortCommand(\"sort ok\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof MeaninglessException);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand2 \u003d new SortCommand(\"sort 4\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof MeaninglessException);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand3 \u003d new SortCommand(\"sort description\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"\u0026\",tasks.get(0).getTask());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"1\",tasks.get(1).getTask());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"2\",tasks.get(2).getTask());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"5\",tasks.get(3).getTask());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"d1\",tasks.get(4).getTask());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadline\",tasks.get(5).getTask());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadlineOther\",tasks.get(6).getTask());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"e1\",tasks.get(7).getTask());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td1\",tasks.get(8).getTask());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td3\",tasks.get(9).getTask());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td4\",tasks.get(10).getTask());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td5\",tasks.get(11).getTask());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test\",tasks.get(12).getTask());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 2\",tasks.get(13).getTask());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 3\",tasks.get(14).getTask());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand4 \u003d new SortCommand(\"sort date\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"d1\",tasks.get(0).getTask());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadline\",tasks.get(1).getTask());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"e1\",tasks.get(2).getTask());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadlineOther\",tasks.get(3).getTask());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"\u0026\",tasks.get(4).getTask());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"1\",tasks.get(5).getTask());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"2\",tasks.get(6).getTask());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"5\",tasks.get(7).getTask());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td1\",tasks.get(8).getTask());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td3\",tasks.get(9).getTask());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td4\",tasks.get(10).getTask());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td5\",tasks.get(11).getTask());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test\",tasks.get(12).getTask());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 2\",tasks.get(13).getTask());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 3\",tasks.get(14).getTask());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 123
    }
  }
]
