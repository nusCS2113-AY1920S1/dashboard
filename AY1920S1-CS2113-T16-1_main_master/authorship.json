[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": "group \u0027leduc.Duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "version \u00271.3.1\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"leduc.Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            srcDirs \"src/main/resources\", \"data\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"leduc\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    archiveVersion \u003d \"v1.3.1\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 1,
      "-": 37,
      "laurenthg": 10
    }
  },
  {
    "path": "src/main/java/leduc/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.NonExistentDateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a date and contains a GregorianCalendar type field."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.Date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param date LocalDateTime which is a date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public Date(LocalDateTime date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *  Constructor of leduc.Date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param date the String date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the task to delete does not exist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public Date( String date ) throws NonExistentDateException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d1 \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(date.trim(), formatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new NonExistentDateException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        this.date \u003d d1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow to snooze the date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fixed to 30 minutes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void snoozeLocalDateTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "        this.date \u003d this.date.plusMinutes(30);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Setter of the LocalDateTime date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param date the new value of date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void setDate(LocalDateTime date) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Getter of the LocalDateTime date"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return date the LocalDateTime date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String representing a date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String representation of date."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter formatters \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String dateFormatted \u003d this.date.format(formatters);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateFormatted; //no need secondes and time zone"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huangje": 15,
      "-": 46,
      "laurenthg": 17
    }
  },
  {
    "path": "src/main/java/leduc/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.command.ShortcutCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "//import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the main program leduc.Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Run the project from here."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.Duke class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialization of ui,parser, tasks list and storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The tasks will load the information provided by the data file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath String which represents the path of the data file to load."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke(String[] filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ShortcutCommand.initializedSetShortcut();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String file;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String configFile;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String welcomeFile;// file name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (filePath.length !\u003d 0 ){ // text-ui-test : test file in case of test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            file \u003d filePath[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            configFile\u003d filePath[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            welcomeFile \u003d filePath[2];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        else{ // no test file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            file \u003d System.getProperty(\"user.dir\")+ \"/data/duke.txt\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            configFile\u003d System.getProperty(\"user.dir\")+ \"/data/config.txt\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            welcomeFile \u003d System.getProperty(\"user.dir\")+ \"/data/welcome.txt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            // try to use txt file inside the jar file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            //URL file \u003d getClass().getClassLoader().getResource(\"duke.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            //URL configFile \u003d getClass().getClassLoader().getResource(\"config.txt\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            //URL welcomeFile \u003d getClass().getClassLoader().getResource(\"welcome.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.storage \u003d new Storage(file, configFile,welcomeFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tasks \u003d new TaskList(storage.load()); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(this.storage.getLanguage().equals(\"en\")){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "                this.ui \u003d new UiEn();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else if (this.storage.getLanguage().equals(\"fr\")){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "                this.ui \u003d new UiFr();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method which run the duke program."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.ui.showWelcome(storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        catch (DukeException e){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String user \u003d this.ui.readCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Command c \u003d parser.parse(user);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                c.execute(tasks, ui, storage); // parser is needed because stringToDate is in leduc.Parser class"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (DukeException e){ // catch one of subclass of dukeException and print the right message"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                e.print();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main of leduc.Duke."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args String[] which could be the data file to load."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        new Duke(args).run();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 9,
      "rshah918": 5,
      "-": 65,
      "laurenthg": 18
    }
  },
  {
    "path": "src/main/java/leduc/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a leduc.Parser which deals with making sense of the user command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of a leduc.Parser."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public Parser(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the leduc.command.Command instanced according to the input string of the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a leduc.command.Command which is asked by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parse(String user){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Command c ;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if (user.equals(ListCommand.getListShortcut()) | (user.matches(\"list\"))) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new ListCommand(user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"find (.*)\") | user.matches(\"find\")){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new FindCommand(user);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(FindCommand.getFindShortcut()+\" (.*)\") | user.matches(FindCommand.getFindShortcut())) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new FindCommand(user);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"done \\\\d+\")) {// if it is done and a number of task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new DoneCommand(user);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(DoneCommand.getDoneShortcut() + \" \\\\d+\")) {// if it is done and a number of task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new DoneCommand(user);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"snooze \\\\d+\")){ // if it is snooze and a number of task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new SnoozeCommand(user);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(SnoozeCommand.getSnoozeShortcut() + \" \\\\d+\")){ // if it is snooze and a number of task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new SnoozeCommand(user);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        else if (user.matches(\"postpone \\\\d+ (.*)\")){ //example: postpone 1 /by 12/12/2012 22:22"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new PostponeCommand(user);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(PostponeCommand.getPostponeShortcut() + \" \\\\d+ (.*)\")){ //example: postpone 1 /by 12/12/2012 22:22"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new PostponeCommand(user);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (user.trim().matches(\"edit(.*)\")){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new EditCommand(user);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (user.trim().matches(EditCommand.getEditShortcut()+ \"(.*)\")){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new EditCommand(user);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (user.matches(\"delete \\\\d+\")) {// if it is delete and a number of task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new DeleteCommand(user);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (user.matches(DeleteCommand.getDeleteShortcut() + \" \\\\d+\")) {// if it is delete and a number of task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new DeleteCommand(user);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"sort (.*)\") | user.matches(\"sort\")){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new SortCommand(user);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(SortCommand.getSortShortcut() + \" (.*)\") | user.matches(SortCommand.getSortShortcut())){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new SortCommand(user);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"todo (.*)\") | user.matches(\"todo\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new TodoCommand(user);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(TodoCommand.getTodoShortcut() + \" (.*)\") | user.matches(TodoCommand.getTodoShortcut())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new TodoCommand(user);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else if (user.matches(\" homework (.*)\") | user.matches(\" homework\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c \u003d new HomeworkCommand(user);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else if (user.matches(HomeworkCommand.getHomeworkShortcut() + \"(.*)\") | user.matches(HomeworkCommand.getHomeworkShortcut())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c \u003d new HomeworkCommand(user);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"event (.*)\") | user.matches(\"event\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new EventCommand(user);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(EventCommand.getEventShortcut() + \" (.*)\") | user.matches(EventCommand.getEventShortcut())) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new EventCommand(user);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"reschedule \\\\d+ (.*)\") | user.matches(\"reschedule\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new RescheduleCommand(user);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(RescheduleCommand.getRescheduleShortcut() + \" \\\\d+ (.*)\") | user.matches(RescheduleCommand.getRescheduleShortcut())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new RescheduleCommand(user);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (user.matches(\"prioritize \\\\d+ (.*)\") | user.matches(\"prioritize\")){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new PrioritizeCommand(user);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (user.matches(PrioritizeCommand.getPrioritizeShortcut() + \" \\\\d+ (.*)\") | user.matches(PrioritizeCommand.getPrioritizeShortcut())) { // prioritize 1 prio 2"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c \u003d new PrioritizeCommand(user);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"setwelcome (.*)\") | user.matches(\"setwelcome\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new SetWelcomeCommand(user);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(SetWelcomeCommand.getSetWelcomeShortcut() + \" (.*)\") | user.matches(SetWelcomeCommand.getSetWelcomeShortcut())) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c \u003d new SetWelcomeCommand(user);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"show (.*)\") | user.matches(\"show\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new ShowCommand(user);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches( ShowCommand.getShowShortcut() + \" (.*)\") | user.matches(ShowCommand.getShowShortcut())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new ShowCommand(user);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(RemindCommand.getRemindShortcut()) || user.matches(\"remind\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c \u003d new RemindCommand(user);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else if (user.matches(UnfinishedCommand.getUnfinishedShortcut()) || user.matches(\"unfinished\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c \u003d new UnfinishedCommand(user);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(user.matches(HelpCommand.getHelpShortcut()) || user.matches(\"help\")){"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new HelpCommand(user);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(ByeCommand.getByeShortcut()) || user.matches(\"bye\")){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new ByeCommand(user);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else if (user.matches(\"stats (.*)\") | user.matches(\"stats\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c \u003d new StatsCommand(user);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else if (user.matches(StatsCommand.getStatsShortcut() + \" (.*)\") | user.matches(StatsCommand.getStatsShortcut())) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c \u003d new StatsCommand(user);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(user.matches(\"shortcut\") | user.matches(\"shortcut (.*)\")){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new ShortcutCommand(user);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(\"language (.*)\") | user.matches(\"language\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new LanguageCommand(user);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (user.matches(LanguageCommand.getLanguageShortcut() + \" (.*)\") | user.matches(LanguageCommand.getLanguageShortcut())) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c \u003d new LanguageCommand(user);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "            c.calledByShortcut();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            c \u003d new MeaninglessCommand(user);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return c ;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 59,
      "rshah918": 20,
      "-": 53,
      "laurenthg": 29
    }
  },
  {
    "path": "src/main/java/leduc/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.HomeworkTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *  Represents leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "public abstract class Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of the leduc.Ui"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the String representing the next line of command of the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the String representing the next line of command of the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.sc.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Returns a File object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return a file object containing the welcome message"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public static File openFile(String filepath) throws FileException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //open file, throw exception if the file doesnt exist."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        File file;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        file \u003d new File(filepath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display the duke logo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayLogo(){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Show welcome to the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void showWelcome(Storage storage) throws FileException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //open the file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        File file \u003d storage.getWelcomeFile();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //create Scanner object to read file"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        Scanner sc2 \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            sc2 \u003d new Scanner(file);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String welcomeMessage \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //build welcome message"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        while (sc2.hasNext()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            welcomeMessage \u003d welcomeMessage + \u0027\\t\u0027 + sc2.nextLine() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //display welcome message"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.displayLogo();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        this.display(welcomeMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Bye message to the user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showBye();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when a task has been delete"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param removedTask the task that was removed"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param size the size of the TaskList after deletion"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showDelete(Task removedTask, int size);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when a task has been done"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param doneTask the task that has been done"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showDone(Task doneTask);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when a new task has been added"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param newTask the new task that has been added"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param size the size of the TaskList after the addition"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showTask(Task newTask, int size);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when there is a matching for the find"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param result the list of all matching task"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showFindMatching(String result);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when there is no matching for the find"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showFindNotMatching();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when there is no task to display"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showNoTask();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when a task has been postponed"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param postponeTask the task that has been postponed"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showPostpone(HomeworkTask postponeTask);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when there is a task where the priority has been set"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param task the task where the priority has been set"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showPrioritize(Task task);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when a task has been rescheduled"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param rescheduleTask the task that has been rescheduled"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showReschedule(EventsTask rescheduleTask);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when a new welcome message has been set"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param welcomeMessage the new welcome message"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showNewWelcome(String welcomeMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when a task has been snoozed"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param snoozeTask"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showSnooze(HomeworkTask snoozeTask);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when the list of tasks has been sorted"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showSort();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Display this message when the user wants some general statistics"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param numTasks number of tasks"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param numTodos number of todos"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param numEvents number of events"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param numHomework number of homework"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param numIncomplete number of uncompleted task"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param numComplete number of completed task"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param percentComplete percent complete"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public abstract void showGeneralStats(double numTasks, double numTodos, double numEvents, double numHomework,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                                   double numIncomplete, double numComplete, double percentComplete);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Dispplays priority statistics"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param numNinePrio \u003d number of 9 priority tasks"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param numEightPrio \u003d number of 8 priority tasks"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param numSevenPrio \u003d number of 7 priority tasks"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param numSixPrio \u003d number of 6 priority tasks"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param numFivePrio \u003d number of 5 priority tasks"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param numFourPrio \u003d number of 4 priority tasks"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param numThreePrio \u003d number of 3 priority tasks"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param numTwoPrio \u003d number of 2 priority tasks"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param numOnePrio \u003d number of 1 priority tasks"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param percentNinePrio \u003d % of 9 priority tasks"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param percentEightPrio \u003d % of 8 priority tasks"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param percentSevenPrio \u003d % of 7 priority tasks"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param percentSixPrio \u003d % of 6 priority tasks"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param percentFivePrio \u003d % of 5 priority tasks"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param percentFourPrio \u003d % of 4 priority tasks"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param percentThreePrio \u003d % of 3 priority tasks"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param percentTwoPrio \u003d % of 2 priority tasks"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param percentOnePrio \u003d % of 1 priority tasks"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public abstract void showPriorityStats(int numNinePrio, int numEightPrio, int numSevenPrio, int numSixPrio, int numFivePrio, int numFourPrio, int numThreePrio, int numTwoPrio, int numOnePrio, double percentNinePrio, double percentEightPrio,double percentSevenPrio, double percentSixPrio, double percentFivePrio, double percentFourPrio, double percentThreePrio, double percentTwoPrio, double percentOnePrio);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Displays completion statistics"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param numIncompleteHomework \u003d number of incomplete homeworks"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param numIncompleteTodo \u003d number of incomplete Todo\u0027s"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param numIncompleteEvent \u003d number of incomplete events"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param percentIncompleteHomework \u003d % of incomplete homeworks"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param percentIncompleteTodo \u003d % of incomplete Todo\u0027s"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param percentIncompleteEvent \u003d % of incomplete Events"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public abstract void showCompletionStats( int numIncompleteHomework,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rshah918"
        },
        "content": "             int numIncompleteTodo,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rshah918"
        },
        "content": "             int numIncompleteEvent,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rshah918"
        },
        "content": "             double percentIncompleteHomework,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rshah918"
        },
        "content": "             double percentIncompleteTodo,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rshah918"
        },
        "content": "             double percentIncompleteEvent);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display this message when a new language has been set for the program"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param lang the new language"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showLanguage(String lang);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display the String in the parameter between two lines."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param s String which will be printed."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display(String s){"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Display the unfinished tasks to the terminal"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param unfinishedTasks the arraylist of unfinished tasks."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showUnFinishedTasks(ArrayList\u003cTask\u003e unfinishedTasks);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display the list of tasks."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks tasks list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showList(TaskList tasks);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the program want to show a partial list with their right index"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param notCompleteTasks the partial list"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param tasks the complete list that will be compare to"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showNotCompleteList(ArrayList\u003cTask\u003e notCompleteTasks, TaskList tasks);//print the task so they have the same index"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display the error message"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param e the error that has been catch"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showError(DukeException e);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Display every command"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showHelp();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the program ask the user which task he want to edit"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showEditChooseTask();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the program ask the user to choose between 2 choices : description or deadline/period"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showEdit2Choice();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the program ask the user to enter a new information for the choice"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param choice the choice : description, deadline or period"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showEditWhat(String choice);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display the task that has been edited"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param task the task that has been edited"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showEdit(Task task);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the program ask the user to set a shortcut name for the command name"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param commandName the command name that will have a new shortcut name"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showAskShortcut(String commandName);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the program ask the user to set a shortcut name for the command name"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param commmandName command name"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param shortcutName the previous shortcut name"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showAskAllShortcut(String commmandName, String shortcutName);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display after setting a shortcut name for the command name"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param commandName the command name which the shortcut name has been set"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showOneShortcutSet(String commandName);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the shortcut for all the command has been set"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showAllShortcutSet();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the program ask the user to enter a day date"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showEnterDayShow();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the program ask the user to enter a day of week"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showEnterDayOfWeekShow();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the program ask the user to enter a month"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showEnterMonthShow();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the program ask the user to enter a year"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showEnterYearShow();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the edit shortcut mode terminate earlier"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void terminateShortcut();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display when the user want to show to another language rathan than those available"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public abstract void showErrorLanguage();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 182,
      "rshah918": 89,
      "-": 68,
      "laurenthg": 5
    }
  },
  {
    "path": "src/main/java/leduc/UiEn.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.HomeworkTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class UiEn extends Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public UiEn() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showBye(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showDelete(Task removedTask, int size) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Noted. I\u0027ve removed this task: \\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\t\\t\" + removedTask.toString() +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\n\\t Now you have \"+ size +\" tasks in the list\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showDone(Task doneTask) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Nice! I\u0027ve marked this task as done:\\n\\t \" + doneTask.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showTask(Task newTask, int size) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Got it. I\u0027ve added this task:\\n\\t   \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "                + newTask.toString() +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\n\\t Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showFindMatching(String result) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super.display(\"\\t Here are the most relevant tasks in your list:\\n\" + result);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showFindNotMatching() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t There is no matching tasks in your list\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showList(TaskList tasks){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "        for (int i \u003d 0 ;i\u003c tasks.size() ; i++ ){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.print(tasks.displayOneElementList(i));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showNoTask() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t There is any task yet \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showPostpone(HomeworkTask postponeTask) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Noted. I\u0027ve postponed this task: \\n\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\t\\t \"+postponeTask.getTag() + postponeTask.getMark() + \" \" + postponeTask.getTask()+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \" by:\" + postponeTask.getDeadlines() + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showPrioritize(Task task) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Got it. I\u0027ve set the priority of this task:\\n\\t   \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                + task.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showReschedule(EventsTask rescheduleTask) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Noted. I\u0027ve rescheduled this task: \\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\t\\t \"+rescheduleTask.getTag() + rescheduleTask.getMark() + \" \" +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "                rescheduleTask.getTask()+ \" at:\" + rescheduleTask.getDateFirst() +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \" - \" + rescheduleTask.getDateSecond() + \"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showNewWelcome(String welcomeMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t The welcome message is edited: \" + welcomeMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showSnooze(HomeworkTask snoozeTask) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Noted. I\u0027ve snoozed this task: \\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\t\\t \"+snoozeTask.getTag() + snoozeTask.getMark() + \" \" + snoozeTask.getTask()+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \" by:\" + snoozeTask.getDeadlines() + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showSort() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t This is the new task list order: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void showGeneralStats(double numTasks, double numTodos, double numEvents, double numHomework, double numIncomplete, double numComplete, double percentComplete) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String message \u003d \"Here are some general statistics about your task list: \\n\" +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Number of tasks: \" + numTasks + \"\\n\" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Number of Todo\u0027s : \" + numTodos + \"\\n\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Number of Events: \" + numEvents + \"\\n\" +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Number of Homeworks: \" + numHomework + \"\\n\" +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Number of Uncompleted Tasks: \" + numIncomplete + \"\\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Number of Completed Tasks: \" + numComplete + \"\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent Complete: \" + percentComplete + \"%\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super.display(message);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void showPriorityStats(int numNinePrio, int numEightPrio, int numSevenPrio, int numSixPrio, int numFivePrio, int numFourPrio, int numThreePrio, int numTwoPrio, int numOnePrio, double percentNinePrio, double percentEightPrio,double percentSevenPrio, double percentSixPrio, double percentFivePrio, double percentFourPrio, double percentThreePrio, double percentTwoPrio, double percentOnePrio){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String message \u003d \"Here are some priority statistics about your task list: \\n\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"----PRIORITY COUNTS----\" + \"\\n\" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 9: \" + numNinePrio + \"\\n\" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 8: \" + numEightPrio + \"\\n\" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 7: \" + numSevenPrio + \"\\n\" +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 6: \" + numSixPrio + \"\\n\" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 5: \" + numFivePrio + \"\\n\" +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 4: \" + numFourPrio + \"\\n\" +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 3: \" + numThreePrio + \"\\n\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 2: \" + numTwoPrio + \"\\n\" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 1: \" + numOnePrio + \"\\n\" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"----PRIORITY PERCENTAGES----\" + \"\\n\" +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 9: \" + percentNinePrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 8: \" + percentEightPrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 7: \" + percentSevenPrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 6: \" + percentSixPrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 5: \" + percentFivePrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 4: \" + percentFourPrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 3: \" + percentThreePrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 2: \" + percentTwoPrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 1: \" + percentOnePrio + \"%\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super.display(message);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void showCompletionStats( int numIncompleteHomework, int numIncompleteTodo, int numIncompleteEvent,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                                     double percentIncompleteHomework, double percentIncompleteTodo, double percentIncompleteEvent){"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String message \u003d \"Here are some completion statistics about your task list: \\n\" +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"----COMPLETION COUNTS----\" + \"\\n\" +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of incomplete Homeworks remaining: \" + numIncompleteHomework + \"\\n\" +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of incomplete Todos remaining: \" + numIncompleteTodo + \"\\n\" +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of incomplete Events  remaining: \" + numIncompleteEvent + \"\\n\" +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"----COMPLETION PERCENTAGES----\" + \"\\n\" +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of incomplete Homework: \" + percentIncompleteHomework + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of incomplete Todo: \" + percentIncompleteTodo + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of incomplete Events: \" + percentIncompleteEvent + \"%\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super.display(message);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showUnFinishedTasks(ArrayList\u003cTask\u003e unfinishedTasks) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "        //print the task so they have the same index"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "        TaskList unfinishedTaskList \u003d new TaskList(unfinishedTasks);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "        for(int i \u003d 0; i \u003c unfinishedTaskList.size(); i++){"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "            Task task \u003d unfinishedTaskList.get(i);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "            result +\u003d unfinishedTaskList.displayOneElementList(i);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(result.equals(\"\")){"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t There are no unfinished tasks in your list\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t Here are the unfinished tasks in your list:\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(result);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showHelp(){"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t All command will be display as :\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t commandName [PARAMETERS] : description of the command\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t All parameters will be written in UPPER_CASE\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Parameters are :\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t DESCRIPTION : the description of a task\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t SORTTYPE : date, description, priority, type or done\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t DATE : the date of a task\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t INDEX : the index of the task (goes from 1 to ...)\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t KEYWORD : the keyword to find a task\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t WELCOME: the welcome message\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t DATEOPTION\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Date format is DD/MM/YYYY HH:mm except for show\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t All blank space should be respected\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Here are the list of all command:\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t todo DESCRIPTION prio INDEX: create a todo task ( prio index is optional) with priority index\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t homework DESCRIPTION /by DATE prio INDEX recu DATEOPTION INDEX: create a homework task ( prio index is optional) with priority index\" +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \" (recu is optional) with a recurrence of DATEOPTION(day, week, month) and the number of recurrence of INDEX\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t event DESCRIPTION /at DATE - DATE prio INDEX  recu DATEOPTION INDEX: create an event task ( prio index is optional) with priority index\" +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \" (recu is optional) with a recurrence of DATEOPTION(day, week, month) and the number of recurrence of INDEX\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t list : show all the tasks\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t bye : exit the application\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t done INDEX : mark as done the task of index INDEX\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t delete INDEX : delete the task of index INDEX\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t find KEYWORD : find the task with a keyword\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t snooze INDEX : snooze a task of index INDEX\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t postpone INDEX /by DATE : postpone a deadline task\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t sort SORTTYPE : Sort all task by date/description/priority/type/done or not\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t reschedule INDEX /at DATE - DATE : reschedule an event task\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t remind : remind the first three task\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t setwelcome WELCOME : customize the welcome message\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t edit :\\n\\t\\t For multi-step command : \u0027edit\u0027 and then follow the instructions\" +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huangje"
        },
        "content": "                           \"\\n\\t\\t For one shot command:\" +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huangje"
        },
        "content": "                           \"\\n\\t\\t\\t edit the description: \u0027edit INDEX description DESCRIPTION\u0027 \" +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huangje"
        },
        "content": "                           \"\\n\\t\\t\\t edit the date of an homework task: \u0027edit INDEX /by DATE\u0027 \" +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huangje"
        },
        "content": "                           \"\\n\\t\\t\\t edit the period of an event task: \u0027edit INDEX /at DATE - DATE\u0027 \");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t show DATEOPTION DATE: show task by day/dayofweek/month/year ( day format is DD/MM/YYYY; \" +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"dayofweek format is monday,tuesday...; month format is MM/YYYY; year format is YYYY)\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t prioritize INDEX prio INDEX : give priority to task\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t unfinished: Find and display all unfinished tasks\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t language LANG: change the language of the program at the next execution. LANG is equal to en or fr\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t help : show the list of all command\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showLanguage(String lang) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"This is the language that will be used after the next execution :\" + lang);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEditChooseTask() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Please choose the task to edit from the list by its index: \");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEdit2Choice() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Please choose what you want to edit (1 or 2)\\n\\t 1. The description \" +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\n\\t 2. The deadline/period\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEditWhat(String choice) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Please enter the new \" + choice + \" of the task\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEdit(Task task) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t The task is edited: \\n\\t \" + task.toString());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showAskShortcut(String commandName) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"Please enter a shortcut for \" + commandName);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showAskAllShortcut(String commmandName, String shortcutName) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"The precedent shortcut for \"+commmandName+ \" is \" + shortcutName +\" please enter new shortcut\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showOneShortcutSet(String commandName) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"The shortcut for \" + commandName +\" has been set\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showAllShortcutSet() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"All shortcut has been set\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEnterDayShow() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"You have enter the show day mode. Please enter the day as : DD/MM/YYYY\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEnterDayOfWeekShow() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"You have enter the show day of week mode. Please enter the day of the week as : monday, tuesday, wednesday, thursday, friday, saturday, sunday\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEnterMonthShow() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"You have enter the show month mode. Please enter the month as : MM/YYYY\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEnterYearShow() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"You have enter the show year mode. Please enter the year as : YYYY\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showNotCompleteList(ArrayList\u003cTask\u003e notCompleteTasks, TaskList tasks) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huangje"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(notCompleteTasks.contains(tasks.get(i))){"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huangje"
        },
        "content": "                System.out.print(tasks.displayOneElementList(i));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showError(DukeException e) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(e instanceof ConflictDateException){"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String conflictTasks \u003d \"\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "huangje"
        },
        "content": "            for (Task t : ((ConflictDateException)e).getTasks()){"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huangje"
        },
        "content": "                conflictTasks +\u003d \"\\n\\t\\t\\t\" + t.toString();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t ConflictDateException:\\n\\t\\t ☹ OOPS!!! There is a date conflict with this event :\" +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    conflictTasks);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof DateComparisonEventException){"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t DateComparisonEventException:\\n\\t\\t ☹ OOPS!!! The second date should not be before the first one.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof DuplicationShortcutException){"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t DuplicationShortcutException:\\n\\t\\t ☹ OOPS!!! The shortcut already exists\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EmptyArgumentException){"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t EmptyArgumentException:\\n\\t\\t ☹ OOPS!!! There should have an argument\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EmptyEventDateException){"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t emptyEventDateException:\\n\\t\\t ☹ OOPS!!! Please enter a period for the event task\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EmptyEventException){"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t emptyEventException:\\n\\t\\t ☹ OOPS!!! The description of a event task cannot be empty\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EmptyHomeworkDateException){"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t emptyHomeworkDateException:\\n\\t\\t ☹ OOPS!!! Please enter a deadline for the task\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EmptyHomeworkException){"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t emptyHomeworkException:\\n\\t\\t ☹ OOPS!!! The description of a homework task cannot be empty\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EmptyTodoException){"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t emptyTodoException:\\n\\t\\t ☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EventTypeException){"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t EventTypeException:\\n\\t\\t ☹ OOPS!!! The task should be a event task\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof FileException){"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"File doesn\u0027t exist or cannot be created or cannot be opened\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof HomeworkTypeException){"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t HomeworkTypeException:\\n\\t\\t ☹ OOPS!!! The task should be a homework task\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof MeaninglessException){"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t MeaninglessException:\\n\\t\\t OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\\"\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof NonExistentDateException){"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t NonExistentDateException:\\n\\t\\t ☹ OOPS!!! \\n\\t\\t\\t The date doesn\u0027t exist\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof NonExistentTaskException){"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t NonExistentTaskException:\\n\\t\\t ☹ OOPS!!! The task doesn\u0027t exist\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof PostponeHomeworkException){"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t PostponeHomeworkException:\\n\\t\\t ☹ OOPS!!! The new homework should not be before the old one\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof PrioritizeFormatException){"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t PrioritizeFormatException:\\n\\t\\t ☹ OOPS!!! Please respect the prioritize command format\" +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    \"\\n\\t\\t\\t prioritize INDEX prio INDEX\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof PrioritizeLimitException){"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t PrioritizeLimitException:\\n\\t\\t ☹ OOPS!!! The priority of a task should be an int greater than or equal to  0 and less than or equal to 9.\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof WrongParameterException){"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t WrongParameterException:\\n\\t\\t ☹ OOPS!!! The parameters are wrong\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (e instanceof EventDateException){"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            System.out.println(\"\\t EventDateException:\\n\\t\\t ☹ OOPS!!! The start date should be before the end date for an event task\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if(e instanceof EditFormatException){"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            System.out.println(\"\\t EditFormatException:\\n\\t\\t ☹ OOPS!!! Please respect the edit command format\" +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                     \"\\n\\t\\t For multi-step command : \u0027edit\u0027 and then follow the instructions\" +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                     \"\\n\\t\\t For one shot command:\" +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    \"\\n\\t\\t\\t edit the description: \u0027edit INDEX description DESCRIPTION\u0027\"+"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    \"\\n\\t\\t\\t edit the date of an homework task: \u0027edit INDEX /by DATE\u0027\"+"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    \"\\n\\t\\t\\t edit the period of an event task: \u0027edit INDEX /at DATE - DATE\u0027\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (e instanceof UserAnswerException){"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            System.out.println(\"\\t UserAnswerException:\\n\\t\\t ☹ OOPS!!! Please answer correctly the question.\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else if (e instanceof InvalidFlagException) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            System.out.println(\"\\t InvalidFlagException:\\n\\t\\t ☹ Invalid Flag!\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof RecurrenceException){"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t RecurrenceException:\\n\\t\\t ☹ OOPS!!! Please respect the recurrence format\" +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    \"\\n\\t\\t\\t recu TYPEOFRECURRENCE NBRECURRENCE\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof RecurrenceDateException){"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t RecurrenceException:\\n\\t\\t ☹ OOPS!!! You are trying to make the event recurrent but there will be a conflict date if those events are created\" +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    \"\\n\\t\\t\\t The event has not been created, please check the date\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void terminateShortcut() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"The shortcut edit mode is being terminated earlier. All shortcut edited until now has been saved\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showErrorLanguage() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"The language that you have chosen is currently not available\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 337,
      "rshah918": 48,
      "laurenthg": 17
    }
  },
  {
    "path": "src/main/java/leduc/UiFr.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.HomeworkTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class UiFr extends Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public UiFr() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showBye(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Bye. J\u0027espère qu\u0027on vous reverra bientôt!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showDelete(Task removedTask, int size) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t C\u0027est noté. J\u0027ai retiré la tâche: \\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\t\\t\" + removedTask.toString() +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\n\\t Maintenant vous avez \"+ size +\" tâches dans la liste\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showDone(Task doneTask) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Cool! J\u0027ai noté que vous aviez fini cette tâche :\\n\\t \" + doneTask.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showTask(Task newTask, int size) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Compris. J\u0027ai ajouté cette tâche :\\n\\t   \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "                + newTask.toString() +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\n\\t Maintenant vous avez \" + size + \" tâches dans la liste.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showFindMatching(String result) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\tVoici les tâches correspondants qui sont dans votre liste:\\n\" + result);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showFindNotMatching() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Il n\u0027y a pas de tâche correspondant dans votre liste\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showList(TaskList tasks){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Voici les tâches dans votre liste:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        for (int i \u003d 0 ;i\u003c tasks.size() ; i++ ){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.print(tasks.displayOneElementList(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showNoTask() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Il n\u0027y a pas encore de tâche\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showPostpone(HomeworkTask postponeTask) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t C\u0027est noté. J\u0027ai reporté cette tâche: \\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\t\\t \"+postponeTask.getTag() + postponeTask.getMark() + \" \" + postponeTask.getTask()+"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \" de:\" + postponeTask.getDeadlines() + \"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showPrioritize(Task task) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Compris. La priorité de cette tâche a été assignée:\\n\\t   \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                + task.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showReschedule(EventsTask rescheduleTask) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t C\u0027est noté. J\u0027ai replanifié cette tâche: \\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\t\\t \"+rescheduleTask.getTag() + rescheduleTask.getMark() + \" \" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "                rescheduleTask.getTask()+ \" à:\" + rescheduleTask.getDateFirst() +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \" - \" + rescheduleTask.getDateSecond() + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showNewWelcome(String welcomeMessage) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Le message de bienvenue a été édité : \" + welcomeMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showSnooze(HomeworkTask snoozeTask) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t C\u0027est noté. J\u0027ai snooze cette tâche : \\n\" +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\t\\t \"+snoozeTask.getTag() + snoozeTask.getMark() + \" \" + snoozeTask.getTask()+"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \" à :\" + snoozeTask.getDeadlines() + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showSort() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Voici la nouvelle liste de tâche dans l\u0027ordre: \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void showGeneralStats(double numTasks, double numTodos, double numEvents, double numHomework, double numIncomplete, double numComplete, double percentComplete) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"Voici quelques statistiques à propos de votre liste de tâche: \\n\" +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Nombre de tâche : \" + numTasks + \"\\n\" +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Nombre de Todo : \" + numTodos + \"\\n\" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Nombre de Event: \" + numEvents + \"\\n\" +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Nombre de Homework: \" + numHomework + \"\\n\" +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Nombre de tâche inaccomplie: \" + numIncomplete + \"\\n\" +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Nombre de tâche accomplie: \" + numComplete + \"\\n\" +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"Pourcentage accomplie: \" + percentComplete + \"%\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void showPriorityStats(int numNinePrio, int numEightPrio, int numSevenPrio, int numSixPrio, int numFivePrio, int numFourPrio, int numThreePrio, int numTwoPrio, int numOnePrio, double percentNinePrio, double percentEightPrio,double percentSevenPrio, double percentSixPrio, double percentFivePrio, double percentFourPrio, double percentThreePrio, double percentTwoPrio, double percentOnePrio){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String message \u003d \"Voici quelques statistiques prioritaires sur votre liste de tâches: \\n\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"---- COMPTE DE PRIORITÉ----\" + \"\\n\" +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Nombre de tâches avec priorité 9: \" + numNinePrio + \"\\n\" +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Nombre de tâches avec priorité 8: \" + numEightPrio + \"\\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Nombre de tâches avec priorité 7: \" + numSevenPrio + \"\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Nombre de tâches avec priorité 6: \" + numSixPrio + \"\\n\" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Nombre de tâches avec priorité 5: \" + numFivePrio + \"\\n\" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Nombre de tâches avec priorité 4: \" + numFourPrio + \"\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Nombre de tâches avec priorité 3: \" + numThreePrio + \"\\n\" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Nombre de tâches avec priorité 2: \" + numTwoPrio + \"\\n\" +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Nombre de tâches avec priorité 1: \" + numOnePrio + \"\\n\" +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"----POURCENTAGE DE PRIORITÉ----\" + \"\\n\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Pourcentage de tâches de priorité 9: \" + percentNinePrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Pourcentage de tâches de priorité 8: \" + percentEightPrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Pourcentage de tâches de priorité 7: \" + percentSevenPrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Pourcentage de tâches de priorité 6: \" + percentSixPrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Pourcentage de tâches de priorité 5: \" + percentFivePrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Pourcentage de tâches de priorité 4: \" + percentFourPrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Pourcentage de tâches de priorité 3: \" + percentThreePrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Pourcentage de tâches de priorité 2: \" + percentTwoPrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Pourcentage de tâches de priorité 1: \" + percentOnePrio + \"%\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super.display(message);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void showCompletionStats( int numIncompleteHomework, int numIncompleteTodo, int numIncompleteEvent,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                                     double percentIncompleteHomework, double percentIncompleteTodo, double percentIncompleteEvent){"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String message \u003d \"Voici quelques statistiques d\u0027achèvement de votre liste de tâches: \\n\" +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"----COMPLETION COMPTE----\" + \"\\n\" +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Nombre de devoirs incomplets restants: \" + numIncompleteHomework + \"\\n\" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of incomplete Todos remaining: \" + numIncompleteTodo + \"\\n\" +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Nombre de Todos incomplets restants: \" + numIncompleteEvent + \"\\n\" +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"-----POURCENTAGES DE FINITION----\" + \"\\n\" +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Pourcentage de devoirs incomplets: \" + percentIncompleteHomework + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Pourcentage de Todo incomplet: \" + percentIncompleteTodo + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Pourcentage d\u0027événements incomplets: \" + percentIncompleteEvent + \"%\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super.display(message);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showUnFinishedTasks(ArrayList\u003cTask\u003e unfinishedTasks) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "        //print the task so they have the same index"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huangje"
        },
        "content": "        TaskList unfinishedTaskList \u003d new TaskList(unfinishedTasks);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "        for(int i \u003d 0; i \u003c unfinishedTaskList.size(); i++){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "            Task task \u003d unfinishedTaskList.get(i);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "            result +\u003d unfinishedTaskList.displayOneElementList(i);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(result.equals(\"\")){"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t Il n\u0027y a pas de tâche inaccomplie dans votre liste de tâche\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t Voici la liste des tâches inaccomplie:\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(result);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showHelp() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Toutes les commandes vont être affichées ainsi :\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t commandName [PARAMETERS] : description de la command\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Tous les paramètres vont être écrits en MAJUSCULE\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Les paramètres sont :\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t DESCRIPTION : la description d\u0027une tâche\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t SORTTYPE :  date, description, priority, type ou done\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t DATE : la date d\u0027une tâche\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t INDEX : L\u0027index d\u0027une tâche (va de 1 à ...)\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t KEYWORD : mot-clé pour trouver une tâche\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t WELCOME: le message de bienvenue\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t DATEOPTION\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Le format de date est DD/MM/YYYY HH:mm sauf pour show\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Tous les espaces blancs doivent être respectés\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Voici la liste de toutes les commandes:\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t todo DESCRIPTION prio INDEX : crée une tâche Todo ( prio index est facultatif)avec une priorité index\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t homework DESCRIPTION /by DATE prio INDEX recu DATEOPTION INDEX: crée une tâche Homework ( prio index est facultatif)\" +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"avec une priorité index (recu est facultatif) avec une récurrence de type DATEOPTION (day, week, month) et de nombre INDEX \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t event DESCRIPTION /at DATE - DATE prio INDEX recu DATEOPTION INDEX: crée une tâche event ( prio index est facultatif)avec une priorité index\" +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \" (recu est facultatif) avec une récurrence de type DATEOPTION (day, week, month) et de nombre INDEX \");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t list : affiche toutes les tâches\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t bye : quitte l\u0027application\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t done INDEX : marque comme fait la tâche d\u0027index INDEX\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t delete INDEX : supprime la tâche d\u0027index INDEX\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t find KEYWORD : trouve une tâche avec un mot-clé\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t snooze INDEX : snooze une tâche d\u0027index INDEX\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t postpone INDEX /by DATE : reporté une tâche homework\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t sort SORTTYPE : range les tâches par date/description/priority/type/done\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t reschedule INDEX /at DATE - DATE : replanifié une tâche event\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t remind : Rappelle les trois premières tâches\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t setwelcome WELCOME : personnalise le message de bienvenue\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t edit :\\n\\t\\t Pour la commande en plusieurs étapes  : \u0027edit\u0027 et puis suivez les instructions\" +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huangje"
        },
        "content": "                           \"\\n\\t\\t Pour la commande en une étape:\" +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huangje"
        },
        "content": "                           \"\\n\\t\\t\\t edit la description: \u0027edit INDEX description DESCRIPTION\u0027 \" +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huangje"
        },
        "content": "                           \"\\n\\t\\t\\t edit la date d\u0027une tâche homework: \u0027edit INDEX /by DATE\u0027 \" +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huangje"
        },
        "content": "                           \"\\n\\t\\t\\t edit la period d\u0027une tâche event: \u0027edit INDEX /at DATE - DATE\u0027 \");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t show DATEOPTION DATE: montre les tâches par day/dayofweek/today/week/month/year ( day format is DD/MM/YYYY; \" +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"dayofweek format is monday,tuesday...; month format is MM/YYYY; year format is YYYY)\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t prioritize INDEX prio INDEX : donne une priorité à une tâche\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t unfinished: trouve et montre toutes les tâches inaccomplies\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t language LANG: change la langue du programme à la prochaine exécution du programme. LANG est égal à en ou fr\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t help : montre toutes les commandes\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showLanguage(String lang) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"Voici la langue qui sera utilisé à la prochaine exécution :\" + lang);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEditChooseTask() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Choisissez une tâche dans la liste par son index s\u0027il vous plait: \");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEdit2Choice() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Choisissez ce que vous voulez éditer (1 ou 2)\\n\\t 1. The description \" +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\n\\t 2. The deadline/period\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEditWhat(String choice) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t Entrez le nouveau \" + choice + \" de la tâche s\u0027il vous plait\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEdit(Task task) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"\\t La tâche a été éditée: \\n\\t \"+ task.toString());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showAskShortcut(String commandName) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"Entrez s\u0027il vous plait un raccourci pour \" + commandName);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showAskAllShortcut(String commmandName, String shortcutName) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"Le précédent raccourci pour \"+commmandName+ \" est \" + shortcutName +\" entrez un nouveau s\u0027il vous plait\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showOneShortcutSet(String commandName) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"Le raccourci pour \" + commandName +\" a été enregistré\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showAllShortcutSet() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super.display(\"Tous les raccourcis ont été enregistrés\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEnterDayShow() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.print(\"Vous êtes entré dans le mode show date. Veuillez entrer la date comme DD/MM/YYYY\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEnterDayOfWeekShow() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.print(\"Vous êtes entré dans le mode show jour de la semaine. Veuillez entrer le jour de la semaine comme monday, tuesday, wednesday, thursday, friday, saturday, sunday\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEnterMonthShow() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.print(\"Vous êtes entré dans le mode show mois. Veuilez entrer le mois comme MM/YYYY\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showEnterYearShow() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.print(\"Vous êtes entré dans le mode show année. Veuillez entrer l\u0027année comme YYYY\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showNotCompleteList(ArrayList\u003cTask\u003e notCompleteTasks, TaskList tasks) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t Voici les tâches dans votre liste:\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huangje"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(notCompleteTasks.contains(tasks.get(i))){"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huangje"
        },
        "content": "                System.out.print(tasks.displayOneElementList(i));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showError(DukeException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(e instanceof ConflictDateException){"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String conflictTasks \u003d \"\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huangje"
        },
        "content": "            for (Task t : ((ConflictDateException)e).getTasks()){"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huangje"
        },
        "content": "                conflictTasks +\u003d \"\\n\\t\\t\\t\" + t.toString();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t ConflictDateException:\\n\\t\\t ☹ OOPS!!! Il y a un conflit de date avec cet event :\" +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    conflictTasks);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof DateComparisonEventException){"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t DateComparisonEventException:\\n\\t\\t ☹ OOPS!!! La deuxième date ne devrait pas être avant la première.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof DuplicationShortcutException){"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t DuplicationShortcutException:\\n\\t\\t ☹ OOPS!!! Le raccourci existe déjà\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EmptyArgumentException){"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t EmptyArgumentException:\\n\\t\\t ☹ OOPS!!! Il devrait y avoir un argument\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EmptyEventDateException){"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t emptyEventDateException:\\n\\t\\t ☹ OOPS!!! Veuillez entrer une période pour la tâche event\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EmptyEventException){"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t emptyEventException:\\n\\t\\t ☹ OOPS!!! La description d\u0027une tâche event ne peut pas être vide\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EmptyHomeworkDateException){"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t emptyHomeworkDateException:\\n\\t\\t ☹ OOPS!!! Veuillez entrer l\u0027échéance pour la tâche homework\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EmptyHomeworkException){"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t emptyHomeworkException:\\n\\t\\t ☹ OOPS!!! La description d\u0027une tâche homework ne peut pas être vide\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EmptyTodoException){"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t emptyTodoException:\\n\\t\\t ☹ OOPS!!! La description d\u0027un todo ne peut pas être vide.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof EventTypeException){"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t EventTypeException:\\n\\t\\t ☹ OOPS!!! La tâche devrait être de type event\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof FileException){"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"Le fichier n\u0027existe pas ou ne peut pas être créé ou ne peut pas être ouvert\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof HomeworkTypeException){"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t HomeworkTypeException:\\n\\t\\t ☹ OOPS!!! La tâche devrait être de type homework\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof MeaninglessException){"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t MeaninglessException:\\n\\t\\t OOPS!!! Je suis désolé mais je ne sais pas ce que cela signifie:-(\\\"\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof NonExistentDateException){"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t NonExistentDateException:\\n\\t\\t ☹ OOPS!!! \\n\\t\\t\\t La date n\u0027existe pas)\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof NonExistentTaskException){"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t NonExistentTaskException:\\n\\t\\t ☹ OOPS!!! La tâche n\u0027existe pas\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof PostponeHomeworkException){"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t PostponeHomeworkException:\\n\\t\\t ☹ OOPS!!! Le nouveau homework ne devrait pas être avant l\u0027ancien\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof PrioritizeFormatException){"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t PrioritizeFormatException:\\n\\t\\t ☹ OOPS!!! Veuillez respecter le format de prioritize\" +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    \"\\n\\t\\t\\t prioritize INDEX prio INDEX\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof PrioritizeLimitException){"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t PrioritizeLimitException:\\n\\t\\t ☹ OOPS!!! La priorité d\u0027une tâche doit être supérieur ou égale à 0 et inférieur ou égale à 9.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof WrongParameterException){"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t WrongParameterException:\\n\\t\\t ☹ OOPS!!! Les paramètres sont faux\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (e instanceof EventDateException){"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            System.out.println(\"\\t EventDateException:\\n\\t\\t ☹ OOPS!!! La date de départ ne doit pas être postérieur à la date de fin pour une tâche event\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if(e instanceof EditFormatException){"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            System.out.println(\"\\t EditFormatException:\\n\\t\\t ☹ OOPS!!! Veuillez respecter le format de la command edit\" +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    \"\\n\\t\\t Command interactive : \u0027edit\u0027 puis suivez les instructions\" +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    \"\\n\\t\\t Command en une ligne:\" +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    \"\\n\\t\\t\\t éditer la description: \u0027edit INDEX description DESCRIPTION\u0027\"+"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    \"\\n\\t\\t\\t éditer la date d\u0027une tache homework : \u0027edit INDEX /by DATE\u0027\"+"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    \"\\n\\t\\t\\t éditer la période d\u0027une tâche event: \u0027edit INDEX /at DATE - DATE\u0027\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (e instanceof UserAnswerException){"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            System.out.println(\"\\t UserAnswerException:\\n\\t\\t ☹ OOPS!!! Veuillez répondre correctement à la question.\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else if (e instanceof InvalidFlagException) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            System.out.println(\"\\t InvalidFlagException:\\n\\t\\t ☹ OOPS!!! Drapeau invalide.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof RecurrenceException){"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t RecurrenceException:\\n\\t\\t ☹ OOPS!!! Respectez le format pour la recurrence\" +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    \"\\n\\t\\t\\t recu TYPEOFRECURRENCE NBRECURRENCE\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(e instanceof RecurrenceDateException){"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "huangje"
        },
        "content": "            System.out.println(\"\\t RecurrenceException:\\n\\t\\t ☹ OOPS!!! Vous êtes en train de créer un event récurrent, mais il y aura un conflit de date avec ces dates là\" +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    \"\\n\\t\\t\\t L\u0027event n\u0027a pas été créé, veuillez vérifier la date\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void terminateShortcut() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"Le mode d\u0027édition de shortcut a été terminé plus tôt. Tous les shortcut qui ont été édité ont été enregistré.\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void showErrorLanguage() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.out.println(\"La langue que vous aviez sélectionné est actuellement indisponible\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 326,
      "rshah918": 44,
      "laurenthg": 17
    }
  },
  {
    "path": "src/main/java/leduc/command/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a bye command when the user input \"bye\"."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String byeShortcut \u003d \"bye\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.command.ByeCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public  ByeCommand(String user){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execution of leduc.command.ByeCommand: the execution of leduc.Duke is ending and the leduc.Ui display a bye message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws FileException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns is true for a leduc.command.ByeCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param byeShortcut the new shortcut"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setByeShortcut(String byeShortcut){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ByeCommand.byeShortcut \u003d byeShortcut;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getByeShortcut(){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return ByeCommand.byeShortcut;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 21,
      "-": 39,
      "laurenthg": 1
    }
  },
  {
    "path": "src/main/java/leduc/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class which represent a Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The command asked by the user will be represented by one of the subclasses of leduc.command.Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String user;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "    protected boolean callByShortcut \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of Command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command(String user ){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.user\u003duser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method that return false except for the subclass ByeCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean: True if the input string of the user is \"bye\", False if not."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Abstract method: the operation of the specified command will be implemented."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException one of the subclass of leduc.exception.DukeException could be caught in the execution of this method."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void calledByShortcut(){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        this.callByShortcut \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 5,
      "-": 39
    }
  },
  {
    "path": "src/main/java/leduc/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.NonExistentTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Delete Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String deleteShortcut \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of DeleteCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public  DeleteCommand(String user){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Delete the task from the task list and rewrite the data file without the deleted task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task to delete does not exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws NonExistentTaskException, FileException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(DeleteCommand.deleteShortcut.length() + 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(7);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        int index \u003d Integer.parseInt(userSubstring) - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        else { // the tasks exist"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Task removedTask \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showDelete(removedTask, tasks.size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getDeleteShortcut() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return deleteShortcut;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param deleteShortcut the new shortcut"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setDeleteShortcut(String deleteShortcut) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "        DeleteCommand.deleteShortcut \u003d deleteShortcut;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 27,
      "-": 40
    }
  },
  {
    "path": "src/main/java/leduc/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.NonExistentTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Delete Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String doneShortcut \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of DoneCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public  DoneCommand(String user){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Change the mark of a task to done (\"[V]\")."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task which is done does not exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws NonExistentTaskException, FileException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(DoneCommand.doneShortcut.length() + 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(5);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        int index \u003d Integer.parseInt(userSubstring) - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        else { // to change the mark, the whole file is rewritten ( probably a better way to do it)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.get(index).taskDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            //get the String with the index task marked done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showDone(tasks.get(index));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getDoneShortcut() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return doneShortcut;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param doneShortcut the new shortcut"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setDoneShortcut(String doneShortcut) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "        DoneCommand.doneShortcut \u003d doneShortcut;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 28,
      "-": 38,
      "laurenthg": 1
    }
  },
  {
    "path": "src/main/java/leduc/command/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.HomeworkTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a EditCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Allow to edit a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String editShortcut \u003d \"edit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of EditCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EditCommand(String user){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Allow to edit a task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentTaskException  Exception caught when the task to delete does not exist."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws UserAnswerException  Exception caught when the user did not answer correctly the question."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EmptyEventDateException Exception caught when one of the two date given does not exist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws ConflictDateException Exception thrown when the new event is in conflict with others event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws DateComparisonEventException  Exception caught when the second date is before the first one."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EditFormatException Exception caught when the format of a one shot edit command is not respected."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EmptyTodoException Exception caught when the description of the todo list is not given by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throws NonExistentDateException, FileException, NonExistentTaskException, EmptyEventDateException, ConflictDateException, DateComparisonEventException, EditFormatException, UserAnswerException, EmptyTodoException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            userSubstring \u003d user.trim().substring(EditCommand.editShortcut.length());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            userSubstring \u003d user.trim().substring(4);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Task t \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if(userSubstring.isBlank()) { // Multi-steps command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showEditChooseTask();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            ListCommand listCommand \u003d new ListCommand(user);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            listCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            // The user choose the task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String userEditTaskNumber \u003d ui.readCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            t \u003d this.getEditTask(userEditTaskNumber,tasks,true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (t.isTodo()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.showEditWhat(\"description\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    String description \u003d ui.readCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (description.isBlank()){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new EmptyTodoException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    t.setTask(description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showEdit2Choice();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                String userEditTPart \u003d ui.readCommand().trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if (userEditTPart.matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    int choice \u003d Integer.parseInt(userEditTPart);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (choice \u003d\u003d 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        ui.showEditWhat(\"description\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        t.setTask(ui.readCommand().trim());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    } else if (choice \u003d\u003d 2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                        if (t.isHomework()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            ui.showEditWhat(\"deadline\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            String deadlineString \u003d ui.readCommand().trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            this.editHomeworkDate(t, deadlineString);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        } else { //event task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            ui.showEditWhat(\"period\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            String periodString \u003d ui.readCommand().trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            this.editEventDate(t, tasks, periodString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new UserAnswerException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    throw new UserAnswerException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else { // one shot command"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String[] descriptionString \u003d userSubstring.split(\"description\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String[] homeworkDateString \u003d userSubstring.split(\"/by\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String[] eventPeriodString \u003d userSubstring.split(\"/at\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (descriptionString.length \u003d\u003d 2 ){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                t \u003d getEditTask(descriptionString[0].trim(),tasks,false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                t.setTask(descriptionString[1].trim());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            else if (homeworkDateString.length \u003d\u003d 2){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                t \u003d getEditTask(homeworkDateString[0].trim(),tasks,false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if (!t.isHomework()){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    throw new EditFormatException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                this.editHomeworkDate(t,homeworkDateString[1].trim());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            else if (eventPeriodString.length \u003d\u003d 2){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                t \u003d getEditTask(eventPeriodString[0].trim(),tasks,false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if (!t.isEvent()){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    throw new EditFormatException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                this.editEventDate(t,tasks,eventPeriodString[1].trim());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new EditFormatException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEdit(t);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Allows to edit the period of an event task."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param t the event task to be edited."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param period the period part of the user input string."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EmptyEventDateException Exception caught when one of the two date given does not exist."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws ConflictDateException Exception thrown when the new event is in conflict with others event."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws DateComparisonEventException Exception caught when the second date is before the first one."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private void editEventDate(Task t, TaskList tasks, String period) throws EmptyEventDateException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            NonExistentDateException, ConflictDateException, DateComparisonEventException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EventsTask eventsTask \u003d (EventsTask) t;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String[] dateString \u003d period.split(\" - \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (dateString.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } else if (dateString[0].isBlank() || dateString[1].isBlank()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date1 \u003d new Date(dateString[0]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date2 \u003d new Date(dateString[1]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.verifyConflictDate(date1, date2);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        eventsTask.reschedule(date1, date2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Allows to edit the date of an homework task from a date in String."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param t the task to be edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param dateString the date in String."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentDateException  Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private void editHomeworkDate(Task t, String dateString) throws NonExistentDateException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date \u003d new Date(dateString);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        HomeworkTask homeworkTask \u003d (HomeworkTask) t;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        homeworkTask.setDeadlines(date);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Allows to get the task corresponding to the INDEX entered for the edit command."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param indexString the index (of the task) part of the user input String"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param multiStepsEditCommand the thrown exception depends on weather it is an multi step or an one shot edit command."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @return the task corresponding to the index entered by the user"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task to delete does not exist."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EditFormatException Exception caught when the format of a one shot edit command is not respected."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws UserAnswerException Exception caught when the user did not answer correctly the question."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private Task getEditTask(String indexString,TaskList tasks, boolean multiStepsEditCommand) throws NonExistentTaskException, EditFormatException, UserAnswerException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (indexString.matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            int index \u003d Integer.parseInt(indexString.trim()) - 1;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            return tasks.get(index);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (multiStepsEditCommand){"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new UserAnswerException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new EditFormatException();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getEditShortcut() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return editShortcut;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param editShortcut the new shortcut"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setEditShortcut(String editShortcut) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huangje"
        },
        "content": "        EditCommand.editShortcut \u003d editShortcut;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 27,
      "rshah918": 2,
      "laurenthg": 178
    }
  },
  {
    "path": "src/main/java/leduc/command/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a event task Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Allow to add a event task to the task list and to the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String eventShortcut \u003d \"event\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of EventCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public  EventCommand(String user){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow to add a event task to the task list and to the data file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyEventDateException Exception caught when the period of the event task is not given by the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyEventException Exception caught when the description of the event task is not given by the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentDateException Exception caught when one of the two date given does not exist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ConflictDateException Exception thrown when the new event is in conflict with others event"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws PrioritizeLimitException Exception caught when the new priority is greater than 9 or less than 0."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EventDateException  Exception caught when the start date is after the end date of an event task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throws EmptyEventDateException, EmptyEventException, NonExistentDateException, FileException, ConflictDateException, PrioritizeLimitException, EventDateException, RecurrenceException, RecurrenceDateException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        int nbRecurrence \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String typeOfRecurrence \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if (callByShortcut) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(EventCommand.eventShortcut.length());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(5);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if (userSubstring.isBlank()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyEventException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String[] taskDescription \u003d userSubstring.split(\"/at\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (taskDescription[0].isBlank()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new EmptyEventException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } else if (taskDescription.length \u003d\u003d 1) { // no /at in input"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d taskDescription[0].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            String periodString \u003d taskDescription[1].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            //date format used: dd/MM/yyyy HH:mm - dd/MM/yyyy HH:mm"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String[] prioritySplit \u003d periodString.split(\"prio\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String[] dateString \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(prioritySplit.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "                String[] recurrenceSplit \u003d prioritySplit[0].trim().split((\"recu\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dateString \u003d recurrenceSplit[0].trim().split(\" - \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(!(recurrenceSplit.length\u003d\u003d1)){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    String[] recurrenceSplit2 \u003d recurrenceSplit[1].trim().split(\" \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(recurrenceSplit2.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        throw new RecurrenceException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        typeOfRecurrence \u003d recurrenceSplit2[0].trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        if(!(typeOfRecurrence.equals(\"day\") || typeOfRecurrence.equals(\"month\") || typeOfRecurrence.equals(\"week\"))){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            throw new RecurrenceException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        try{"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            nbRecurrence \u003d Integer.parseInt(recurrenceSplit2[1].trim());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }catch (Exception e){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            throw new RecurrenceException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dateString \u003d prioritySplit[0].split(\" - \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if (dateString.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } else if (dateString[0].isBlank() || dateString[1].isBlank()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date date1 \u003d new Date(dateString[0]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date date2 \u003d new Date(dateString[1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.verifyConflictDate(date1, date2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (date1.getDate().isAfter(date2.getDate())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new EventDateException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            EventsTask newTask \u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (prioritySplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                newTask \u003d new EventsTask(description, date1, date2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                int priority \u003d -1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "                String[] recurrenceSplit \u003d prioritySplit[1].trim().split((\"recu\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "                String priorityString \u003d recurrenceSplit[0].trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(!(recurrenceSplit.length\u003d\u003d1)){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    String[] recurrenceSplit2 \u003d recurrenceSplit[1].trim().split(\" \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(recurrenceSplit2.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        throw new RecurrenceException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        typeOfRecurrence \u003d recurrenceSplit2[0].trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        if(!(typeOfRecurrence.equals(\"day\") || typeOfRecurrence.equals(\"month\") || typeOfRecurrence.equals(\"week\"))){"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            throw new RecurrenceException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        try{"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            nbRecurrence \u003d Integer.parseInt(recurrenceSplit2[1].trim());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }catch (Exception e){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            throw new RecurrenceException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    priority \u003d Integer.parseInt(priorityString);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if (priority \u003c 0 || priority \u003e 9) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                newTask \u003d new EventsTask(description, date1, date2, priority);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if (nbRecurrence \u003d\u003d 0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huangje"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huangje"
        },
        "content": "                storage.save(tasks.getList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showTask(newTask, tasks.size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "                contructRecurrenceTask(newTask, nbRecurrence, typeOfRecurrence, tasks, storage, ui);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void contructRecurrenceTask(EventsTask task, int nbRecurrence, String typeOfRecurrence, TaskList tasks, Storage storage, Ui ui) throws FileException, RecurrenceDateException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "        LocalDateTime initialDate1 \u003d task.getDateFirst().getDate();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "        LocalDateTime initialDate2 \u003d task.getDateSecond().getDate();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String description \u003d task.getTask();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "        int priority \u003d task.getPriority();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "        switch (typeOfRecurrence) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(initialDate2.isAfter(initialDate1.plusDays(1))){"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    throw new RecurrenceDateException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newTaskList.add(task);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d nbRecurrence; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    EventsTask recurrentEventsTask \u003d new EventsTask(description, new Date(initialDate1.plusDays(i)), new Date(initialDate2.plusDays(i)), priority);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    newTaskList.add(recurrentEventsTask);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    tasks.add(recurrentEventsTask);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showNotCompleteList(newTaskList, tasks);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(initialDate2.isAfter(initialDate1.plusWeeks(1))){"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    throw new RecurrenceDateException();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newTaskList.add(task);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huangje"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d nbRecurrence; i++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    EventsTask recurrentEventsTask \u003d new EventsTask(description, new Date(initialDate1.plusWeeks(i)), new Date(initialDate2.plusWeeks(i)), priority);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    newTaskList.add(recurrentEventsTask);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    tasks.add(recurrentEventsTask);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showNotCompleteList(newTaskList, tasks);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(initialDate2.isAfter(initialDate1.plusMonths(1))){"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    throw new RecurrenceDateException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huangje"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d nbRecurrence; i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    EventsTask recurrentEventsTask \u003d new EventsTask(description, new Date(initialDate1.plusMonths(i)), new Date(initialDate2.plusMonths(i)), priority);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    newTaskList.add(recurrentEventsTask);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    tasks.add(recurrentEventsTask);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newTaskList.add(task);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huangje"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showNotCompleteList(newTaskList, tasks);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huangje"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huangje"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showTask(task, tasks.size());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huangje"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getEventShortcut(){"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return eventShortcut;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param eventShortcut the new shortcut"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setEventShortcut(String eventShortcut) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huangje"
        },
        "content": "        EventCommand.eventShortcut \u003d eventShortcut;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 146,
      "-": 52,
      "laurenthg": 21
    }
  },
  {
    "path": "src/main/java/leduc/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.UiEn;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.UiFr;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.lang.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Find Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Allow to find a specific task from the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String findShortcut \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of FindCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String user){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Finds the index of the maximum value in the arraylist"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param scores ArrayList\u003cDouble\u003e containing relevance scores for all tasks in the list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return returns index of the index of the maximum score in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public int findMaxIndex(ArrayList\u003cDouble\u003e scores){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //index of scores correspond to tasks in TaskList. To preserve index, processed scores are assigned a null Value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        double nullDouble \u003d -99.0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        int nullInt \u003d -99;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        double max \u003d 0.0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        int max_index \u003d nullInt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        for (int j \u003d 0; j \u003c scores.size(); j++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(scores.get(j) \u003d\u003d 0.0){//tasks with no common characters will be flagged as null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                scores.set(j, nullDouble);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if (scores.get(j) \u003e max) {//update max"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                max \u003d scores.get(j);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                max_index \u003d j;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return max_index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Compares each task description with the user query, generates a score from 0-1 based on how close the match is."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param find String that contains the user\u0027s query"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return returns an ArrayList containing relevance scores for each task description"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public ArrayList\u003cDouble\u003e generateRelevanceScores(String find, TaskList tasks){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        ArrayList\u003cDouble\u003e scores \u003d new ArrayList\u003cDouble\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        double relevanceScore \u003d 0.0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            double numMatches \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            double shortestStringLength \u003d Math.min(tasks.get(i).getTask().length(), find.length());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            double longestStringLength \u003d Math.max(tasks.get(i).getTask().length(), find.length());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            //use nested for loop to compare query and task description elementwise"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            for (int j \u003d 0; j \u003c shortestStringLength; j++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                for (int k \u003d 0; k \u003c tasks.get(i).getTask().length(); k++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    //compare characters, if they match, increment nummatches then break"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    if (find.charAt(j) \u003d\u003d tasks.get(i).getTask().charAt(k)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                        numMatches +\u003d 1.0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            relevanceScore \u003d numMatches / longestStringLength;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(relevanceScore \u003c\u003d 0.5){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                relevanceScore \u003d 0.0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            scores.add(relevanceScore);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return scores;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allow to find top relevant tasks from the task list by utilizing fuzzy matching algorithm."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EmptyArgumentException Exception caught when there is no argument"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyArgumentException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        UiEn uien \u003d new UiEn();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        UiFr uifr \u003d new UiFr();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            userSubstring \u003d user.substring(FindCommand.findShortcut.length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            userSubstring \u003d user.substring(4);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if(userSubstring.isBlank()){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String find \u003d user.substring(FindCommand.findShortcut.length()+1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        ArrayList\u003cDouble\u003e scores;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //populate list of relevance scores"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        scores \u003d generateRelevanceScores(find, tasks);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //Add tasks to \"String result\" in the order of relevance."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        for(int i \u003d 0; i \u003c scores.size() \u0026\u0026 i \u003c 5; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            double nullDouble \u003d -99.0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            //find the index of the task that is most similar to the user query"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            int max_index \u003d findMaxIndex(scores);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(max_index \u003e nullDouble) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                result +\u003d tasks.displayOneElementList(max_index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                //To preserve indices, previously sorted scores are replaced with a null value"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                scores.set(max_index, nullDouble);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            else{//all tasks are sorted"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            ui.showFindNotMatching();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            ui.showFindMatching(result);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getFindShortcut() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return findShortcut;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param findShortcut the new shortcut"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setFindShortcut(String findShortcut) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "        FindCommand.findShortcut \u003d findShortcut;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 21,
      "rshah918": 79,
      "-": 30,
      "laurenthg": 15
    }
  },
  {
    "path": "src/main/java/leduc/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": " * Display every command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class HelpCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String helpShortcut \u003d \"help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param user user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public HelpCommand(String user) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * display every command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showHelp();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getHelpShortcut() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return helpShortcut;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param helpShortcut the new shortcut"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setHelpShortcut(String helpShortcut) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        HelpCommand.helpShortcut \u003d helpShortcut;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 50
    }
  },
  {
    "path": "src/main/java/leduc/command/HomeworkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.HomeworkTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Represents a homework task Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Allow to add a homework task to the task list and to the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class HomeworkCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private static String homeworkShortcut \u003d \"homework\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of HomeworkCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public HomeworkCommand(String user){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allow to add a homework task to the task list and to the data file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @throws EmptyHomeworkDateException Exception caught when the date of the homework task is not given."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @throws EmptyHomeworkException Exception caught when the description of the homework task is not given."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws PrioritizeLimitException Exception caught when the new priority is greater than 9 or less than 0."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            throws EmptyHomeworkDateException, EmptyHomeworkException, NonExistentDateException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "            FileException, PrioritizeLimitException, RecurrenceException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        int nbRecurrence \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String typeOfRecurrence \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            userSubstring \u003d user.substring(HomeworkCommand.homeworkShortcut.length());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(8);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(userSubstring.isBlank()){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            throw new EmptyHomeworkException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String[] taskDescription \u003d userSubstring.split(\"/by\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (taskDescription[0].isBlank()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            throw new EmptyHomeworkException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } else if (taskDescription.length \u003d\u003d 1) { // no /by in input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            throw new EmptyHomeworkDateException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String homeworkString \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String description \u003d taskDescription[0].trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String[] prioritySplit \u003d taskDescription[1].trim().split(\"prio\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(prioritySplit.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "                String[] recurrenceSplit \u003d prioritySplit[0].trim().split((\"recu\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "                homeworkString \u003d recurrenceSplit[0].trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(!(recurrenceSplit.length\u003d\u003d1)){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    String[] recurrenceSplit2 \u003d recurrenceSplit[1].trim().split(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(recurrenceSplit2.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        throw new RecurrenceException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        typeOfRecurrence \u003d recurrenceSplit2[0].trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        if(!(typeOfRecurrence.equals(\"day\") || typeOfRecurrence.equals(\"month\") || typeOfRecurrence.equals(\"week\"))){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            throw new RecurrenceException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        try{"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            nbRecurrence \u003d Integer.parseInt(recurrenceSplit2[1].trim());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }catch (Exception e){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            throw new RecurrenceException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "                homeworkString \u003d prioritySplit[0].trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            //date format used: dd/MM/yyyy HH:mm"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if (homeworkString.isBlank()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                throw new EmptyHomeworkDateException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                Date d \u003d new Date(homeworkString);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                HomeworkTask newTask \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if (prioritySplit.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    newTask \u003d new HomeworkTask(description, d);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    int priority \u003d -1 ;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    String[] recurrenceSplit \u003d prioritySplit[1].trim().split((\"recu\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    String priorityString \u003d recurrenceSplit[0].trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    if(!(recurrenceSplit.length\u003d\u003d1)){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        String[] recurrenceSplit2 \u003d recurrenceSplit[1].trim().split(\" \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        if(recurrenceSplit2.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            throw new RecurrenceException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            typeOfRecurrence \u003d recurrenceSplit2[0].trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            if(!(typeOfRecurrence.equals(\"day\") || typeOfRecurrence.equals(\"month\") || typeOfRecurrence.equals(\"week\"))){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "                                throw new RecurrenceException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            try{"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": "                                nbRecurrence \u003d Integer.parseInt(recurrenceSplit2[1].trim());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            }catch (Exception e){"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "                                throw new RecurrenceException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    try{"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "                        priority \u003d Integer.parseInt(priorityString);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    catch(Exception e){"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (priority \u003c 0 || priority \u003e 9) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    newTask \u003d new HomeworkTask(description,d,priority);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(nbRecurrence \u003d\u003d 0){"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    tasks.add(newTask);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.save(tasks.getList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.showTask(newTask, tasks.size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huangje"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    contructRecurrenceTask(newTask, nbRecurrence, typeOfRecurrence, tasks, storage, ui);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void contructRecurrenceTask(HomeworkTask task, int nbRecurrence, String typeOfRecurrence, TaskList tasks, Storage storage, Ui ui) throws FileException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "        LocalDateTime initialDate \u003d task.getDeadlines().getDate();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String description \u003d task.getTask();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "        int priority \u003d task.getPriority();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "        newTaskList.add(task);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "        switch (typeOfRecurrence){"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "                for(int i \u003d 1; i\u003c\u003d nbRecurrence; i++){"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    HomeworkTask recurrentHomeworkTask \u003d new HomeworkTask(description, new Date(initialDate.plusDays(i)), priority);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    newTaskList.add(recurrentHomeworkTask);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    tasks.add(recurrentHomeworkTask);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showNotCompleteList(newTaskList, tasks);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "                for(int i \u003d 1; i\u003c\u003d nbRecurrence; i++){"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    HomeworkTask recurrentHomeworkTask \u003d new HomeworkTask(description, new Date(initialDate.plusWeeks(i)), priority);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    newTaskList.add(recurrentHomeworkTask);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    tasks.add(recurrentHomeworkTask);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showNotCompleteList(newTaskList, tasks);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huangje"
        },
        "content": "                for(int i \u003d 1; i\u003c\u003d nbRecurrence; i++){"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    HomeworkTask recurrentHomeworkTask \u003d new HomeworkTask(description, new Date(initialDate.plusMinutes(i)), priority);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    newTaskList.add(recurrentHomeworkTask);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    tasks.add(recurrentHomeworkTask);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showNotCompleteList(newTaskList, tasks);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showTask(task, tasks.size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huangje"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public static String getHomeworkShortcut() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return homeworkShortcut;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param homeworkShortcut the new shortcut"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public static void setHomeworkShortcut(String homeworkShortcut) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        HomeworkCommand.homeworkShortcut \u003d homeworkShortcut;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 138,
      "rshah918": 26,
      "laurenthg": 38
    }
  },
  {
    "path": "src/main/java/leduc/command/LanguageCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class LanguageCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String languageShortcut \u003d \"language\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public LanguageCommand(String user) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(LanguageCommand.languageShortcut.length()).trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(8).trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(userSubstring.isBlank()){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(userSubstring.equals(\"fr\")){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "            storage.setLanguage(userSubstring);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showLanguage(\"French\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(userSubstring.equals(\"fr\")){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "            storage.setLanguage(\"en\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showLanguage(\"English\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "            storage.setLanguage(\"en\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showErrorLanguage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showLanguage(\"English\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        storage.saveConfig();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getLanguageShortcut() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return languageShortcut;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param languageShortcut the new shortcut"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setLanguageShortcut(String languageShortcut) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "        LanguageCommand.languageShortcut \u003d languageShortcut;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 65
    }
  },
  {
    "path": "src/main/java/leduc/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a List Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Allow to display all the tasks contained in the tasks list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String listShortcut \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public  ListCommand(String user){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow to displau all the tasks contained in the tasks list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tasks.size() !\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showList(tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showNoTask();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getListShortcut() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return listShortcut;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param listShortcut the new shortcut"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setListShortcut(String listShortcut) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ListCommand.listShortcut \u003d listShortcut;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 19,
      "rshah918": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/leduc/command/PostponeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.HomeworkTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Represents Postpone command which postpone the deadline of a homework task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PostponeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String postponeShortcut \u003d \"postpone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of PostponeCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public PostponeCommand(String user){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to postpone the deadline of a deadline task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task does not exist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @throws HomeworkTypeException Exception caught when the task is not a deadline task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file doesn\u0027t exist or cannot be created or cannot be opened."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @throws EmptyHomeworkDateException Exception caught when the date of the homework task is not given."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @throws PostponeHomeworkException Exception caught when the new homework is before the old deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws NonExistentTaskException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            HomeworkTypeException, FileException, EmptyHomeworkDateException, NonExistentDateException,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            PostponeHomeworkException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(PostponeCommand.postponeShortcut.length() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(9);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String[] postponeString \u003d userSubstring.split(\"/by\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (postponeString.length \u003d\u003d 1) { // no /by in input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            throw new EmptyHomeworkDateException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d Integer.parseInt(postponeString[0].trim()) - 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        catch(Exception e){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        else { // the tasks exist"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Task postponeTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if (!postponeTask.isHomework()){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                throw new HomeworkTypeException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            HomeworkTask postponeHomeworkTask \u003d (HomeworkTask) postponeTask;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date d \u003d new Date(postponeString[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            postponeHomeworkTask.postponeHomework(d);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showPostpone(postponeHomeworkTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getPostponeShortcut() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return postponeShortcut;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param postponeShortcut the new shortcut"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setPostponeShortcut(String postponeShortcut) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "        PostponeCommand.postponeShortcut \u003d postponeShortcut;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 26,
      "rshah918": 12,
      "-": 54,
      "laurenthg": 2
    }
  },
  {
    "path": "src/main/java/leduc/command/PrioritizeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a prioritize command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class PrioritizeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static String prioritizeShortcut \u003d \"prioritize\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.command.PrioritizeCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public PrioritizeCommand(String user){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Execution of leduc.command.PrioritizeCommand: allows to set the priority of a task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task to delete does not exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws PrioritizeFormatException Exception caught when the format of a prioritize command is not respected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws PrioritizeLimitException Exception caught when the new priority is not an int or is greater than 9 or less than 0."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EmptyArgumentException Exception caught when there is no argument"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws FileException,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            NonExistentTaskException, PrioritizeFormatException, PrioritizeLimitException, EmptyArgumentException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String[] commandString \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String subString \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            subString \u003d user.substring(PrioritizeCommand.prioritizeShortcut.length()).trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            subString \u003d user.substring(10).trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (subString.isBlank()){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        commandString \u003d subString.split(\"prio\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (commandString.length\u003d\u003d1){ // \"prio\" is not in the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new PrioritizeFormatException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(commandString[0].trim()) - 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (taskIndex \u003e tasks.size() - 1 || taskIndex \u003c 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        int priority \u003d -1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            priority \u003d Integer.parseInt(commandString[1].trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (Exception e ){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new PrioritizeFormatException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (priority \u003c 0 || priority \u003e 9) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Task t \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        t.setPriority(priority);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showPrioritize(t);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Returns is false for a leduc.command.PrioritizeCommand."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param prioritizeShortcut the new shortcut"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void setPrioritizeShortcut(String prioritizeShortcut){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand.prioritizeShortcut \u003d prioritizeShortcut;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static String getPrioritizeShortcut(){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return PrioritizeCommand.prioritizeShortcut;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 1,
      "laurenthg": 98
    }
  },
  {
    "path": "src/main/java/leduc/command/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Represents a Remind Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Allow to remind user of upcoming tasks in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String remindShortcut \u003d \"remind\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of FindCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public RemindCommand(String user){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Returns a boolean false as it is a remind command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return a boolean false."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allow to remind user of upcoming tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasklist \u003d tasks.filterTasks(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e extractedTodo \u003d tasks.extractTodo(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TaskList sortedTasks \u003d new TaskList(tasks.sort(filteredTasklist, extractedTodo));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        if (sortedTasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            int j \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            for (int i \u003d 0; i \u003c sortedTasks.size(); i++) {//prints first 3 tasks in the sorted taskList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if ((j \u003c 3) \u0026\u0026 (sortedTasks.get(i).getMark().equals(\"[X]\"))) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    result +\u003d sortedTasks.displayOneElementList(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    j++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.display(result);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showNoTask();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getRemindShortcut() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return remindShortcut;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param remindShortcut the new shortcut"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setRemindShortcut(String remindShortcut) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "        RemindCommand.remindShortcut \u003d remindShortcut;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 23,
      "rshah918": 52,
      "laurenthg": 5
    }
  },
  {
    "path": "src/main/java/leduc/command/RescheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents Reschedule command which reschedule the period of a event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String rescheduleShortcut \u003d \"reschedule\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of RescheduleCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public RescheduleCommand(String user){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to reschedule the period of a event task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyEventDateException Exception caught when the period of the event task is not given by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task does not exist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTypeException Exception caught when the task is not a event task while it should be."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentDateException Exception caught when the date given does not exist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DateComparisonEventException Exception caught when the second date is before the first one."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file doesn\u0027t exist or cannot be created or cannot be opened."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws ConflictDateException Exception thrown when the new event is in conflict with others event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyEventDateException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            NonExistentTaskException, EventTypeException, NonExistentDateException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "            DateComparisonEventException, FileException, ConflictDateException, EmptyArgumentException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            userSubstring \u003d user.substring(RescheduleCommand.rescheduleShortcut.length());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            userSubstring \u003d user.substring(10);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(userSubstring.isBlank()){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String[] rescheduleString \u003d userSubstring.split(\"/at\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (rescheduleString.length \u003d\u003d 1) { // no /by in input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d Integer.parseInt(rescheduleString[0].trim()) - 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        catch(Exception e){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        else { // the tasks exist"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Task rescheduleTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!rescheduleTask.isEvent()){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTypeException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsTask rescheduleEventTask \u003d (EventsTask) rescheduleTask;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] dateString \u003d rescheduleString[1].split(\" - \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            if(dateString.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            else if(dateString[0].isBlank() || dateString[1].isBlank()){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date date1 \u003d new Date(dateString[0]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Date date2 \u003d new Date(dateString[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.verifyConflictDate(date1, date2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            rescheduleEventTask.reschedule(date1,date2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showReschedule(rescheduleEventTask);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getRescheduleShortcut() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return rescheduleShortcut;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param rescheduleShortcut the new shortcut"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setRescheduleShortcut(String rescheduleShortcut) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "        RescheduleCommand.rescheduleShortcut \u003d rescheduleShortcut;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 28,
      "-": 72,
      "laurenthg": 8
    }
  },
  {
    "path": "src/main/java/leduc/command/SetWelcomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class SetWelcomeCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public SetWelcomeCommand(String user){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rshah918"
        },
        "content": "       super(user);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String setWelcomeShortcut \u003d \"setwelcome\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allow to change the welcome message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws FileException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        FileWriter fileWriter \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        File file \u003d storage.getWelcomeFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //open fileWriter object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String welcomeMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                //removes the first word of the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                welcomeMessage \u003d String.join(\" \", Arrays.copyOfRange(user.split(\" \"), 1, user.split( \" \").length));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                fileWriter.write(welcomeMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            finally{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                fileWriter.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showNewWelcome(welcomeMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getSetWelcomeShortcut() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return setWelcomeShortcut;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param setWelcomeShortcut the new shortcut"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setSetWelcomeShortcut(String setWelcomeShortcut) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "        SetWelcomeCommand.setWelcomeShortcut \u003d setWelcomeShortcut;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 22,
      "rshah918": 42,
      "laurenthg": 6
    }
  },
  {
    "path": "src/main/java/leduc/command/ShortcutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.DuplicationShortcutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.MeaninglessException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class ShortcutCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public ShortcutCommand(String user){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static HashSet\u003cString\u003e setShortcut \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static HashSet\u003cString\u003e setDefaultShortcut \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String[] userCommand \u003d user.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String newShortcut\u003d\"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if (userCommand.length \u003e\u003d 2){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(userCommand.length \u003e\u003d 3){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d userCommand[2].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskShortcut(userCommand[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut)){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new DuplicationShortcutException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setOneShortcut(userCommand[1], newShortcut);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showOneShortcutSet(userCommand[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"bye\", ByeCommand.getByeShortcut());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"bye\", newShortcut);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"list\", ListCommand.getListShortcut());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"list\", newShortcut);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"help\", HelpCommand.getHelpShortcut());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"help\", newShortcut);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"done\", DoneCommand.getDoneShortcut());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"done\", newShortcut);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"find\", FindCommand.getFindShortcut());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"find\", newShortcut);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"delete\", DeleteCommand.getDeleteShortcut());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"delete\", newShortcut);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"homework\", HomeworkCommand.getHomeworkShortcut());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            setOneShortcut(\"homework\", newShortcut);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"event\", EventCommand.getEventShortcut());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"event\", newShortcut);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"todo\", TodoCommand.getTodoShortcut());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"todo\", newShortcut);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"edit\", EditCommand.getEditShortcut());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"edit\", newShortcut);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"postpone\", PostponeCommand.getPostponeShortcut());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"postpone\", newShortcut);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"snooze\", SnoozeCommand.getSnoozeShortcut());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"snooze\", newShortcut);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"reschedule\", RescheduleCommand.getRescheduleShortcut());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"reschedule\", newShortcut);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"remind\", RemindCommand.getRemindShortcut());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"remind\", newShortcut);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"sort\", SortCommand.getSortShortcut());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"sort\", newShortcut);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"setWelcome\", SetWelcomeCommand.getSetWelcomeShortcut());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"setwelcome\", newShortcut);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"show\", ShowCommand.getShowShortcut());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"show\", newShortcut);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"prioritize\", PrioritizeCommand.getPrioritizeShortcut());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            setOneShortcut(\"prioritize\", newShortcut);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"unfinished\", UnfinishedCommand.getUnfinishedShortcut());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            setOneShortcut(\"unfinished\", newShortcut);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huangje"
        },
        "content": "            do{"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showAskAllShortcut(\"language\", LanguageCommand.getLanguageShortcut());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huangje"
        },
        "content": "                newShortcut \u003d ui.readCommand();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(newShortcut.equals(\"bye\")){"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    storage.saveConfig();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    ui.terminateShortcut();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huangje"
        },
        "content": "            } while(setShortcut.contains(newShortcut) || setDefaultShortcut.contains(newShortcut));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huangje"
        },
        "content": "            setOneShortcut(\"language\", newShortcut);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showAllShortcutSet();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huangje"
        },
        "content": "        storage.saveConfig();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setOneShortcut(String commandName, String shortcutName) throws MeaninglessException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huangje"
        },
        "content": "        switch (commandName){"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"bye\" :"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(ByeCommand.getByeShortcut());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ByeCommand.setByeShortcut(shortcutName);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"list\" :"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(ListCommand.getListShortcut());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ListCommand.setListShortcut(shortcutName);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"help\" :"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(HelpCommand.getHelpShortcut());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huangje"
        },
        "content": "                HelpCommand.setHelpShortcut(shortcutName);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"done\" :"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(DoneCommand.getDoneShortcut());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huangje"
        },
        "content": "                DoneCommand.setDoneShortcut(shortcutName);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"find\" :"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(FindCommand.getFindShortcut());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huangje"
        },
        "content": "                FindCommand.setFindShortcut(shortcutName);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"delete\" :"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(DeleteCommand.getDeleteShortcut());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huangje"
        },
        "content": "                DeleteCommand.setDeleteShortcut(shortcutName);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            case \"homework\" :"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                setShortcut.remove(HomeworkCommand.getHomeworkShortcut());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                HomeworkCommand.setHomeworkShortcut(shortcutName);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"event\" :"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(EventCommand.getEventShortcut());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "huangje"
        },
        "content": "                EventCommand.setEventShortcut(shortcutName);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"todo\" :"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(TodoCommand.getTodoShortcut());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huangje"
        },
        "content": "                TodoCommand.setTodoShortcut(shortcutName);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"edit\" :"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(EditCommand.getEditShortcut());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huangje"
        },
        "content": "                EditCommand.setEditShortcut(shortcutName);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"postpone\" :"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(PostponeCommand.getPostponeShortcut());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "huangje"
        },
        "content": "                PostponeCommand.setPostponeShortcut(shortcutName);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"snooze\" :"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(SnoozeCommand.getSnoozeShortcut());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "huangje"
        },
        "content": "                SnoozeCommand.setSnoozeShortcut(shortcutName);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"reschedule\" :"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(RescheduleCommand.getRescheduleShortcut());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "huangje"
        },
        "content": "                RescheduleCommand.setRescheduleShortcut(shortcutName);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"remind\" :"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(RemindCommand.getRemindShortcut());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "huangje"
        },
        "content": "                RemindCommand.setRemindShortcut(shortcutName);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"sort\" :"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(SortCommand.getSortShortcut());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "huangje"
        },
        "content": "                SortCommand.setSortShortcut(shortcutName);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"setwelcome\" :"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(SetWelcomeCommand.getSetWelcomeShortcut());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "huangje"
        },
        "content": "                SetWelcomeCommand.setSetWelcomeShortcut(shortcutName);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"show\":"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(ShowCommand.getShowShortcut());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShowCommand.setShowShortcut(shortcutName);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            case \"prioritize\" :"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                setShortcut.remove(PrioritizeCommand.getPrioritizeShortcut());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                PrioritizeCommand.setPrioritizeShortcut(shortcutName);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            case \"unfinished\" :"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                setShortcut.remove(UnfinishedCommand.getUnfinishedShortcut());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                UnfinishedCommand.setUnfinishedShortcut(shortcutName);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"language\" :"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.remove(LanguageCommand.getLanguageShortcut());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "huangje"
        },
        "content": "                LanguageCommand.setLanguageShortcut(shortcutName);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "huangje"
        },
        "content": "                setShortcut.add(shortcutName);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "huangje"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new MeaninglessException();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static HashSet\u003cString\u003e getSetShortcut(){"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return setShortcut;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void initializedSetShortcut(){"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"bye\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"list\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"done\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"edit\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        setDefaultShortcut.add(\"homework\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"event\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"find\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"help\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"postpone\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"remind\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"reschedule\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"setwelcome\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"snooze\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"sort\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"todo\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"delete\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"show\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        setDefaultShortcut.add(\"prioritize\");"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        setDefaultShortcut.add(\"unfinished\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "huangje"
        },
        "content": "        setDefaultShortcut.add(\"language\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 369,
      "rshah918": 5,
      "laurenthg": 22
    }
  },
  {
    "path": "src/main/java/leduc/command/ShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.MeaninglessException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.NonExistentDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.WrongParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.HomeworkTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String showShortcut \u003d \"show\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of Command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public ShowCommand(String user) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public int getDayOfWeekInInt(String dayOfWeek) throws MeaninglessException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "        int dayOfWeekInt \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        switch(dayOfWeek){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"monday\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dayOfWeekInt \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"tuesday\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dayOfWeekInt \u003d 2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"wednesday\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dayOfWeekInt \u003d 3;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"thursday\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dayOfWeekInt \u003d 4;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"friday\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dayOfWeekInt \u003d 5;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"saturday\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dayOfWeekInt \u003d 6;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "            case \"sunday\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dayOfWeekInt \u003d 7;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new MeaninglessException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return dayOfWeekInt;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void getListTaskExactDay(LocalDate date, ArrayList\u003cTask\u003e allTaskHavingDate, ArrayList\u003cTask\u003e showTaskList){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "        for(Task t : allTaskHavingDate){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(t.isHomework()){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(((HomeworkTask)t).getDeadlines().getDate().toLocalDate().isEqual(date)){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    showTaskList.add(t);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(t.isEvent()){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(((EventsTask)t).getDateFirst().getDate().toLocalDate().isEqual(date)){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    showTaskList.add(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void getListTaskMonth(int dateMonth, int dateYear, ArrayList\u003cTask\u003e allTaskHavingDate, ArrayList\u003cTask\u003e showTaskList){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "        for(Task t : allTaskHavingDate){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(t.isHomework()){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(((HomeworkTask)t).getDeadlines().getDate().getMonthValue() \u003d\u003d dateMonth \u0026\u0026 ((HomeworkTask)t).getDeadlines().getDate().getYear() \u003d\u003d dateYear){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    showTaskList.add(t);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(t.isEvent()){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(((EventsTask)t).getDateFirst().getDate().getMonthValue() \u003d\u003d dateMonth \u0026\u0026 ((EventsTask)t).getDateFirst().getDate().getYear() \u003d\u003d dateYear){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    showTaskList.add(t);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void getListTaskYear(int dateYear, ArrayList\u003cTask\u003e allTaskHavingDate, ArrayList\u003cTask\u003e showTaskList){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "        for(Task t : allTaskHavingDate){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(t.isHomework()){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(((HomeworkTask)t).getDeadlines().getDate().getYear() \u003d\u003d dateYear){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    showTaskList.add(t);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(t.isEvent()){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(((EventsTask)t).getDateFirst().getDate().getYear() \u003d\u003d dateYear){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    showTaskList.add(t);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ArrayList\u003cTask\u003e allTaskHavingDate \u003d tasks.filterTasks(tasks);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ArrayList\u003cTask\u003e showTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "        Boolean multiStep \u003d false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(ShowCommand.showShortcut.length()).trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(4).trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String[] userSubSubString \u003d userSubstring.split(\" \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(userSubSubString.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huangje"
        },
        "content": "            multiStep \u003d true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(userSubSubString[0].matches(\"day\")){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String date;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(multiStep){"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showEnterDayShow();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huangje"
        },
        "content": "                date \u003d ui.readCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huangje"
        },
        "content": "                date \u003d userSubSubString[1];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": "            LocalDate exactDate \u003d null;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huangje"
        },
        "content": "                exactDate \u003d LocalDate.parse(date.trim(), formatter);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }catch(Exception e){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huangje"
        },
        "content": "            getListTaskExactDay(exactDate, allTaskHavingDate, showTaskList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(userSubSubString[0].matches(\"dayofweek\")){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "            int dayOfWeekInt \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String dayOfWeek;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(multiStep){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showEnterDayOfWeekShow();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dayOfWeek \u003d ui.readCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dayOfWeek \u003d userSubSubString[1];"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "            dayOfWeekInt \u003d getDayOfWeekInInt(dayOfWeek);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "            LocalDate dateFindDayOfWeek \u003d dateNow.plusDays(1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "            while(dateFindDayOfWeek.getDayOfWeek().getValue()!\u003d dayOfWeekInt){"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dateFindDayOfWeek \u003d dateFindDayOfWeek.plusDays(1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "            getListTaskExactDay(dateFindDayOfWeek, allTaskHavingDate, showTaskList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(userSubSubString[0].matches(\"today\")){"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "            getListTaskExactDay(dateNow, allTaskHavingDate, showTaskList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if(userSubSubString[0].matches(\"week\")){"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "            for (int i \u003d 0; i \u003c 7; i++){"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "                LocalDate dateWeek \u003d dateNow.plusDays(i);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "                getListTaskExactDay(dateWeek, allTaskHavingDate, showTaskList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (userSubSubString[0].matches(\"month\")){"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String date;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(multiStep){"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showEnterMonthShow();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "                date \u003d ui.readCommand();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": "                date \u003d userSubSubString[1];"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String[] dateSplit \u003d date.trim().split(\"/\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(dateSplit.length \u003d\u003d 1 || dateSplit[0].isBlank()){"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huangje"
        },
        "content": "            int dateMonth \u003d 0;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huangje"
        },
        "content": "            int dateYear \u003d 0;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huangje"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dateMonth \u003d Integer.parseInt(dateSplit[0]);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dateYear \u003d Integer.parseInt(dateSplit[1]);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }catch(Exception e){"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(dateMonth \u003c1 || dateMonth \u003e 12){"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huangje"
        },
        "content": "            getListTaskMonth(dateMonth, dateYear, allTaskHavingDate, showTaskList);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else if (userSubSubString[0].matches(\"year\")){"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String date;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(multiStep){"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ui.showEnterYearShow();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huangje"
        },
        "content": "                date \u003d ui.readCommand();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huangje"
        },
        "content": "                date \u003d userSubSubString[1];"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huangje"
        },
        "content": "            int dateYear \u003d 0;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huangje"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huangje"
        },
        "content": "                dateYear \u003d Integer.parseInt(date);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }catch(Exception e){"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huangje"
        },
        "content": "            getListTaskYear(dateYear, allTaskHavingDate, showTaskList);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new WrongParameterException();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showNotCompleteList(showTaskList, tasks);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getShowShortcut() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return showShortcut;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param showShortcut the new shortcut"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setShowShortcut(String showShortcut) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ShowCommand.showShortcut \u003d showShortcut;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 234,
      "rshah918": 4
    }
  },
  {
    "path": "src/main/java/leduc/command/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.HomeworkTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents Snooze command which snooze the deadline of a deadline task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String snoozeShortcut \u003d \"snooze\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of SnoozeCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user user String which represent the input string of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public SnoozeCommand(String user){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allows to snooze the deadline of a homework task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NonExistentTaskException Exception caught when the task does not exist."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @throws HomeworkTypeException Exception caught when the task is not a homework task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file doesn\u0027t exist or cannot be created or cannot be opened."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws NonExistentTaskException, HomeworkTypeException, FileException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(SnoozeCommand.snoozeShortcut.length() + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(7);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "        int index \u003d Integer.parseInt(userSubstring) - 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentTaskException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        else { // the tasks exist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Task snoozeTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if (!snoozeTask.isHomework()){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                throw new HomeworkTypeException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            HomeworkTask snoozeDeadlineTask \u003d (HomeworkTask) snoozeTask;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            snoozeDeadlineTask.snoozeDeadline();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ui.showSnooze(snoozeDeadlineTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getSnoozeShortcut() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return snoozeShortcut;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param snoozeShortcut the new shortcut"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setSnoozeShortcut(String snoozeShortcut) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "        SnoozeCommand.snoozeShortcut \u003d snoozeShortcut;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 24,
      "rshah918": 7,
      "-": 44
    }
  },
  {
    "path": "src/main/java/leduc/command/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.MeaninglessException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a sort command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Allows to sort the task by date or description or priority"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String sortShortcut \u003d \"sort\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.command.SortCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public SortCommand(String user){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Execution of leduc.command.SortCommand: Allows to sort the task list ( by description or by date or ny priority)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws MeaninglessException  Exception caught when the input string could not be interpreted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws EmptyArgumentException Exception caught when there is no argument"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws FileException, MeaninglessException, EmptyArgumentException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(SortCommand.sortShortcut.length());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(4);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String sort \u003d userSubstring.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(sort.isBlank()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (sort.equals(\"date\")){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            ArrayList\u003cTask\u003e filteredTasklist \u003d tasks.filterTasks(tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            ArrayList\u003cTask\u003e extractedTodo \u003d tasks.extractTodo(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            // The todo task list is sort by description"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            extractedTodo.sort(Comparator.comparing(Task::getTask));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.setList(tasks.sort(filteredTasklist, extractedTodo));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (sort.equals(\"priority\")){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.getList().sort(Comparator.comparingInt(Task::getPriority));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (sort.equals(\"description\")){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.getList().sort(Comparator.comparing(Task::getTask));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (sort.equals(\"type\")){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.getList().sort(Comparator.comparing(Task::getTag));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (sort.equals(\"done\")){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            tasks.getList().sort(Comparator.comparing(Task::getMark));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new MeaninglessException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showSort();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(user);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "        listCommand.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getSortShortcut() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return sortShortcut;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param sortShortcut the new shortcut"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setSortShortcut(String sortShortcut) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "        SortCommand.sortShortcut \u003d sortShortcut;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 32,
      "laurenthg": 63
    }
  },
  {
    "path": "src/main/java/leduc/command/StatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.UiEn;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.UiFr;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.exception.InvalidFlagException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Represents the statistics feature"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rshah918"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * general statistics that are generated from the tasklist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numComplete \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double numTasks \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentComplete;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numTodos \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numHomework \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numEvents \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numIncomplete \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Priority statistics that are generated from the tasklist."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numNinePrio \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numEightPrio \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numSevenPrio \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numSixPrio \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numFivePrio \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numFourPrio \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numThreePrio \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numTwoPrio \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numOnePrio \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentNinePrio \u003d 0.0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentEightPrio \u003d 0.0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentSevenPrio \u003d 0.0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentSixPrio \u003d 0.0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentFivePrio \u003d 0.0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentFourPrio \u003d 0.0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentThreePrio \u003d 0.0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentTwoPrio \u003d 0.0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentOnePrio \u003d 0.0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Completion statistics that are generated from the tasklist."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numIncompleteHomework \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numIncompleteTodo \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private int numIncompleteEvent \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentIncompleteHomework \u003d 0.0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentIncompleteTodo \u003d 0.0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private double percentIncompleteEvent \u003d 0.0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private static String StatsShortcut \u003d \"stats\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public StatsCommand(String user){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Analyze the tasklist and generate the \"count\" metrics"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param taskList leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    void analyzeTaskList(TaskList taskList){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        numTasks \u003d taskList.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        for (int i \u003d 0 ;i\u003c taskList.size() ; i++ ){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(task.getPriority() \u003d\u003d 9){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numNinePrio++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(task.getPriority() \u003d\u003d 8){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numEightPrio++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(task.getPriority() \u003d\u003d 7){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numSevenPrio++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(task.getPriority() \u003d\u003d 6){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numSixPrio++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(task.getPriority() \u003d\u003d 5){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numFivePrio++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(task.getPriority() \u003d\u003d 4){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numFourPrio++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(task.getPriority() \u003d\u003d 3){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numThreePrio++;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(task.getPriority() \u003d\u003d 2){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numTwoPrio++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(task.getPriority() \u003d\u003d 1){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numOnePrio++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if(task.getMark().equals(\"[V]\")){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numComplete++;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            else{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numIncomplete++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                if(task.isHomework()){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    numIncompleteHomework++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                if(task.isTodo()){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    numIncompleteTodo++;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                if(task.isEvent()){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    numIncompleteEvent++;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if(task.isHomework()){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numHomework++;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            else if(task.isEvent()){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numEvents++;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            else if(task.isTodo()){"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                numTodos++;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Uses the count metrics created from analyzeTaskList() to generate the percentage metrics"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    void createPercentageMetrics(){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentComplete \u003d (numComplete/numTasks) * 100;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentIncompleteEvent \u003d (double) numIncompleteEvent/numEvents * 100;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentIncompleteHomework \u003d (double) numIncompleteHomework/numHomework * 100;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentIncompleteTodo \u003d (double )numIncompleteTodo/numTodos * 100;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentNinePrio \u003d (double) numNinePrio/numTasks * 100;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentEightPrio \u003d (double) numEightPrio/numTasks * 100;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentSevenPrio \u003d (double) numSevenPrio/numTasks * 100;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentSixPrio \u003d (double) numSixPrio/numTasks * 100;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentFivePrio \u003d (double) numFivePrio/numTasks * 100;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentFourPrio \u003d (double) numFourPrio/numTasks * 100;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentThreePrio \u003d (double) numThreePrio/numTasks * 100;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentTwoPrio \u003d (double) numTwoPrio/numTasks * 100;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        percentOnePrio \u003d (double) numOnePrio/numTasks * 100;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * If the user does not enter a flag, display the general statistics"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @params ui to display the message string"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    void printGeneralStatistics(Ui ui){"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String message \u003d \"Here are some general statistics about your task list: \\n\" +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks: \" + numTasks + \"\\n\" +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of Todo\u0027s : \" + numTodos + \"\\n\" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of Events: \" + numEvents + \"\\n\" +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of Homeworks: \" + numHomework + \"\\n\" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of Uncompleted Tasks: \" + numIncomplete + \"\\n\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of Completed Tasks: \" + numComplete + \"\\n\" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent Complete: \" + percentComplete + \"%\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        ui.showFindMatching(message);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * If the user passes a \"-p\" flag, print detailed statistics about task priorities"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param ui to display message string"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    void printPriorityStatistics(Ui ui){"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String message \u003d \"Here are some priority statistics about your task list: \\n\" +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"----PRIORITY COUNTS----\" + \"\\n\" +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 5: \" + numFivePrio + \"\\n\" +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 4: \" + numFourPrio + \"\\n\" +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 3: \" + numThreePrio + \"\\n\" +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 2: \" + numTwoPrio + \"\\n\" +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of tasks with priority 1: \" + numOnePrio + \"\\n\" +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"----PRIORITY PERCENTAGES----\" + \"\\n\" +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 5: \" + percentFivePrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 4: \" + percentFourPrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 3: \" + percentThreePrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 2: \" + percentTwoPrio + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of tasks with priority 1: \" + percentOnePrio + \"%\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        ui.display(message);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * If the user passes a \"-c\" flag, print detailed statistics about task completion"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param ui to display message string"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    void displayCompletionStatistics(Ui ui){"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String message \u003d \"Here are some completion statistics about your task list: \\n\" +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"----COMPLETION COUNTS----\" + \"\\n\" +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of incomplete Homeworks remaining: \" + numIncompleteHomework + \"\\n\" +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of incomplete Todos remaining: \" + numIncompleteTodo + \"\\n\" +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Number of incomplete Events  remaining: \" + numIncompleteEvent + \"\\n\" +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"----COMPLETION PERCENTAGES----\" + \"\\n\" +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of incomplete Homework: \" + percentIncompleteHomework + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of incomplete Todo: \" + percentIncompleteTodo + \"%\" + \"\\n\" +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                \"Percent of incomplete Events: \" + percentIncompleteEvent + \"%\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        ui.display(message);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allow to see statistics on their taskList"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param taskList leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws InvalidFlagException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //get user flag"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String flag \u003d String.join(\" \", Arrays.copyOfRange(user.split(\" \"), 1, user.split( \" \").length));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        analyzeTaskList(taskList);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        createPercentageMetrics();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //display metrics"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if (flag.equals(\"\")) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                ui.showGeneralStats(numTasks, numTodos, numEvents, numHomework, numIncomplete, numComplete, percentComplete);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            //display priority statistics"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            else if (flag.equals(\"-p\")) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                ui.showPriorityStats(numNinePrio, numEightPrio, numSevenPrio, numSixPrio, numFivePrio, numFourPrio,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                        numThreePrio, numTwoPrio, numOnePrio,percentNinePrio, percentEightPrio, percentSevenPrio, percentSixPrio, percentFivePrio,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                        percentFourPrio, percentThreePrio, percentTwoPrio,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                        percentOnePrio);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            //display completion statistics"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            else if (flag.equals(\"-c\")) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                ui.showCompletionStats(numIncompleteHomework, numIncompleteTodo, numIncompleteEvent,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                        percentIncompleteHomework, percentIncompleteTodo, percentIncompleteEvent);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                Exception e \u003d new InvalidFlagException();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                ui.showError((DukeException) e);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public static String getStatsShortcut() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return StatsShortcut;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param StatsShortcut the new shortcut"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public static void setStatsShortcut(String StatsShortcut) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        StatsCommand.StatsShortcut \u003d StatsShortcut;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 247,
      "laurenthg": 1
    }
  },
  {
    "path": "src/main/java/leduc/command/TodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.EmptyTodoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.PrioritizeLimitException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TodoTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Todo Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Allows to add the todo task in the tasks list and the data file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static String todoShortcut \u003d \"todo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of TodoCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public  TodoCommand(String user){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow to add the task in the tasks list and the data file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EmptyTodoException Exception caught when the description of the todo list is not given by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException Exception caught when the file can\u0027t be open or read or modify"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws PrioritizeLimitException Exception caught when the new priority is greater than 9 or less than 0."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyTodoException, FileException, PrioritizeLimitException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        String userSubstring;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(callByShortcut){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(TodoCommand.todoShortcut.length());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "            userSubstring \u003d user.substring(4);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String[] prioritySplit \u003d userSubstring.split(\"prio\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoTask newTask \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        int priority \u003d -1 ;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (prioritySplit.length !\u003d 1 \u0026\u0026 prioritySplit[1].trim().matches(\"\\\\d+\")){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            priority \u003d Integer.parseInt(prioritySplit[1].trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (priority \u003c 0 || priority \u003e 9) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new PrioritizeLimitException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (prioritySplit[0].isBlank()){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new EmptyTodoException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            newTask \u003d new TodoTask(prioritySplit[0],priority );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else { // The description of the todo task could contain \"prio\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            // For exmaple, \"todo prio\" create a todo task with description prio and priority 5"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if (userSubstring.isBlank()){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "                throw new EmptyTodoException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            newTask \u003d new TodoTask(userSubstring.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showTask(newTask, tasks.size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static String getTodoShortcut() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return todoShortcut;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param todoShortcut the new shortcut"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void setTodoShortcut(String todoShortcut) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "        TodoCommand.todoShortcut \u003d todoShortcut;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 27,
      "-": 37,
      "laurenthg": 22
    }
  },
  {
    "path": "src/main/java/leduc/command/UnfinishedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Will display all unfinished tasks in the tasklist"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class UnfinishedCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * static variable used for shortcut"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    private static String unfinishedShortcut \u003d \"unfinished\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of UnfinishedCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param user String which represent the input string of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public UnfinishedCommand(String user){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super(user);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allows users to see all unfinished tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param tasks leduc.task.TaskList which is the list of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param ui leduc.Ui which deals with the interactions with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param storage leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        ArrayList\u003cTask\u003e unfinishedTaskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //Iterate through the tasklist"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            String mark \u003d task.getMark();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            //check if the task is unfinished"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if(mark.equals(\"[X]\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                unfinishedTaskList.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        //call ui to display output"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        ui.showUnFinishedTasks(unfinishedTaskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * getter because the shortcut is private"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return the shortcut name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public static String getUnfinishedShortcut() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return unfinishedShortcut;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * used when the user want to change the shortcut"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param unfinishedShortcut the new shortcut"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public static void setUnfinishedShortcut(String unfinishedShortcut) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        UnfinishedCommand.unfinishedShortcut \u003d unfinishedShortcut;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 62,
      "laurenthg": 1
    }
  },
  {
    "path": "src/main/java/leduc/exception/ConflictDateException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * throw an exception when there is a conflict between two date of event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConflictDateException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks the list of event which are in conflict with the new event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ConflictDateException(ArrayList\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * the error message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the list of all task that are in conflict with the new event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String conflictTasks \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task t : tasks){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            conflictTasks +\u003d \"\\n\\t\\t\\t\" + t.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\\t ConflictDateException:\\n\\t\\t ☹ OOPS!!! There is a date conflict with this event :\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                conflictTasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 4,
      "-": 35
    }
  },
  {
    "path": "src/main/java/leduc/exception/DuplicationShortcutException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": " * Thrown when the shortcut name already exists"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class DuplicationShortcutException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of leduc.exception.DuplicationShortcutException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public DuplicationShortcutException(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Tell the user that the shortcut name already exist"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return \"\\t DuplicationShortcutException:\\n\\t\\t ☹ OOPS!!! The shortcut already exists\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 23
    }
  },
  {
    "path": "src/main/java/leduc/exception/EditFormatException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represent a exception when the format of a one shot edit command is not respected."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class EditFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.exception.EditFormatException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EditFormatException(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Provide the one shot edit format to respect to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return \"\\t EditFormatException:\\n\\t\\t ☹ OOPS!!! Please respect the edit command format\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                \"\\n\\t\\t For multi-step command : \u0027edit\u0027 and then follow the instructions\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                \"\\n\\t\\t For one shot command: \" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                \"\\n\\t\\t\\t edit the description: \u0027edit INDEX description DESCRIPTION\u0027 \" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                \"\\n\\t\\t\\t edit the date of an homework task: \u0027edit INDEX /by DATE\u0027 \" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                \"\\n\\t\\t\\t edit the period of an event task: \u0027edit INDEX /at DATE - DATE\u0027\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 27
    }
  },
  {
    "path": "src/main/java/leduc/exception/EmptyArgumentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": " * Exception when there is no argument"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class EmptyArgumentException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of leduc.exception.EmptyArgumentException"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public EmptyArgumentException(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Tell the user that the tasks chosen should be a deadline task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return \"\\t EmptyArgumentException:\\n\\t\\t ☹ OOPS!!! There should have an argument\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 23
    }
  },
  {
    "path": "src/main/java/leduc/exception/EmptyHomeworkDateException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Represent a exception when the deadline date of the homework task is not given by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class EmptyHomeworkDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of leduc.exception.EmptyDeadlineDateException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public EmptyHomeworkDateException(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Ask for a deadline date for the homework task to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return \"\\t emptyHomeworkDateException:\\n\\t\\t ☹ OOPS!!! Please enter a deadline for the task\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 6,
      "rshah918": 5,
      "laurenthg": 10
    }
  },
  {
    "path": "src/main/java/leduc/exception/EmptyHomeworkException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Represent a exception when the description of the homework task is not given by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class EmptyHomeworkException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of leduc.exception.EmptyDeadlineException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public EmptyHomeworkException(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Ask for a description for the homework task to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return \"\\t emptyHomeworkException:\\n\\t\\t ☹ OOPS!!! The description of a homework task cannot be empty\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 21
    }
  },
  {
    "path": "src/main/java/leduc/exception/EventDateException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represent a exception when the start date is after the end date of an event task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class EventDateException extends DukeException{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.exception.EventDateException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EventDateException(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Tell the user that the start date is after the end date of an event task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return \"\\t EventDateException:\\n\\t\\t ☹ OOPS!!! The start date should be before the end date for an event task\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 24
    }
  },
  {
    "path": "src/main/java/leduc/exception/HomeworkTypeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Represent a exception when the task is not a homework task while it should be"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class HomeworkTypeException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of leduc.exception.DeadlineTypeException"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public HomeworkTypeException(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Tell the user that the tasks chosen should be a homework task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return \"\\t HomeworkTypeException:\\n\\t\\t ☹ OOPS!!! The task should be a homework task\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 26
    }
  },
  {
    "path": "src/main/java/leduc/exception/InvalidFlagException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Thrown when an incorrect flag is entered by the user"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class InvalidFlagException extends DukeException{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of leduc.exception.InvalidFlagException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public InvalidFlagException(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Tell the user that the shortcut name already exist"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return \"\\t InvalidFlagException:\\n\\t\\t ☹ Invalid Flag!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 22
    }
  },
  {
    "path": "src/main/java/leduc/exception/MeaninglessException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represent a exception when input string of the user is not understood."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class MeaninglessException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.exception.MeaningLessException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public MeaninglessException(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tell the user that the input String is not known."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return \"\\t MeaninglessException:\\n\\t\\t OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\\"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/leduc/exception/PostponeHomeworkException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rshah918"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rshah918"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Represent a exception when the new homework deadline is before the old homework deadline."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class PostponeHomeworkException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of leduc.exception.PostponeHomeworkException"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public PostponeHomeworkException(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rshah918"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Tell the user that the new homework\u0027s deadline should not be before the old one."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return \"\\t PostponeHomeworkException:\\n\\t\\t ☹ OOPS!!! The new homework should not be before the old one\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rshah918"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rshah918": 23
    }
  },
  {
    "path": "src/main/java/leduc/exception/PrioritizeFormatException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represent a exception when the format of a prioritize command is not respected."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class PrioritizeFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.exception.PrioritizeFormatException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public PrioritizeFormatException(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Provide the prioritize format to respect to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return \"\\t PrioritizeFormatException:\\n\\t\\t ☹ OOPS!!! Please respect the prioritize command format\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                \"\\n\\t\\t\\t prioritize INDEX prio INDEX\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 23
    }
  },
  {
    "path": "src/main/java/leduc/exception/PrioritizeLimitException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represent a exception when the new priority is not an int or is greater than 9 or less than 0."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class PrioritizeLimitException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.exception.PrioritizeLimitException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public PrioritizeLimitException(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Tells the users that priority should be an int greater than or equal to 0 and less than or equal than 9."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return \"\\t PrioritizeLimitException:\\n\\t\\t ☹ OOPS!!! The priority of a task should be an int greater than or equal to  0 and less than or equal to 9.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 22
    }
  },
  {
    "path": "src/main/java/leduc/exception/RecurrenceDateException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class RecurrenceDateException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public RecurrenceDateException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return \"\\t RecurrenceException:\\n\\t\\t ☹ OOPS!!! You are trying to make the event recurrent but there will be a conflict date if those events are created\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\n\\t\\t\\t The event has not been created, please check the date\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 13
    }
  },
  {
    "path": "src/main/java/leduc/exception/RecurrenceException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class RecurrenceException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public RecurrenceException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return \"\\t RecurrenceException:\\n\\t\\t ☹ OOPS!!! Please respect the recurrence format\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "                \"\\n\\t\\t\\t recu TYPEOFRECURRENCE NBRECURRENCE\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 13
    }
  },
  {
    "path": "src/main/java/leduc/exception/UserAnswerException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represent a exception when the user did not answer correctly the question."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class UserAnswerException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.exception.UserAnswerException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public UserAnswerException(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Tell the user to answer correctly the question."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return \"\\t UserAnswerException:\\n\\t\\t ☹ OOPS!!! Please answer correctly the question.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 22
    }
  },
  {
    "path": "src/main/java/leduc/exception/WrongParameterException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class WrongParameterException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of leduc.exception.PostponeDeadlineException"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public WrongParameterException(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Tell the user that the new deadline should not be before the old one."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return \"\\t WrongParameterException:\\n\\t\\t ☹ OOPS!!! The parameters are wrong\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 19
    }
  },
  {
    "path": "src/main/java/leduc/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.MeaninglessException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a leduc.storage.Storage which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private File configFile;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private File welcomeFile;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private String language;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.storage.Storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file String representing the path of the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param configFile String representing the path of the file storing the shortcut"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public Storage(String file, String configFile, String welcomeFile) throws FileException, MeaninglessException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.file \u003d new File(file);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            this.file.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            //e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            //  Case of a jar execution : create or use the duke.txt file in the current path"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.file \u003d new File (\"duke.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                this.file.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            catch( IOException e1){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                e1.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        this.configFile \u003d new File(configFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(this.configFile.createNewFile()){ //if file exist, return false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "                this.language \u003d \"en\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "                saveConfig();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "                loadConfig();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            //e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            //  Case of a jar execution : create or use the config.txt file in the current path"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.configFile \u003d new File (\"config.txt\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if(this.configFile.createNewFile()){ //if file exist, return false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    this.language \u003d \"en\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    saveConfig();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    loadConfig();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            catch( IOException e1){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                e1.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.welcomeFile \u003d new File(welcomeFile);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.welcomeFile.createNewFile();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            //e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            // Case of a jar execution : create or use the welcome.txt file in the current path"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.welcomeFile \u003d new File (\"welcome.txt\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                this.welcomeFile.createNewFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            catch( IOException e1){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                e1.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Getter of welcome File"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @return the welcome File"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public File getWelcomeFile(){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return this.welcomeFile;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * read the file and write all the task to an array of task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * if the file is empty, the array is empty too"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return an array of task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException thrown when there is a reading error of the file"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cTask\u003e load() throws FileException { // load the initial data file"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner sc \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            sc \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] tokens \u003d line.split(\"//\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            int priority \u003d -1 ;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (tokens[0]){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                case \"T\" :"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (tokens.length \u003d\u003d3 ){ // priority not specified"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        tasks.add(new TodoTask(tokens[2],tokens[1].trim()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        priority \u003d  Integer.parseInt(tokens[3].trim());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        if (priority \u003c 0 || priority \u003e 9) { // the priority is set by default to 5"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            tasks.add(new TodoTask(tokens[2], tokens[1].trim()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            tasks.add(new TodoTask(tokens[2], tokens[1].trim(),priority));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                case \"H\" :"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (tokens.length \u003d\u003d4 ){ // priority not specified"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                        tasks.add(new HomeworkTask(tokens[2],tokens[1].trim(), new Date(LocalDateTime.parse(tokens[3], formatter))));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        priority \u003d  Integer.parseInt(tokens[4].trim());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        if (priority \u003c 0 || priority \u003e 9) { // the priority is set by default to 5"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                            tasks.add(new HomeworkTask(tokens[2],tokens[1].trim(), new Date(LocalDateTime.parse(tokens[3], formatter))));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                            tasks.add(new HomeworkTask(tokens[2],tokens[1].trim(), new Date(LocalDateTime.parse(tokens[3], formatter)),priority));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (tokens.length \u003d\u003d5 ){ // priority not specified"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        tasks.add(new EventsTask(tokens[2], tokens[1].trim(), new Date(LocalDateTime.parse(tokens[3], formatter)), new Date(LocalDateTime.parse(tokens[4], formatter))));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        priority \u003d  Integer.parseInt(tokens[5].trim());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        if (priority \u003c 0 || priority \u003e 9) { // the priority is set by default to 5"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            tasks.add(new EventsTask(tokens[2], tokens[1].trim(), new Date(LocalDateTime.parse(tokens[3], formatter)), new Date(LocalDateTime.parse(tokens[4], formatter))));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            tasks.add(new EventsTask(tokens[2], tokens[1].trim(), new Date(LocalDateTime.parse(tokens[3], formatter)), new Date(LocalDateTime.parse(tokens[4], formatter)),priority));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * write all task to the files"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks all the tasks that have to be written to the file"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileException thrown when there is writing problem to the files"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e tasks) throws FileException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        FileWriter fileWriter \u003d null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            fileWriter \u003d new FileWriter(this.file);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                for (Task task : tasks){"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (task.isTodo()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        fileWriter.write(\"T//\"+ task.getMark() +\"//\" + task.getTask() + \"//\" + task.getPriority() + \"\\n\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    } else if (task.isHomework()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                        fileWriter.write(\"H//\"+ task.getMark() +\"//\" + task.getTask() + \"//\" + ((HomeworkTask) task).getDeadlines().toString()+ \"//\" + task.getPriority() +\"\\n\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (task.isEvent()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        fileWriter.write(\"E//\"+ task.getMark() +\"//\" + task.getTask() + \"//\" + ((EventsTask) task).getDateFirst().toString() + \"//\" + ((EventsTask) task).getDateSecond().toString() + \"//\" + task.getPriority() + \"\\n\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                fileWriter.close();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        catch(IOException e){"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void saveConfig() throws FileException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huangje"
        },
        "content": "        FileWriter fileWriter \u003d null;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huangje"
        },
        "content": "            fileWriter \u003d new FileWriter(this.configFile);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huangje"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"lang:\" + this.language + \"\\n\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"bye:\" + ByeCommand.getByeShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(ByeCommand.getByeShortcut());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"list:\" + ListCommand.getListShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(ListCommand.getListShortcut());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"help:\" + HelpCommand.getHelpShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(HelpCommand.getHelpShortcut());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"done:\" + DoneCommand.getDoneShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(DoneCommand.getDoneShortcut());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"find:\" + FindCommand.getFindShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(FindCommand.getFindShortcut());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"delete:\" + DeleteCommand.getDeleteShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(DeleteCommand.getDeleteShortcut());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                fileWriter.write(\"homework:\" + HomeworkCommand.getHomeworkShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(HomeworkCommand.getHomeworkShortcut());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"event:\" + EventCommand.getEventShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(EventCommand.getEventShortcut());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"todo:\" + TodoCommand.getTodoShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(TodoCommand.getTodoShortcut());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"edit:\" + EditCommand.getEditShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(EditCommand.getEditShortcut());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"postpone:\" + PostponeCommand.getPostponeShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(PostponeCommand.getPostponeShortcut());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"snooze:\" + SnoozeCommand.getSnoozeShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(SnoozeCommand.getSnoozeShortcut());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"reschedule:\" + RescheduleCommand.getRescheduleShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(RescheduleCommand.getRescheduleShortcut());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"remind:\" + RemindCommand.getRemindShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(RemindCommand.getRemindShortcut());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"sort:\" + SortCommand.getSortShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(SortCommand.getSortShortcut());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"setwelcome:\" + SetWelcomeCommand.getSetWelcomeShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(SetWelcomeCommand.getSetWelcomeShortcut());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                fileWriter.write(\"prioritize:\" + PrioritizeCommand.getPrioritizeShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(PrioritizeCommand.getPrioritizeShortcut());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"unfinished:\" + UnfinishedCommand.getUnfinishedShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(UnfinishedCommand.getUnfinishedShortcut());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.write(\"language:\" + LanguageCommand.getLanguageShortcut() + \"\\n\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.getSetShortcut().add(LanguageCommand.getLanguageShortcut());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }finally {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huangje"
        },
        "content": "                fileWriter.close();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }catch(IOException e){"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void loadConfig() throws FileException, MeaninglessException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huangje"
        },
        "content": "        Scanner sc \u003d null;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huangje"
        },
        "content": "            sc \u003d new Scanner(this.configFile);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huangje"
        },
        "content": "            throw new FileException();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if(sc.hasNext()){"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String languageString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String[] languageStringSplit \u003d languageString.split(\":\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(languageStringSplit.length \u003d\u003d 2 \u0026\u0026 languageStringSplit[0].equals(\"lang\")){"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huangje"
        },
        "content": "                this.language \u003d languageStringSplit[1];"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(!(this.language.equals(\"en\") || this.language.equals(\"fr\"))){"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    this.language \u003d \"en\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huangje"
        },
        "content": "            else{"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huangje"
        },
        "content": "                this.language \u003d \"en\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huangje"
        },
        "content": "        while(sc.hasNext()){"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String commandShortcut \u003d sc.nextLine();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huangje"
        },
        "content": "            String[] commandShortcutSplit \u003d commandShortcut.split(\":\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huangje"
        },
        "content": "            if(commandShortcutSplit.length \u003d\u003d 2){"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huangje"
        },
        "content": "                ShortcutCommand.setOneShortcut(commandShortcutSplit[0].trim(), commandShortcutSplit[1].trim());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huangje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void setLanguage(String language){"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huangje"
        },
        "content": "        this.language \u003d language;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public String getLanguage(){"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return this.language;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 104,
      "rshah918": 8,
      "-": 87,
      "laurenthg": 88
    }
  },
  {
    "path": "src/main/java/leduc/task/EventsTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.DateComparisonEventException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Event Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private String tag \u003d \"[E]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateFirst;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateSecond;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.EventsTask. The task is not done by default."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * And the priority is 5 by default."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateFirst the start date of the period of the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateSecond the end date of the period of the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EventsTask(String task, Date dateFirst, Date dateSecond) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateFirst \u003d dateFirst;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateSecond \u003d dateSecond;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.EventsTask. The task is not done by default."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the Task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param dateFirst the start date of the period of the event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param dateSecond the end date of the period of the event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EventsTask(String task, Date dateFirst, Date dateSecond, int priority){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,priority);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.dateFirst\u003d dateFirst;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.dateSecond \u003d dateSecond;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.EventsTask. The task could be done or not depending on the parameter given."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * the priority is 5 by default."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the Task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateFirst the start date of the period of the event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateSecond the end date of the period of the event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EventsTask(String task, String mark, Date dateFirst, Date dateSecond) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,mark);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.dateFirst \u003d dateFirst;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.dateSecond \u003ddateSecond;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of leduc.task.EventsTask. The task could be done or not depending on the parameter given."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the Task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param dateFirst the start date of the period of the event."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param dateSecond the end date of the period of the event."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the event."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EventsTask(String task, String mark, Date dateFirst, Date dateSecond, int priority) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,mark,priority);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateFirst \u003d dateFirst;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateSecond \u003ddateSecond;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of Tag ( [T] )."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String : [T]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTag(){ return this.tag;}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of start date."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the start date of the task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateFirst(){ return this.dateFirst;}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of end date."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the end date of the task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateSecond(){ return this.dateSecond; }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is an event task of not"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEvent(){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * visualize a event task"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string format to see a event task"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return super.toString() + \" at: \" + getDateFirst() + \" - \" + getDateSecond() + \" [Priority: \" + getPriority() + \"]\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allow reschedule the period of the event task."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * With verification that the second date should be after the first one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param dateFirst the first date."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param dateSecond the second date."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DateComparisonEventException Exception caught when the second date is before the first one."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void reschedule(Date dateFirst, Date dateSecond) throws DateComparisonEventException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if (dateSecond.getDate().isBefore(dateFirst.getDate())){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DateComparisonEventException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": "            this.dateFirst \u003d dateFirst;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "            this.dateSecond \u003d dateSecond ;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huangje": 7,
      "-": 79,
      "laurenthg": 36
    }
  },
  {
    "path": "src/main/java/leduc/task/HomeworkTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rshah918"
        },
        "content": "import leduc.exception.PostponeHomeworkException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rshah918"
        },
        "content": " * Represents a homework Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rshah918"
        },
        "content": "public class HomeworkTask extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private String tag \u003d\"[H]\" ;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private Date deadlines;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of leduc.task.Homework. The task is not done by default."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * And the priority is 5 by default."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param deadlines the deadline of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public HomeworkTask(String task, Date deadlines){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of leduc.task.HomeworkTask. The task is not done by default."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task  String representing the description of the Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param deadlines the deadline of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param priority the priority of the Homework task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public HomeworkTask(String task, Date deadlines, int priority){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,priority);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of leduc.task.HomeworkTask. The task could be done or not depending on the parameter given."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * And the priority is 5 by default."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task  String representing the description of the Task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param deadlines the deadline of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public HomeworkTask(String task, String mark, Date deadlines){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,mark);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Constructor of leduc.task.HomeworkTask. The task could be done or not depending on the parameter given."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task  String representing the description of the Task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param deadlines the deadline of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the deadline task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public HomeworkTask(String task, String mark, Date deadlines, int priority){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,mark,priority);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Getter of Tag ( [H] )."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @return String : [H]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public String getTag(){ return this.tag;}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Getter of homework."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @return the deadline date of the task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public Date getDeadlines(){ return this.deadlines;}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Setter of homework."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param deadlines the new deadline date of the task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void setDeadlines(Date deadlines){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allows to snooze the homework deadline date"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void snoozeDeadline() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.deadlines.snoozeLocalDateTime();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "     /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * to know if whether is a homework task of not"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public boolean isHomework(){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * visualize a deadline task"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @return the string format to see a deadline task"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return super.toString() + \" by: \" + getDeadlines() + \" [Priority: \" + getPriority() + \"]\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Allow postpone the deadline of the homework task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * With verification that the new deadline should be after the old one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * @param date Date date : the new deadline"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @throws PostponeHomeworkException Exception caught when the new deadline is before the old one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void postponeHomework(Date date) throws PostponeHomeworkException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "        if (date.getDate().isBefore(this.deadlines.getDate())){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            throw new PostponeHomeworkException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "            this.deadlines \u003d date;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huangje": 20,
      "rshah918": 22,
      "laurenthg": 76
    }
  },
  {
    "path": "src/main/java/leduc/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class representing a leduc.task.Task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private String mark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private int priority \u003d 5 ; // the priority of the task is initialized to 5"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task String representing the description of the leduc.task.Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Task (String task){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.mark \u003d \"[X]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.Task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the leduc.task.Task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the deadline task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    protected Task(String task, int priority){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.mark \u003d \"[X]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.Task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the leduc.task.Task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    protected Task (String task, String mark){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.mark \u003d mark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.Task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the leduc.task.Task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    protected Task (String task, String mark, int priority){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.mark \u003d mark;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.priority\u003d priority;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Getter of the priority of the task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @return the priority of the task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Setter of the priority of the task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the new priority of the task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Setter of the task description of the leduc.task.Task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param taskDescription String corresponding to the new task description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void setTask(String taskDescription){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.task\u003d taskDescription;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the task to done"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void taskDone(){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.mark \u003d \"[V]\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of the description of the leduc.task.Task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string representing the description of the task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTask(){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the mark of the task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to know if the task is done or not."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String which allows to know if the task is done or not."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMark(){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.mark;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of the tag of the task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows to know if it is a todo, deadline or event task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String which allows to know if it is a todo, deadline or event task."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String getTag();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is a todo task of not"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isTodo(){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * to know if whether is a homework task of not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public boolean isHomework(){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is an event task of not"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEvent(){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * visualize a task"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string format to see a task"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return getTag() + getMark() + \" \" + getTask();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Help method which returns the date from any task Object."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public LocalDateTime getDate(){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        if (this.isHomework()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            HomeworkTask homework \u003d (HomeworkTask) this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "            return (homework.getDeadlines()).getDate();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if (this.isEvent()){"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            EventsTask event \u003d (EventsTask)this;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "            return(event.getDateFirst()).getDate();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 2,
      "rshah918": 4,
      "-": 79,
      "laurenthg": 72
    }
  },
  {
    "path": "src/main/java/leduc/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.ConflictDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of tasks list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks Arraylist of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the task in the position i of the tasks list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i position of the task in the tasks list to returns."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the task in the position i of the tasks list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task get(int i ){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.tasks.get(i);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Add a task to the tasks list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param t the task to add."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task t ){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks.add(t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the tasks list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return size of the tasks list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int size(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the task which is removed from the tasks list at the position i."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i the position of the task to remove in the tasks list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the task which is removed from the tasks list at the position i."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task remove( int i){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.tasks.remove(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the String of display of one element of the list of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index the position of the task to display in the tasks list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the String of display of one element of the list of tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String displayOneElementList(int index){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Task t \u003d this.tasks.get(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String result \u003d \"\\t \"+ (index+1) + \". \" + t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * get the list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the task list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getList(){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return (ArrayList\u003cTask\u003e) this.tasks;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Setter of the list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void setList(ArrayList\u003cTask\u003e task){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.tasks\u003d task;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Verify if there are event that are in conflict with the date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date1 the start date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date2 the end date"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @throws  ConflictDateException Exception thrown when the new event is in conflict with others event."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void verifyConflictDate(Date date1, Date date2) throws ConflictDateException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e conflictTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task t : tasks){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            if(t.isEvent()){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "                if(date1.getDate().isAfter(((EventsTask)t).getDateFirst().getDate()) \u0026\u0026 date1.getDate().isBefore(((EventsTask)t).getDateSecond().getDate())){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "                    conflictTasks.add(t);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "                else if(date2.getDate().isAfter(((EventsTask)t).getDateFirst().getDate()) \u0026\u0026 date2.getDate().isBefore(((EventsTask)t).getDateSecond().getDate())){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    conflictTasks.add(t);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": "                else if(date1.getDate().isBefore(((EventsTask)t).getDateFirst().getDate()) \u0026\u0026 date2.getDate().isAfter(((EventsTask)t).getDateSecond().getDate())){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    conflictTasks.add(t);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else if(date1.getDate().equals(((EventsTask)t).getDateFirst().getDate()) || date1.getDate().equals(((EventsTask)t).getDateSecond().getDate()) ||  date2.getDate().equals(((EventsTask)t).getDateSecond().getDate()) || date2.getDate().equals(((EventsTask)t).getDateFirst().getDate())){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                    conflictTasks.add(t);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if(!conflictTasks.isEmpty()){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new ConflictDateException(conflictTasks);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Extracts all Todo\u0027s into a seperate arraylist. Tasks with/without dates must be separated prior to sorting"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param  tasks is the list of tasks"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public  ArrayList\u003cTask\u003e extractTodo(TaskList tasks){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        ArrayList\u003cTask\u003e extractedTodos \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            if ((tasks.get(i) instanceof TodoTask)){"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                extractedTodos.add(tasks.get(i));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return extractedTodos;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Extracts all EventsTask/HomeworkTasks into a seperate arraylist. Tasks with/without dates must be seperated prior to sorting"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     *@param tasks tasks is the list of tasks"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public  ArrayList\u003cTask\u003e filterTasks(TaskList tasks){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasklist \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (!(tasks.get(i) instanceof TodoTask)){"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                filteredTasklist.add(tasks.get(i));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return filteredTasklist;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * Sorts the list of tasks by date."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param filteredTasklist which filters out all Tasks that do not have a date field.."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rshah918"
        },
        "content": "     * @param extractedTodos which is a list of all Todo objects, will get appended to the final sorted list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rshah918"
        },
        "content": "    public  ArrayList\u003cTask\u003e sort(ArrayList\u003cTask\u003e filteredTasklist, ArrayList\u003cTask\u003e extractedTodos){"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        for(int i \u003d 0; filteredTasklist.size() \u003e 0; i++){"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            Task initialTask \u003d filteredTasklist.get(0);//set initial task"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            for(int j \u003d 0; j \u003c filteredTasklist.size(); j++){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                if((filteredTasklist.get(j).getDate().compareTo(initialTask.getDate())) \u003c 0) {//compare each date to initialdate"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rshah918"
        },
        "content": "                    initialTask \u003d filteredTasklist.get(j);//update if necessary"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            sortedTasks.add(initialTask);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rshah918"
        },
        "content": "            filteredTasklist.remove(initialTask);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        sortedTasks.addAll(extractedTodos);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rshah918"
        },
        "content": "        return sortedTasks;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 7,
      "rshah918": 24,
      "-": 91,
      "laurenthg": 35
    }
  },
  {
    "path": "src/main/java/leduc/task/TodoTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Todo leduc.task.Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private String tag \u003d \"[T]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of leduc.task.TodoTask. The task is not done by default."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * And the priority is 5 by default."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task String representing the description of the todo task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TodoTask(String task){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.TodoTask. The task is not done by default."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the todo task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the todo task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public TodoTask( String task, int priority){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,priority);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Constructor of leduc.task.TodoTask."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * And the priority is 5 by default."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task String representing the description of the todo task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public TodoTask(String task, String mark){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,mark);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "     * Constructor of leduc.task.TodoTask. The task could be done or not depending on the parameter given."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param task String representing the description of the todo task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param mark represent if the task is done or not."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * @param priority the priority of the todo task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public TodoTask(String task, String mark, int priority){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task,mark,priority);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter of the tag ([T])."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String ([T])."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTag(){ return this.tag;}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * to know if whether is a todo task of not"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isTodo(){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * visualize a event task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string format to see a event task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return super.toString() + \" [Priority: \" + getPriority() + \"]\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 1,
      "-": 43,
      "laurenthg": 27
    }
  },
  {
    "path": "src/test/java/leduc/DeadlineCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.command.HomeworkCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a JUnit test class for the DeadlineCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the before of deadlineCommandExecuteTest."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void beforeDeadlineCommandExecuteTest(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui \u003d new UiEn();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/testFile.txt\", System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/configTest.txt\",System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/welcome.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a JUnit test method for the DeadlineCommand."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void deadlineCommandExecuteTest()  {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        HomeworkCommand deadlineCommand1 \u003d new HomeworkCommand(\"deadline ok\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            deadlineCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EmptyHomeworkDateException);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        HomeworkCommand deadlineCommand2 \u003d new HomeworkCommand(\"deadline /by 12/12/2000 22:22\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            deadlineCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        catch(DukeException e ){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EmptyHomeworkException);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        HomeworkCommand deadlineCommand3 \u003d new HomeworkCommand(\"deadline d1 /by 12-12-2000 22:22\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            deadlineCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue( e instanceof NonExistentDateException);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        HomeworkCommand deadlineCommand4 \u003d new HomeworkCommand(\"deadline d1 /by 12/12/2000 22:22\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            deadlineCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e){ //should not happen"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        HomeworkCommand deadlineCommand5 \u003d new HomeworkCommand(\"deadline d1 /by 12/12/2000 22:22 prio 6\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            deadlineCommand5.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d 6);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d 5);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        HomeworkCommand deadlineCommand6 \u003d new HomeworkCommand(\"deadline d1 /by 12/12/2000 22:22 prio 12\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            deadlineCommand6.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        HomeworkCommand deadlineCommand7 \u003d new HomeworkCommand(\"deadline d1 /by 12/12/2000 22:22 prio Qzeaze\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            deadlineCommand7.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the after of deadlineCommandExecuteTest."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void afterDeadlineCommandExecuteTest(){"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.getList().removeAll(tasks.getList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch(FileException f){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 8,
      "-": 63,
      "laurenthg": 59
    }
  },
  {
    "path": "src/test/java/leduc/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.command.EditCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.HomeworkTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TodoTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a JUnit test class for the one shot command of EditCommandTest."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the before of the one shot command of EditCommandTest."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void beforeEditCommandTest(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui \u003d new UiEn();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/testFile.txt\", System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/configTest.txt\",System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/welcome.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d1 \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d2 \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date1 \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date2 \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"14/09/2019 22:33\".trim(), formatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"d1\",date1,1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"15/09/2019 22:23\".trim(), formatter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"deadline\",date1,1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"21/09/2019 00:00\".trim(), formatter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d2 \u003d LocalDateTime.parse(\"28/10/2019 22:22\".trim(), formatter);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date2 \u003d new Date(d2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new EventsTask(\"e1\",date1,date2,2));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"22/09/2019 12:12\".trim(), formatter);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"deadlineOther\",date1,2));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"\u0026\",3));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d5);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents a JUnit test method for the EditCommandTest."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void EditCommandTest() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EditCommand editCommand1 \u003d new EditCommand(\"edit odkz\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            editCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EditFormatException);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EditCommand editCommand2 \u003d new EditCommand(\"edit 1 dqsdq\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            editCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EditFormatException);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EditCommand editCommand3 \u003d new EditCommand(\"edit 1 dqsdq /at\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            editCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EditFormatException);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EditCommand editCommand4 \u003d new EditCommand(\"edit 1 description testeditCommand4\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            editCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getTask().equals(\"testeditCommand4\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EditCommand editCommand5 \u003d new EditCommand(\"edit 1 /by 12/12/2022 22:22\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            editCommand5.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EditCommand editCommand6 \u003d new EditCommand(\"edit 1 /by 12/12/20222 22:22\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            editCommand6.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof NonExistentDateException);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EditCommand editCommand7 \u003d new EditCommand(\"edit 3 /by 12/12/20222 22:22\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            editCommand7.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EditFormatException);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EditCommand editCommand8 \u003d new EditCommand(\"edit 3 /at 12/12/2022 22:22\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            editCommand8.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EmptyEventDateException);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EditCommand editCommand9 \u003d new EditCommand(\"edit 3 /at 12/12/2022 22:22 - 10/12/2022 22:22\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            editCommand9.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof DateComparisonEventException);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EditCommand editCommand10 \u003d new EditCommand(\"edit 3 /at 12/12/2022 22:22 - 15/12/2022 22:22\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            editCommand10.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the after of EditCommandTest."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void afterEditCommandTest(){"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.getList().removeAll(tasks.getList());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch(FileException f){"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 1,
      "laurenthg": 209
    }
  },
  {
    "path": "src/test/java/leduc/EventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.EventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.EventsTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the before of eventCommandExecuteTest."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void beforeEventCommandExecuteTest(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui \u003d new UiEn();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/testFile.txt\", System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/configTest.txt\", System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/welcome.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks \u003d new TaskList( tasksList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime d1 \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime d2 \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"11/12/2019 20:30\".trim(), formatter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            d2 \u003d LocalDateTime.parse(\"12/12/2019 20:40\".trim(), formatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date2 \u003d new Date(d2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(new EventsTask(\"testConflict\", date1, date2));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void eventCommandExecuteTest() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand1 \u003d new EventCommand(\"event\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand1.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no description\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"description\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand2 \u003d new EventCommand(\"event testNoDate\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand2.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no date\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand3 \u003d new EventCommand(\"event testNoDate /at\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand3.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no date\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand4 \u003d new EventCommand(\"event testNoDate /at 12/12/2019 20:30\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand4.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no period\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand5 \u003d new EventCommand(\"event testNoDate /at 12/12/2019 20:30 12/12/2019 20:40\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand5.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a problem with the date\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand6 \u003d new EventCommand(\"event testNoDate /at - 12/12/2019 20:30\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand6.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no date\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand7 \u003d new EventCommand(\"event testNoDate /at 12/12/2019 20:30 - \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand7.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is no date\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"period\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand8 \u003d new EventCommand(\"event testNoDate /at a - b\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand8.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a wrong format\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"date doesn\u0027t exist\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand9 \u003d new EventCommand(\"event testNoDate /at 12-12-2019 20:30 - 12-12-2019 20:40\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand9.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a wrong format\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"date doesn\u0027t exist\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand10 \u003d new EventCommand(\"event testNoDate /at 12/12/2019 2030 - 12/12/2019 20:40\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand10.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a wrong format\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"date doesn\u0027t exist\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand11 \u003d new EventCommand(\"event testConflictDate /at 11/12/2019 20:20 - 11/12/2019 21:00\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand11.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a conflict between the date\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"conflict\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand12 \u003d new EventCommand(\"event testConflictDate /at 11/12/2019 20:20 - 12/12/2019 21:00\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand12.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a conflict between the date\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"conflict\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand13 \u003d new EventCommand(\"event testConflictDate /at 12/12/2019 20:20 - 12/12/2019 21:00\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand13.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a conflict between the date\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"conflict\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand eventCommand14 \u003d new EventCommand(\"event testConflictDate /at 12/12/2019 20:20 - 12/12/2019 20:30\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventCommand14.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"should throw exception when there is a conflict between the date\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e.print().contains(\"conflict\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EventCommand eventCommand15 \u003d new EventCommand(\"event e1 /at 12/12/2000 22:22 - 12/12/2000 22:23 prio 6\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            eventCommand15.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d 6);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EventCommand eventCommand16 \u003d new EventCommand(\"event e2 /at 12/12/2001 22:22 - 12/12/2001 22:23 prio 12\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            eventCommand16.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        EventCommand eventCommand17 \u003d new EventCommand(\"event e3 /at 12/12/2002 22:22 - 12/12/2002 22:23 prio Qzeaze\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            eventCommand17.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the after of eventCommandExecuteTest."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void afterEventCommandExecuteTest(){"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.getList().removeAll(tasks.getList());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (FileException f) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 53,
      "-": 106,
      "laurenthg": 57
    }
  },
  {
    "path": "src/test/java/leduc/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a JUnit test class for the Parser."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Parser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the before of commandCreatedTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void beforeCommandCreatedTest(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        parser \u003d  new Parser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a JUnit test method to test if the parser could"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * create the right command depending on the input String (user)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandCreatedTest(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"ok\") instanceof MeaninglessCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(parser.parse(\"listlist\") instanceof ListCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"find eizae\") instanceof FindCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"done 12\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(parser.parse(\"done okk\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"delete 12\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(parser.parse(\"delete e\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"todo ekzoa\") instanceof TodoCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"homework d1\")instanceof HomeworkCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"event e\") instanceof EventCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parse(\"bye\")instanceof ByeCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"edit\")instanceof EditCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"setwelcome message\")instanceof SetWelcomeCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"postpone 2 /by 12/12/2000 22:22\")instanceof PostponeCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"reschedule 2 /at 12/12/2000 11:11 - 13/12/2000 12:22\")instanceof RescheduleCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"snooze 2\")instanceof SnoozeCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"help\")instanceof HelpCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"sort date\")instanceof SortCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(parser.parse(\"sort description\")instanceof SortCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(parser.parse(\"bye \" )instanceof ByeCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "laurenthg": 20
    }
  },
  {
    "path": "src/test/java/leduc/PostponeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.PostponeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a JUnit test class for the PostponeCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PostponeCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the before of PostponeCommandTest."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void beforePostponeCommandTest(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui \u003d new UiEn();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/testFile.txt\", System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/configTest.txt\",System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/welcome.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d1 \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d2 \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date1 \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date2 \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"todo\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"13/09/2019 01:52\".trim(), formatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"d1\",date1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"21/09/2019 22:22\".trim(), formatter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d2 \u003d LocalDateTime.parse(\"28/09/2019 22:11\".trim(), formatter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date2 \u003d new Date(d2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new EventsTask(\"e1\",date1,date2));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td3\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td4\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"13/09/2019 01:52\".trim(), formatter);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"d1\",date1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d6);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents a JUnit test method for the PostponeCommand."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void PostponeCommandTest() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand1 \u003d new PostponeCommand(\"postpone 4ee /by 12/12/2222 22:22\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentTaskException);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand2 \u003d new PostponeCommand(\"postpone 15 /by 12/12/2222 22:22\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentTaskException);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand3 \u003d new PostponeCommand(\"postpone 3 /by 12/12/2222 22:22\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof HomeworkTypeException);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand4 \u003d new PostponeCommand(\"postpone 2\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EmptyHomeworkDateException);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand5 \u003d new PostponeCommand(\"postpone 2 /by 12/12/22a2 22:22\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand5.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentDateException);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d tasks.get(tasks.size()-1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(task.isHomework());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date d \u003d ((HomeworkTask) task).getDeadlines();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Date dAfter \u003d d;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "        dAfter.setDate(d.getDate().plusDays(1));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Date dBefore \u003d d;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "        dAfter.setDate(d.getDate().plusDays(-1));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand6 \u003d new PostponeCommand(\"postpone 6 /by \"+ dBefore);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand6.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PostponeHomeworkException);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        PostponeCommand postponeCommand7 \u003d new PostponeCommand(\"postpone 6 /by \" +dAfter);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            postponeCommand7.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){ // Should not happen"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the after of PostponeCommandTest."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void afterPostponeCommandTest(){"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.getList().removeAll(tasks.getList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch(FileException f){"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 9,
      "-": 84,
      "laurenthg": 92
    }
  },
  {
    "path": "src/test/java/leduc/PrioritizeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.command.PrioritizeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a JUnit test class for the PrioritizeCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class PrioritizeCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the before of PrioritizeCommandTest."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void beforePrioritizeCommandTest(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui \u003d new UiEn();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/testFile.txt\", System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/configTest.txt\",System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/welcome.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d1 \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d2 \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date1 \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date2 \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"13/09/2019 01:52\".trim(), formatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"d1\",date1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"21/09/2019 22:22\".trim(), formatter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d2 \u003d LocalDateTime.parse(\"28/09/2019 22:11\".trim(), formatter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date2 \u003d new Date(d2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new EventsTask(\"e1\",date1,date2));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td3\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td4\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"13/09/2019 01:52\".trim(), formatter);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"d1\",date1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d6);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for (Task t : tasks.getList()){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(t.getPriority()\u003d\u003d5);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents a JUnit test method for the PrioritizeCommand."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void PrioritizeCommandTest() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand1 \u003d new PrioritizeCommand(\"prioritize 5 ,ez\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeFormatException);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand2 \u003d new PrioritizeCommand(\"prioritize 5 \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeFormatException);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand3 \u003d new PrioritizeCommand(\"prioritize 5 prio\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeFormatException);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand4 \u003d new PrioritizeCommand(\"prioritize 5 pfzezfe\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeFormatException);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand5  \u003d new PrioritizeCommand(\"prioritize 5 prio dqsdqs\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand5.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeFormatException);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand6  \u003d new PrioritizeCommand(\"prioritize 15 prio 2\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand6.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof NonExistentTaskException);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        PrioritizeCommand prioritizeCommand7  \u003d new PrioritizeCommand(\"prioritize\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            prioritizeCommand7.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EmptyArgumentException);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for ( int i \u003d 0 ; i\u003c tasks.getList().size() ; i++){"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            int j \u003d i *2;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            PrioritizeCommand prioritizeCommand \u003d new PrioritizeCommand(\"prioritize \" + (i+1) + \" prio \" + j);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            if (j\u003c 9) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    prioritizeCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    assertTrue(false);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            else{"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    prioritizeCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d6);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d 0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority()\u003d\u003d2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority()\u003d\u003d 4);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(3).getPriority()\u003d\u003d6);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(4).getPriority()\u003d\u003d8);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(5).getPriority()\u003d\u003d5);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for ( int i \u003d 0 ; i\u003c tasks.getList().size() ; i++){"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            PrioritizeCommand prioritizeCommand \u003d new PrioritizeCommand(\"prioritize \"+ (i+1) + \" prio \" + 5);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    prioritizeCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    assertTrue(false);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the after of PrioritizeCommand."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void afterPrioritizeCommand(){"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.getList().removeAll(tasks.getList());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch(FileException f){"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 1,
      "laurenthg": 216
    }
  },
  {
    "path": "src/test/java/leduc/RescheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.RescheduleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a JUnit test class for the RescheduleCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the before of RescheduleCommandTest."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void beforeRescheduleCommandTest(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui \u003d new UiEn();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/testFile.txt\", System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/configTest.txt\",System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/welcome.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d1 \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d2 \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date1 \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date2 \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"13/09/2019 01:52\".trim(), formatter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"d1\",date1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"12/12/2019 22:22\".trim(), formatter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d2 \u003d LocalDateTime.parse(\"12/12/2019 22:24\".trim(), formatter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date2 \u003d new Date(d2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new EventsTask(\"e1\",date1,date2));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td3\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td4\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"13/09/2019 01:52\".trim(), formatter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"d1\",date1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d6);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents a JUnit test method for the RescheduleCommand."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void RescheduleCommandTest() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand1 \u003d new RescheduleCommand("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reschedule 4ee /at 12/12/2222 22:22 - 12/12/2222 22:24\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentTaskException);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand2 \u003d new RescheduleCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reschedule 15 /at 12/12/2222 22:22 - 12/12/2222 22:24\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentTaskException);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand3 \u003d new RescheduleCommand("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reschedule 2 /at 12/12/2222 22:22 - 12/12/2222 22:24\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof EventTypeException);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand4 \u003d new RescheduleCommand(\"reschedule 3\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof EmptyEventDateException);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand5 \u003d new RescheduleCommand("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reschedule 3 /at 12/12/22a2 22:22 - 12/12/2222 22:24\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand5.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentDateException);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand6 \u003d new RescheduleCommand("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reschedule 3 /at 12/12/2222 22:22 - 12/12/1222 22:24\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand6.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof DateComparisonEventException);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand7 \u003d new RescheduleCommand("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                \"reschedule 3 /at 12/12/2019 22:22 - 12/12/2019 22:24\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            rescheduleCommand7.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof ConflictDateException);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the after of RescheduleCommandTest."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void afterRescheduleCommandTest(){"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.getList().removeAll(tasks.getList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch(FileException f){"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 6,
      "-": 83,
      "laurenthg": 92
    }
  },
  {
    "path": "src/test/java/leduc/ShowCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.command.ShowCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.FileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.MeaninglessException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class ShowCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the before of ShowCommandTest."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void beforeShowCommandTest(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui \u003d new UiEn();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/testFile.txt\", System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/configTest.txt\",System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/welcome.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void ShowCommandTest(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(\"test\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        int dayOfWeek \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "            dayOfWeek \u003d showCommand.getDayOfWeekInInt(\"monday\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertEquals(1, dayOfWeek);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "            dayOfWeek \u003d showCommand.getDayOfWeekInInt(\"tuesday\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertEquals(2, dayOfWeek);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "            dayOfWeek \u003d showCommand.getDayOfWeekInInt(\"wednesday\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertEquals(3, dayOfWeek);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "            dayOfWeek \u003d showCommand.getDayOfWeekInInt(\"thursday\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertEquals(4, dayOfWeek);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "            dayOfWeek \u003d showCommand.getDayOfWeekInInt(\"friday\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertEquals(5, dayOfWeek);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "            dayOfWeek \u003d showCommand.getDayOfWeekInInt(\"saturday\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertEquals(6, dayOfWeek);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "            dayOfWeek \u003d showCommand.getDayOfWeekInInt(\"sunday\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertEquals(7, dayOfWeek);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "            dayOfWeek \u003d showCommand.getDayOfWeekInInt(\"aazeadzda\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "            fail(\"The exception should be a MeaninglessException\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "            assertTrue(e.print().contains(\"MeaninglessException\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ShowCommand showCommand1 \u003d new ShowCommand(\"show dsqdsqdq\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "            showCommand1.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "            fail(\"The exception should be a WrongParameterException\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "            assertTrue(e.print().contains(\"WrongParameterException\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ShowCommand showCommand2 \u003d new ShowCommand(\"show day dqdqd\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huangje"
        },
        "content": "            showCommand2.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "            fail(\"The exception should be a NonExistentDateException\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": "            assertTrue(e.print().contains(\"NonExistentDateException\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ShowCommand showCommand3 \u003d new ShowCommand(\"show dayofweek dqdqd\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "            showCommand3.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "            fail(\"The exception should be a MeaninglessException\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "            assertTrue(e.print().contains(\"MeaninglessException\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ShowCommand showCommand3 \u003d new ShowCommand(\"show month /2019\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huangje"
        },
        "content": "            showCommand3.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": "            fail(\"The exception should be a NonExistentDateException\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "            assertTrue(e.print().contains(\"NonExistentDateException\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ShowCommand showCommand3 \u003d new ShowCommand(\"show month 01/\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": "            showCommand3.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "            fail(\"The exception should be a NonExistentDateException\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huangje"
        },
        "content": "            assertTrue(e.print().contains(\"NonExistentDateException\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ShowCommand showCommand3 \u003d new ShowCommand(\"show month 20/2010\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "            showCommand3.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huangje"
        },
        "content": "            fail(\"The exception should be a NonExistentDateException\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": "            assertTrue(e.print().contains(\"NonExistentDateException\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ShowCommand showCommand3 \u003d new ShowCommand(\"show month sqd/dqd\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huangje"
        },
        "content": "            showCommand3.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huangje"
        },
        "content": "            fail(\"The exception should be a NonExistentDateException\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huangje"
        },
        "content": "            assertTrue(e.print().contains(\"NonExistentDateException\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "            ShowCommand showCommand3 \u003d new ShowCommand(\"show year dsqdqs\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "            showCommand3.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huangje"
        },
        "content": "            fail(\"The exception should be a NonExistentDateException\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "            assertTrue(e.print().contains(\"NonExistentDateException\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 133,
      "laurenthg": 17
    }
  },
  {
    "path": "src/test/java/leduc/SnoozeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.command.SnoozeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a JUnit test class for the SnoozeCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the before of SnoozeCommandExecuteTest."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void beforeSnoozeCommandExecuteTest(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui \u003d new UiEn();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/testFile.txt\", System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/configTest.txt\",System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/welcome.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d1 \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d2 \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date1 \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date2 \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"13/09/2019 10:22\".trim(), formatter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"d1\",date1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"21/09/2019 22:22\".trim(), formatter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d2 \u003d LocalDateTime.parse(\"28/09/2019 22:11\".trim(), formatter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date2 \u003d new Date(d2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new EventsTask(\"e1\",date1,date2));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td3\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td4\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d5);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents a JUnit test method for the SnoozeCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void SnoozeCommandExecuteTest() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        SnoozeCommand snoozeCommand1 \u003d new SnoozeCommand(\"snooze 4\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            snoozeCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof HomeworkTypeException);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        SnoozeCommand snoozeCommand2 \u003d new SnoozeCommand(\"snooze 15\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            snoozeCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(e instanceof NonExistentTaskException);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        SnoozeCommand snoozeCommand3 \u003d new SnoozeCommand(\"snooze 2\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            snoozeCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        catch( DukeException e ){ // Should not happen"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the after of SnoozeCommandTest."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void afterSnoozeCommandTest(){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.getList().removeAll(tasks.getList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch(FileException f){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 7,
      "-": 48,
      "laurenthg": 75
    }
  },
  {
    "path": "src/test/java/leduc/SortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.command.SortCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a JUnit test class for the SortCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static TaskList tasks2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the before of SortCommandTest."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void beforeSortCommandTest(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui \u003d new UiEn();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/testFile.txt\", System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/configTest.txt\",System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/welcome.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks2 \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d1 \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        LocalDateTime d2 \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date1 \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Date date2 \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"14/09/2019 22:33\".trim(), formatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"d1\",date1,1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks2.add(new HomeworkTask(\"d1\",date1,1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks2.add(new HomeworkTask(\"d2\",\"[V]\",date1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"15/09/2019 22:23\".trim(), formatter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"deadline\",date1,1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"21/09/2019 00:00\".trim(), formatter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d2 \u003d LocalDateTime.parse(\"28/10/2019 22:22\".trim(), formatter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date2 \u003d new Date(d2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new EventsTask(\"e1\",date1,date2,2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks2.add(new EventsTask(\"e1\",date1,date2,2));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks2.add(new EventsTask(\"e2\",\"[V]\",date1,date2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            d1 \u003d LocalDateTime.parse(\"22/09/2019 12:12\".trim(), formatter);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new NonExistentDateException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            } catch (NonExistentDateException ex) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        date1 \u003d new Date(d1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new HomeworkTask(\"deadlineOther\",date1,2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"\u0026\",3));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"1\",4));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks2.add(new TodoTask(\"t1\",4));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks2.add(new TodoTask(\"t2\",\"[V]\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"2\",5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"5\",6));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td1\",7));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td3\",8));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td4\",9));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"td5\",8));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"test\",7));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"test 2\",6));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.add(new TodoTask(\"test 3\",5));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents a JUnit test method for the SortCommand."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void SortCommandExecuteTest() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommandDate \u003d new SortCommand(\"sort date\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortCommandDate.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"d1\",tasks.get(0).getTask());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadline\",tasks.get(1).getTask());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"e1\",tasks.get(2).getTask());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadlineOther\",tasks.get(3).getTask());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"\u0026\",tasks.get(4).getTask());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"1\",tasks.get(5).getTask());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"2\",tasks.get(6).getTask());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"5\",tasks.get(7).getTask());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td1\",tasks.get(8).getTask());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td3\",tasks.get(9).getTask());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td4\",tasks.get(10).getTask());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td5\",tasks.get(11).getTask());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test\",tasks.get(12).getTask());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 2\",tasks.get(13).getTask());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 3\",tasks.get(14).getTask());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand1 \u003d new SortCommand(\"sort ok\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "            sortCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof MeaninglessException);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand2 \u003d new SortCommand(\"sort 4\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "            sortCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof MeaninglessException);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand10 \u003d new SortCommand(\"sort\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortCommand10.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EmptyArgumentException);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand3 \u003d new SortCommand(\"sort description\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huangje"
        },
        "content": "            sortCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"\u0026\",tasks.get(0).getTask());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"1\",tasks.get(1).getTask());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"2\",tasks.get(2).getTask());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"5\",tasks.get(3).getTask());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"d1\",tasks.get(4).getTask());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadline\",tasks.get(5).getTask());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadlineOther\",tasks.get(6).getTask());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"e1\",tasks.get(7).getTask());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td1\",tasks.get(8).getTask());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td3\",tasks.get(9).getTask());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td4\",tasks.get(10).getTask());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td5\",tasks.get(11).getTask());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test\",tasks.get(12).getTask());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 2\",tasks.get(13).getTask());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 3\",tasks.get(14).getTask());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand13 \u003d new SortCommand(\"sort priority\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortCommand13.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d15);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"\u0026\",tasks.get(4).getTask());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"1\",tasks.get(5).getTask());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"2\",tasks.get(6).getTask());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"5\",tasks.get(8).getTask());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"d1\",tasks.get(0).getTask());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadline\",tasks.get(1).getTask());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"deadlineOther\",tasks.get(2).getTask());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"e1\",tasks.get(3).getTask());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td1\",tasks.get(10).getTask());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td3\",tasks.get(12).getTask());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td4\",tasks.get(14).getTask());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"td5\",tasks.get(13).getTask());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test\",tasks.get(11).getTask());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 2\",tasks.get(9).getTask());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(\"test 3\",tasks.get(7).getTask());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand14 \u003d new SortCommand(\"sort type\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortCommand14.execute(tasks2,ui,storage);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks2.size()\u003d\u003d6);// 2 todo tasks, 2 homework tasks, 2 event tasks"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(tasks2.get(0).getTag(),tasks2.get(1).getTag());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(tasks2.get(2).getTag(),tasks2.get(3).getTag());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(tasks2.get(4).getTag(),tasks2.get(5).getTag());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SortCommand sortCommand15 \u003d new SortCommand(\"sort done\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            sortCommand15.execute(tasks2,ui,storage);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks2.size()\u003d\u003d6);// 3 done tasks, 3 not done"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(tasks2.get(0).getMark(),tasks2.get(1).getMark());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(tasks2.get(1).getMark(),tasks2.get(2).getMark());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(tasks2.get(3).getMark(),tasks2.get(4).getMark());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertEquals(tasks2.get(4).getMark(),tasks2.get(5).getMark());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the after of SortCommandTest."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void afterSortCommandTest(){"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.getList().removeAll(tasks.getList());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks2.getList().removeAll(tasks2.getList());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch(FileException f){"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 10,
      "laurenthg": 280
    }
  },
  {
    "path": "src/test/java/leduc/TodoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.command.TodoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import leduc.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " * Represents a JUnit test class for the TodoCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class TodoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the before of TodoCommandTest."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void beforeTodoCommandTest(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui \u003d new UiEn();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/testFile.txt\", System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/configTest.txt\",System.getProperty(\"user.dir\")+ \"/src/test/java/testFile/welcome.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (FileException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        } catch (MeaninglessException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents a JUnit test method for the TodoCommand."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Test the command depending on the input String (user)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void TodoCommandTest() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand1 \u003d new TodoCommand(\"todo ok\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand1.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand2\u003d new TodoCommand(\"todo prio\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand2.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand3\u003d new TodoCommand(\"todo okprio\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand3.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand4\u003d new TodoCommand(\"todo\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand4.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EmptyTodoException);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand5\u003d new TodoCommand(\"todo prio 5\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand5.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof EmptyTodoException);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d3);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand6\u003d new TodoCommand(\"todo priotask\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand6.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d4);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(3).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand7\u003d new TodoCommand(\"todo td prio 23\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand7.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d4);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(3).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        TodoCommand todoCommand8\u003d new TodoCommand(\"todo td prio 2\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            todoCommand8.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch( DukeException e ){"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(e instanceof PrioritizeLimitException);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d5);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(0).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(1).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(2).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(3).getPriority() \u003d\u003d5);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.get(4).getPriority() \u003d\u003d2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     * Represents the after of TodoCommandTest."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void afterTodoCommandTest(){"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        tasks.getList().removeAll(tasks.getList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            storage.save(tasks.getList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch(FileException f){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 1,
      "laurenthg": 159
    }
  },
  {
    "path": "src/test/java/leduc/UiEnTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class UiEnTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void BeforeUiEnExecuteTest(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui \u003d new UiEn();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "        tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void UiEnExecuteTest(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        Task task \u003d new TodoTask(\"UiEnTest\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "        HomeworkTask homeTask \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        EventsTask eventTask \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "            homeTask \u003d new HomeworkTask(\"UiEnTest\", new Date(\"21/11/2019 20:20\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (NonExistentDateException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventTask \u003d new EventsTask(\"UiEnTest\", new Date(\"21/11/2019 20:20\"), new Date(\"22/11/2019 20:20\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (NonExistentDateException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ArrayList\u003cTask\u003e emptyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Hope to see you again soon!\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showDelete(task, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Noted. I\u0027ve removed this task\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showDone(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"I\u0027ve marked this task as done\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showTask(task, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Got it. I\u0027ve added this task\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showFindMatching(\"UiEnTest\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Here are the most relevant tasks in your list\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showFindNotMatching();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"There is no matching tasks in your list\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showList(tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Here are the tasks in your list\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showNoTask();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"There is any task yet\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showPostpone(homeTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Noted. I\u0027ve postponed this task\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showPrioritize(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Got it. I\u0027ve set the priority of this task\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showReschedule(eventTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Noted. I\u0027ve rescheduled this task\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showNewWelcome(\"UiTestFr\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The welcome message is edited\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showSnooze(homeTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Noted. I\u0027ve snoozed this task\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showSort();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"This is the new task list order:\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showGeneralStats(1,1,1,1,1,1,1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Here are some general statistics about your task list\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showPriorityStats(1,1,1,1,1,1,1,1,1,1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Here are some priority statistics about your task list\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showCompletionStats(1,1,1,1,1,1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Here are some completion statistics about your task list\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showUnFinishedTasks(tasks.getList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Here are the unfinished tasks in your list\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showUnFinishedTasks(emptyList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"There are no unfinished tasks in your list\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showHelp();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"All command will be display as \"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showLanguage(\"English\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"English\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEditChooseTask();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Please choose the task to edit from the list by its index\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEdit2Choice();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Please choose what you want to edit (1 or 2)\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEditWhat(\"UiEnTest\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Please enter the new UiEnTest\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEdit(task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The task is edited:\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showAskShortcut(\"UiEnTest\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Please enter a shortcut for UiEnTest\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showAskAllShortcut(\"UiEnTest\", \"UiEnTest\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The precedent shortcut for UiEnTest is UiEnTest please enter new shortcut\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showOneShortcutSet(\"UiEnTest\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The shortcut for UiEnTest\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showAllShortcutSet();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"All shortcut has been set\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEnterDayShow();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"You have enter the show day mode.\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEnterDayOfWeekShow();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"You have enter the show day of week mode\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEnterMonthShow();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"You have enter the show month mode.\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEnterYearShow();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"You have enter the show year mode\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showNotCompleteList(tasks.getList(), tasks);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Here are the tasks in your list\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.terminateShortcut();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The shortcut edit mode is being terminated earlier\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showErrorLanguage();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The language that you have chosen is currently not available\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new DateComparisonEventException());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The second date should not be before the first one.\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new DuplicationShortcutException());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The shortcut already exists\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyArgumentException());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"There should have an argument\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyEventDateException());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Please enter a period for the event task\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyEventException());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The description of a event task cannot be empty\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyHomeworkDateException());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Please enter a deadline for the task\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyHomeworkException());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The description of a homework task cannot be empty\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyTodoException());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The description of a todo cannot be empty\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EventTypeException());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The task should be a event task\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new FileException());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"File doesn\u0027t exist or cannot be created or cannot be opened\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new HomeworkTypeException());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The task should be a homework task\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new MeaninglessException());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"I\u0027m sorry, but I don\u0027t know what that means\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new NonExistentDateException());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The date doesn\u0027t exist\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new NonExistentTaskException());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The task doesn\u0027t exist\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new PostponeHomeworkException());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The new homework should not be before the old one\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new PrioritizeFormatException());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Please respect the prioritize command format\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new PrioritizeLimitException());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The priority of a task should be an int greater than or equal to  0\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new WrongParameterException());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The parameters are wrong\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EventDateException());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"The start date should be before the end date for an event task\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EditFormatException());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Please respect the edit command format\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new UserAnswerException());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Please answer correctly the question\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new InvalidFlagException());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Invalid Flag\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new RecurrenceException());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Please respect the recurrence format\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new RecurrenceDateException());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"You are trying to make the event recurrent but there will\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new ConflictDateException(emptyList));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Here are the tasks in your list\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void AfterUiEnExecuteTest() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "        tasks.getList().removeAll(tasks.getList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 181
    }
  },
  {
    "path": "src/test/java/leduc/UiFrTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huangje"
        },
        "content": "package leduc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huangje"
        },
        "content": "import leduc.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huangje"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huangje"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huangje"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huangje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huangje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huangje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huangje"
        },
        "content": "public class UiFrTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huangje"
        },
        "content": "    private static final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void BeforeUiFrExecuteTest(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui \u003d new UiFr();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huangje"
        },
        "content": "        tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(tasks.size()\u003d\u003d0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public void UiFrExecuteTest(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huangje"
        },
        "content": "        Task task \u003d new TodoTask(\"UiFrTest\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huangje"
        },
        "content": "        HomeworkTask homeTask \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huangje"
        },
        "content": "        EventsTask eventTask \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huangje"
        },
        "content": "            homeTask \u003d new HomeworkTask(\"UiFrTest\", new Date(\"21/11/2019 20:20\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (NonExistentDateException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huangje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huangje"
        },
        "content": "            eventTask \u003d new EventsTask(\"UiFrTest\", new Date(\"21/11/2019 20:20\"), new Date(\"22/11/2019 20:20\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huangje"
        },
        "content": "        } catch (NonExistentDateException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huangje"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huangje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ArrayList\u003cTask\u003e emptyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huangje"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"J\u0027espère qu\u0027on vous reverra bientôt\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showDelete(task, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"C\u0027est noté. J\u0027ai retiré la tâche\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showDone(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"J\u0027ai noté que vous aviez fini cette tâche\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showTask(task, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Compris. J\u0027ai ajouté cette tâche\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showFindMatching(\"UiFrTest\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Voici les tâches correspondants qui sont dans votre liste\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showFindNotMatching();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Il n\u0027y a pas de tâche correspondant dans votre liste\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showList(tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Voici les tâches dans votre liste\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showNoTask();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Il n\u0027y a pas encore de tâche\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showPostpone(homeTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"C\u0027est noté. J\u0027ai reporté cette tâche\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showPrioritize(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Compris. La priorité de cette tâche a été assignée\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showReschedule(eventTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"C\u0027est noté. J\u0027ai replanifié cette tâche\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showNewWelcome(\"UiTestFr\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Le message de bienvenue a été édité\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showSnooze(homeTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"C\u0027est noté. J\u0027ai snooze cette tâche\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showSort();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Voici la nouvelle liste de tâche dans l\u0027ordre:\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showGeneralStats(1,1,1,1,1,1,1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Voici quelques statistiques à propos de votre liste de tâche\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showPriorityStats(1,1,1,1,1,1,1,1,1,1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Voici quelques statistiques prioritaires sur votre liste de tâches\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showCompletionStats(1,1,1,1,1,1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Voici quelques statistiques d\u0027achèvement de votre liste de tâches\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showUnFinishedTasks(tasks.getList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Voici la liste des tâches inaccomplie\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showUnFinishedTasks(emptyList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Il n\u0027y a pas de tâche inaccomplie dans votre liste de tâche\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showHelp();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Toutes les commandes vont être affichées ainsi\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showLanguage(\"French\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"French\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEditChooseTask();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Choisissez une tâche dans la liste par son index s\u0027il vous plait\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEdit2Choice();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Choisissez ce que vous voulez éditer\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEditWhat(\"UiFrTest\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Entrez le nouveau UiFrTest\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEdit(task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La tâche a été éditée:\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showAskShortcut(\"UiFrTest\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Entrez s\u0027il vous plait un raccourci pour UiFrTest\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showAskAllShortcut(\"UiFrTest\", \"UiFrTest\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Le précédent raccourci pour UiFrTest est UiFrTest entrez un nouveau s\u0027il vous plait\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showOneShortcutSet(\"UiFrTest\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Le raccourci pour UiFrTest\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showAllShortcutSet();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Tous les raccourcis ont été enregistrés\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEnterDayShow();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Vous êtes entré dans le mode show date.\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEnterDayOfWeekShow();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Vous êtes entré dans le mode show jour de la semaine\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEnterMonthShow();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Vous êtes entré dans le mode show mois.\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showEnterYearShow();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Vous êtes entré dans le mode show année\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showNotCompleteList(tasks.getList(), tasks);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Voici les tâches dans votre liste\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.terminateShortcut();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Le mode d\u0027édition de shortcut a été terminé plus tôt\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showErrorLanguage();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La langue que vous aviez sélectionné est actuellement indisponible\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new DateComparisonEventException());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La deuxième date ne devrait pas être avant la première.\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new DuplicationShortcutException());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Le raccourci existe déjà\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyArgumentException());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Il devrait y avoir un argument\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyEventDateException());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Veuillez entrer une période pour la tâche event\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyEventException());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La description d\u0027une tâche event ne peut pas être vide\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyHomeworkDateException());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Veuillez entrer l\u0027échéance pour la tâche homework\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyHomeworkException());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La description d\u0027une tâche homework ne peut pas être vide\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyTodoException());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La description d\u0027une tâche homework ne peut pas être vide\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EmptyTodoException());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La description d\u0027un todo ne peut pas être vide\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EventTypeException());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La tâche devrait être de type event\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new FileException());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Le fichier n\u0027existe pas ou ne peut pas être créé ou ne peut pas être ouvert\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new HomeworkTypeException());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La tâche devrait être de type homework\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new MeaninglessException());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Je suis désolé mais je ne sais pas ce que cela signifie\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new NonExistentDateException());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La date n\u0027existe pas\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new NonExistentTaskException());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La tâche n\u0027existe pas\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new PostponeHomeworkException());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Le nouveau homework ne devrait pas être avant l\u0027ancien\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new PrioritizeFormatException());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Veuillez respecter le format de prioritize\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new PrioritizeLimitException());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La priorité d\u0027une tâche doit être supérieur ou égale à 0\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new WrongParameterException());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Les paramètres sont faux\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EventDateException());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"La date de départ ne doit pas être postérieur à la \"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new EditFormatException());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Veuillez respecter le format de la command edit\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new UserAnswerException());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Veuillez répondre correctement à la question\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new InvalidFlagException());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Drapeau invalide\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new RecurrenceException());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Respectez le format pour la recurrence\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new RecurrenceDateException());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Vous êtes en train de créer un event récurrent\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huangje"
        },
        "content": "        ui.showError(new ConflictDateException(emptyList));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huangje"
        },
        "content": "        assertTrue(outContent.toString().contains(\"Il y a un conflit de date avec cet event\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huangje"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huangje"
        },
        "content": "    public static void AfterUiFrExecuteTest() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huangje"
        },
        "content": "        tasks.getList().removeAll(tasks.getList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huangje"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huangje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huangje"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huangje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huangje": 183
    }
  }
]
