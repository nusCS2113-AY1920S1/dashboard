[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027cube\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "version \u00271.4\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            srcDirs\u003d [\"src/main/java\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            srcDirs\u003d [\"src/main/resources\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    mainClassName \u003d \"cube.CubeLauncher\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "compileJava {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    options.compilerArgs \u003c\u003c \"-Xlint:unchecked\" \u003c\u003c \"-Xlint:deprecation\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tygq13"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.10.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.dataformat\u0027, name: \u0027jackson-dataformat-csv\u0027, version: \u00272.10.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    String jUnitVersion \u003d \u00275.5.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tygq13"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    archiveBaseName \u003d \"cube\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    archiveVersion \u003d \"1.4\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 52,
      "tygq13": 4,
      "-": 18,
      "ZKathrynx": 6
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "rootProject.name \u003d \u0027Cube\u0027"
      }
    ],
    "authorContributionMap": {
      "kuromono": 1
    }
  },
  {
    "path": "src/main/java/cube/Cube.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * Cube.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * The driver file, which is the Entry Point for Command Line Interface (CLI)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.sale.SalesHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.promotion.PromotionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.util.FileUtilJson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.LogUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * The Entry Point for the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class Cube {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    private ModelManager modelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private FileUtilJson\u003cStorageManager\u003e storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private final Logger logger \u003d LogUtil.getLogger(Cube.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * The Cube constructor with filePath."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param filePath The file path where the Cube data is stored."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public Cube(String filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Cube ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storage \u003d new FileUtilJson\u003c\u003e(filePath, \"cube.json\", storageManager);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            LogUtil.init(storageManager.getConfig().getLogConfig());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            storageManager \u003d storage.load();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            FoodList foodList \u003d storageManager.getFoodList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            SalesHistory salesHistory \u003d storageManager.getSalesHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            PromotionList promotionList \u003d storageManager.getPromotionList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            modelManager \u003d new ModelManager(foodList, salesHistory, promotionList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (CubeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            ui.showLoadingError(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Run the Cube programme with received user commands and execute the commands."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tygq13"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                logger.info(\"Command Entered : \" + fullCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tygq13"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tygq13"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tygq13"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tygq13"
        },
        "content": "                CommandResult result \u003d c.execute(modelManager, storageManager);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tygq13"
        },
        "content": "                ui.showCommandResult(result);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                storage.save(storageManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            } catch (CubeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tygq13"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tygq13"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[  Exiting Cube  ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Initialize new Cube user and run the programme."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param args The programme arguments."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //future upgrade: allow user to specify data path"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        new Cube(\"data\").run();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 27,
      "tygq13": 43,
      "ZKathrynx": 3,
      "-": 3,
      "LL-Pengfei": 17
    }
  },
  {
    "path": "src/main/java/cube/CubeApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * CubeApp.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * the Entry Point for the Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.ui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.FileUtilJson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.LogUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * The Entry Point for the Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class CubeApp extends Application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private FileUtilJson\u003cStorageManager\u003e storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private final Logger logger \u003d LogUtil.getLogger(CubeApp.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Cube ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storage \u003d new FileUtilJson\u003c\u003e(\"data\", \"cube.json\", storageManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            storageManager \u003d storage.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (CubeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            MainWindow mwc \u003d new MainWindow(stage, storageManager, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            mwc.initComponents();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            mwc.show();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            logger.severe(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[  Exiting Cube  ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 52,
      "LL-Pengfei": 5
    }
  },
  {
    "path": "src/main/java/cube/CubeLauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * Launcher class to facilitate launching of JavaFX application directly from JAR."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class CubeLauncher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * The main function of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param args cli or gui."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (args.length \u003d\u003d 1 \u0026\u0026 args[0].equals(\"-cli\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                v2.0 Feature: To support launching CLI by specifying \"-cli\" args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "             */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            Application.launch(CubeApp.class, args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            Application.launch(CubeApp.class, args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 20,
      "ZKathrynx": 5
    }
  },
  {
    "path": "src/main/java/cube/exception/CubeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " * The parent exception class that handles general exceptions in Using Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package cube.exception;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class CubeException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public CubeException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor with one argument."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs the exception with message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message the message to be printed when exception happens."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public CubeException(String message) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 4,
      "-": 20,
      "ZKathrynx": 2
    }
  },
  {
    "path": "src/main/java/cube/logic/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * The command add a food to food list and storage."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tprivate final Food toAdd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic static final String MESSAGE_SUCCESS \u003d \"New Food added: \\n\" "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t+ \"%1$s\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t+ \"Now you have %2$s food in the list.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Default constructor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param food the food to be added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic AddCommand(Food food) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis.toAdd \u003d food;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Adds food to foodList and store it if the food does not already exists, otherwise throws"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Command exception."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param storage The current Storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The message feedback to user before Programme Exit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic CommandResult execute(ModelManager model, StorageManager storage) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tFoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tCommandUtil.requireNameNotExists(list, toAdd.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tCommandUtil.requireValidExpiryDate(toAdd.getExpiryDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tlist.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tstorage.storeFoodList(list);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, list.size()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 40,
      "ZKathrynx": 8
    }
  },
  {
    "path": "src/main/java/cube/logic/command/AddPromotionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " * The command adds a new promotion to the promotion list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.util.CommandUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.Promotion;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.PromotionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class AddPromotionCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    private final Promotion newPromotion;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public Food promotionFood;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New promotion added: \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            + \"%1$s\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            + \"Now you have %2$s promotional items in the list.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param promotion the promotion to be added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public AddPromotionCommand(Promotion promotion) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.newPromotion \u003d promotion;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Acquires the food for which the promotion has to be implemented."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param list The food list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws CommandException when the command requirements are not fulfilled."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void obtainPromotionFood(FoodList list) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        CommandUtil.requireValidName(list, newPromotion.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        promotionFood \u003d list.get(newPromotion.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Adds promotion to promotionList and store it if the promotion does not already exist,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * otherwise throws Command exception."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param model storage model."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param storage The storage we have."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return Message feedback to user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws CommandException when the command requirements are not fulfilled."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public CommandResult execute(ModelManager model, StorageManager storage) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        FoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        PromotionList promotionList \u003d model.getPromotionList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        obtainPromotionFood(list);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandUtil.requireNotOverlappingTime(promotionList, newPromotion);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        CommandUtil.requireValidPromotionDates(newPromotion.getStartDate(), newPromotion.getEndDate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandUtil.requireNotFreeItem(list,newPromotion.getName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        double tempPrice \u003d promotionFood.getPrice();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        double newPrice;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        newPrice \u003d (newPromotion.getDiscount() / 100) * tempPrice;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        newPromotion.setPromotionalPrice(newPrice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        promotionList.add(newPromotion);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        storage.storePromotionList(promotionList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newPromotion, promotionList.size()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 58,
      "ZKathrynx": 11
    }
  },
  {
    "path": "src/main/java/cube/logic/command/BatchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * BatchCommand.java."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * Support commands related to batch file imports \u0026 exports."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.FileUtilCSV;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class BatchCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Use enums to specify the export or import operations to be performed by FileUtilCSV."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public enum OperationType {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        EXPORT, IMPORT, EMPTY"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private BatchCommand.OperationType operationType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private FileUtilCSV\u003cFood\u003e batchUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The product list has been successfully %1$s as file:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        + \"%2$s\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String MESSAGE_EXPORT \u003d \"exported\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String MESSAGE_IMPORT \u003d \"imported\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TEMPLATE \u003d \"An empty template has been successfully generated as file:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        + \"%1$s\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"The file that you are importing cannot be found:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        + \"%1$s\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param fileName      Sets the filename of the CSV file to be loaded/saved from."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param operationType Specifies to either IMPORT or EXPORT operation."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public BatchCommand(String fileName, OperationType operationType) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.operationType \u003d operationType;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.batchUtil \u003d new FileUtilCSV\u003c\u003e(\"data\", fileName, new Food());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Calls \u0026 updates the required functions for CSV batch import operations."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param model   ModelManager object to update the FoodList object from the import."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param storage StorageManager object to update the FoodList object from the import."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @throws CubeException Throws an exception if error occured during file handling."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private boolean batchImport(ModelManager model, StorageManager storage) throws CubeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (batchUtil.checkFileAvailable(false)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            ArrayList\u003cFood\u003e foodList \u003d batchUtil.load();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            FoodList importedFoodList \u003d new FoodList(foodList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            model.setFoodList(importedFoodList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            storage.storeFoodList(importedFoodList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Calls \u0026 updates the required functions for CSV batch export operations."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param storage StorageManager object that contains the FoodList object to be saved."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @throws CubeException Throws an exception if error occured during file handling."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void batchExport(StorageManager storage) throws CubeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        batchUtil.save(storage.getFoodList().getFoodList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a empty template CSV file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @throws CubeException Throws an exception if error occured during file handling."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void batchEmpty() throws CubeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        batchUtil.save(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Constructs the command result output to be shown to the user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public CommandResult execute(ModelManager model, StorageManager storage) throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            switch (operationType) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            case IMPORT:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                boolean importSuccess \u003d batchImport(model, storage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                if (importSuccess) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    return new CommandResult(String.format(MESSAGE_SUCCESS, MESSAGE_IMPORT, fileName));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    return new CommandResult(String.format(MESSAGE_FILE_NOT_FOUND, fileName));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            case EXPORT:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                batchExport(storage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, MESSAGE_EXPORT, fileName));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            case EMPTY:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                batchEmpty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS_TEMPLATE, fileName));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                throw new CommandException(CommandErrorMessage.INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (CubeException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            throw new CommandException(CommandErrorMessage.INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 120,
      "ZKathrynx": 1
    }
  },
  {
    "path": "src/main/java/cube/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * This an abstract parent class of all commands."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Indicates whethis this command signals exit. Default is false."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return false by defualt."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic abstract CommandResult execute(ModelManager model, StorageManager storage) throws CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 24,
      "ZKathrynx": 1
    }
  },
  {
    "path": "src/main/java/cube/logic/command/ConfigCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * ConfigCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * Support commands related to stored settings configurations."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.ConfigStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.LogConfig;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.UiConfig;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class ConfigCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Use enums to specify the configuration type to be configured."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public enum ConfigType {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        UI, LOG, VIEW"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private ConfigType configType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private UiConfig uiConfig;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private LogConfig logConfig;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The %1$s settings has been configured successfully.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        + \"Settings will be applied when you restart the program.\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static String MESSAGE_VIEW \u003d \"All the saved configurations are as below:\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Default Constructor for listing all configs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param configType Type of configuration."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public ConfigCommand(ConfigType configType) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.configType \u003d configType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Default Constructor for changing UI-related configurations."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param configType Type of configuration to set."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param uiConfig   UiConfig object containing configuration parameters to set."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public ConfigCommand(ConfigType configType, UiConfig uiConfig) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.configType \u003d configType;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.uiConfig \u003d uiConfig;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Default Constructor for changing Logging-related configurations."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param configType Type of configuration to set."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param logConfig  LogConfig object containing configuration parameters to set."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public ConfigCommand(ConfigType configType, LogConfig logConfig) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.configType \u003d configType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.logConfig \u003d logConfig;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Calls \u0026 updates the required functions for updating UiConfig values."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param storage StorageManager object that contains the ConfigStorage object to be saved."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void configureUiConfig(StorageManager storage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ConfigStorage configStorage \u003d storage.getConfig();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        configStorage.setUiConfig(uiConfig);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storage.setConfig(configStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Calls \u0026 updates the required functions for updating LogConfig values."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param storage StorageManager object that contains the ConfigStorage object to be saved."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void configureLogConfig(StorageManager storage) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ConfigStorage configStorage \u003d storage.getConfig();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        configStorage.setLogConfig(logConfig);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storage.setConfig(configStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Lists the configurations stored in various config classes."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param storage StorageManager object that contains configuration values stored in ConfigStorage."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void viewConfig(StorageManager storage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ConfigStorage configStorage \u003d storage.getConfig();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        uiConfig \u003d configStorage.getUiConfig();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logConfig \u003d configStorage.getLogConfig();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        MESSAGE_VIEW +\u003d \"+ UI Configurations (Only works in GUI-mode):\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        MESSAGE_VIEW +\u003d uiConfig.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        MESSAGE_VIEW +\u003d \"\\n+ Logging Configurations:\\n\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        MESSAGE_VIEW +\u003d logConfig.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Constructs the command result output to be shown to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public CommandResult execute(ModelManager model, StorageManager storage) throws CommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        switch (configType) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        case UI:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            configureUiConfig(storage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, configType.toString()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        case LOG:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            configureLogConfig(storage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, configType.toString()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        case VIEW:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            viewConfig(storage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return new CommandResult(MESSAGE_VIEW);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            throw new CommandException(CommandErrorMessage.INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 124
    }
  },
  {
    "path": "src/main/java/cube/logic/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "//@@author ZKathrynx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * DeleteCommand.java."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Support commands related to deletion."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.util.CommandUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * This class supports commands related to delete."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Use enums to specify the states of the food to be deleted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic enum DeleteBy {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tINDEX, NAME, TYPE, ALL"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tprivate int deleteIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tprivate String deleteDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tprivate DeleteBy param;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic static final String MESSAGE_SUCCESS_SINGLE \u003d \"Nice! I\u0027ve removed this food:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t+ \"%1$s\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t    + \"Now you have %2$s food in the list.\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic static final String MESSAGE_SUCCESS_MULTIPLE \u003d \"Nice! I\u0027ve removed this type:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t+ \"%1$s\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t+ \"This type contains \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t+ \"%2$s food items\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t+ \"Now you have %3$s food in the list.\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic static final String MESSAGE_SUCCESS_ALL \u003d \"Nice! I\u0027ve removed all food from your list.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t+ \"Total number removed is:\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t+ \"%1$s.\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * The default constructor, empty since parameters are required to perform delete command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic DeleteCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * The constructor for delete using index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param index The index of the food to be deleted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param param The parameter is used to specify the type of deletion."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic DeleteCommand(int index, String param) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tthis.deleteIndex \u003d index - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tthis.param \u003d DeleteBy.valueOf(param);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * The constructor for delete using food name or food type."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param deleteDescription The food name or food type to be deleted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param param The parameter is used to specify the type of deletion."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic DeleteCommand(String deleteDescription, String param) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tthis.deleteDescription \u003d deleteDescription;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tthis.param \u003d DeleteBy.valueOf(param);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * The class removes the food the user wishes to remove."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param storage The storage we have."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return The Feedback to User for Delete Command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @throws CommandException If deletion is unsuccessful."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic CommandResult execute(ModelManager model, StorageManager storage) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tFoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tFood toDelete;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tswitch (param) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase INDEX:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tCommandUtil.requireValidIndex(list, deleteIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\ttoDelete \u003d list.get(deleteIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tlist.removeIndex(deleteIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tstorage.storeFoodList(list);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new CommandResult(String.format(MESSAGE_SUCCESS_SINGLE, toDelete, list.size()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase NAME:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tCommandUtil.requireValidName(list, deleteDescription);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\ttoDelete \u003d list.get(deleteDescription);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tlist.removeName(deleteDescription);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tstorage.storeFoodList(list);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new CommandResult(String.format(MESSAGE_SUCCESS_SINGLE, toDelete, list.size()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase TYPE:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tCommandUtil.requireValidType(list, deleteDescription);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tint count \u003d list.removeType(deleteDescription);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tstorage.storeFoodList(list);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new CommandResult(String.format(MESSAGE_SUCCESS_MULTIPLE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\t\tdeleteDescription, count, list.size()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase ALL:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tcount \u003d list.size();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tlist.clear();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tstorage.storeFoodList(list);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new CommandResult(String.format(MESSAGE_SUCCESS_ALL, count));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tdefault:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 111
    }
  },
  {
    "path": "src/main/java/cube/logic/command/DeletePromotionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " * The command deletes a promotion from the promotion list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " * @@author parvathi14"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.util.CommandUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.Promotion;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.PromotionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "public class DeletePromotionCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Use enums to specify which promotion is to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public enum DeletePromotionBy {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        INDEX, ALL"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    private int deletePromotionIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    private String all;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    private DeletePromotionBy deleteParam;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public static final String MESSAGE_SUCCESS_SINGLE \u003d \"Nice! I\u0027ve removed this promotion:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            + \"%1$s\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            + \"Now you have %2$s promotions in the list.\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL \u003d \"Nice! I\u0027ve removed all the promotions from your list. \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            + \"Total number removed is:\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            + \"%1$s.\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Default constructor of ListPromotionCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public DeletePromotionCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * The constructor for deleting based on index value."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param index The index of the promotion to be deleted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param deleteParam The parameter is used to specify the type of deletion."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public DeletePromotionCommand(int index, String deleteParam) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.deletePromotionIndex \u003d index - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.deleteParam \u003d DeletePromotionBy.valueOf(deleteParam);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * The constructor for deleting all the promotions."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param all User input stating that they want to remove ALL the promotions from the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param deleteParam The parameter is used to specify the type of deletion."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public DeletePromotionCommand(String all, String deleteParam) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.all \u003d all;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.deleteParam \u003d DeletePromotionBy.valueOf(deleteParam);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * The class removes the promotion(s) the user wishes to remove."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param storage The storage we have."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return The feedback to user for delete promotion command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @throws CommandException If deletion is unsuccessful."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public CommandResult execute(ModelManager model, StorageManager storage) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        PromotionList list \u003d model.getPromotionList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        Promotion toDelete;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        switch (deleteParam) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            case INDEX:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                CommandUtil.requireValidIndexPromotion(list, deletePromotionIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                toDelete \u003d list.get(deletePromotionIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                list.removeIndex(deletePromotionIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                storage.storePromotionList(list);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS_SINGLE, toDelete, list.size()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            case ALL:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                int count \u003d list.size();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                list.clear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                storage.storePromotionList(list);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS_ALL, count));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 94
    }
  },
  {
    "path": "src/main/java/cube/logic/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * The command signals exit to main process."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic static final String MESSAGE_SUCCESS \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Signals that the user wishes to exit programme."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t * @return True to signal exit programme."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Signals exit to main engine, and provide exit feedback to user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param model The facade of all models."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param storage The storage manager for commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The command result with feedback to user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic CommandResult execute(ModelManager model, StorageManager storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn new CommandResult(MESSAGE_SUCCESS, false, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 27,
      "ZKathrynx": 2,
      "LL-Pengfei": 8
    }
  },
  {
    "path": "src/main/java/cube/logic/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "//@@author ZKathrynx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.FoodList.SortType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.util.CommandUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Enum to indicate the type of delete."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public enum FindBy {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        INDEX, NAME, TYPE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    SortType sortType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private int findIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private String findDescription;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private FindBy param;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"This is the food you want to find:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            + \"%1$s\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String MESSAGE_SUCCESS_M \u003d \"There are in total %1$s food you want to find:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            + \"%2$s\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Getter for find by type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return find by type of this command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public FindBy getParam() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return param;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public FindCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Constructor for delete using index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param index the index to be deleted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param param the parameter to indicate type of deletion."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public FindCommand(int index, String param) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.findIndex \u003d index - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.param \u003d FindBy.valueOf(param);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Constructor for delete using food name or food type."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param description the food name or food type to be deleted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param param the parameter to indicate type of deletion."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public FindCommand(String description, String param) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.findDescription \u003d description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.param \u003d FindBy.valueOf(param);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Constructor for delete using food name or food type."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param description the food name or food type to be deleted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param param the parameter to indicate type of deletion."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public FindCommand(String description, String param, SortType sortType) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.findDescription \u003d description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.param \u003d FindBy.valueOf(param);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.sortType \u003d sortType;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public CommandResult execute(ModelManager model, StorageManager storage) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        switch (param) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            case INDEX:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandUtil.requireValidIndex(list, findIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, list.get(findIndex)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            case NAME:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                FoodList result \u003d new FoodList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                int count \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    if (list.get(i).getName().toLowerCase().contains(findDescription.toLowerCase())) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        result.add(list.get(i));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        count++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (sortType !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    result.sort(sortType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    throw new CommandException(CommandErrorMessage.FOOD_NOT_EXISTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS_M, count,result));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            case TYPE:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandUtil.requireValidType(list, findDescription);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                result \u003d new FoodList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                count \u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    if (list.get(i).getType() !\u003d null"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                            \u0026\u0026 list.get(i).getType().toLowerCase().equals("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                                    findDescription.toLowerCase())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        result.add(list.get(i));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        count++;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (sortType !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    result.sort(sortType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS_M, count,result));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 122
    }
  },
  {
    "path": "src/main/java/cube/logic/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "//@@author LL-Pengfei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * HelpCommand.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * Generate information about supported commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * This class enables the help command that generates the relevant information about all the other commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Currently we support the following commands: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t+ \"(all command ignore cases)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t+ \"Manipulate food:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t+ String.format(\"%1$-50s\", \"  \u0027add \u003cname\u003e \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t        + \"-t \u003ctype\u003e -p \u003cprice\u003e -c \u003ccost\u003e -s \u003cstock\u003e -e \u003cexpiry date\u003e\u0027 \")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t        + \"add a new food product with all details/description\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + String.format(\"%1$-50s\", \"  \u0027update \u003cname\u003e \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \"-t \u003ctype\u003e -p \u003cprice\u003e -c \u003ccost\u003e -s \u003cstock\u003e -e \u003cexpiry date\u003e\u0027 \")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \"updates the food product with all details/description\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + String.format(\"%1$-50s\", \"  \u0027profit -t1 \u003cstart time of the period to search\u003e \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \"-t2 \u003cend time of the period to search\u003e -all \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \"OR -i \u003cnumber\u003e OR -n \u003cfood name\u003e \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \"OR -t \u003cfood type\u003e\u0027\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \" to generate the profits \u0026 revenue for a food product in the list \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \"across a period, -all for all food\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + String.format(\"%1$-50s\", \"  \u0027delete -i \u003cnumber\u003e OR -n \u003cfood name\u003e \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \"OR -t \u003cfood type\u003e\u0027\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \"delete the specified food product in the list\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + String.format(\"%1$-50s\", \"  \u0027sold \u003cfood name\u003e -q \u003cquantity\u003e\u0027\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \"marks quantity q of product n sold\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t+ \"Show inventory:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t+ String.format(\"%1$-50s\", \"  \u0027list -sort \u003csort type\u003e\u0027\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t\t\t+ \"shows the list of food products, \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t\t\t+ \"sort type can be expiry/name/stock\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t+ String.format(\"%1$-50s\", \"  \u0027find -i \u003cnumber\u003e \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t\t\t+ \"OR -n \u003cfood name\u003e OR -t \u003cfood type\u003e -sort \u003csort type\u003e\u0027\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t\t\t+ \"find specific food using index/name/type, \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t\t\t+ \" sort type is only available when finding by type,\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t\t\t+ \" it can be expiry/name/stock\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t+ String.format(\"%1$-50s\", \"  \u0027reminder -d \u003cdays to expiry\u003e -s \u003cstock value\u003e\u0027\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t\t\t+ \"show the list of food products that are low on stock \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t\t\t+ \"and/or are approaching its expiry date\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t+ String.format(\"%1$-50s\", \"  \u0027promotion \u003cfood name\u003e \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t\t\t+ \"-% \u003cdiscount\u003e -s \u003cstart date\u003e -e \u003cend date\u003e\u0027\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t\t\t+ \"adds a new promotion item\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t+ String.format(\"%1$-50s\", \"  \u0027promotion -delete \u003cindex\u003e OR -all\u0027\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t\t\t+ \"deletes the specified promotion in the list \\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t+ String.format(\"%1$-50s\", \"  \u0027promotion -list\u0027\") + \"shows the list of promotions\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t\t+ \"Miscellaneous:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + String.format(\"%1$-50s\", \"  \u0027batch -i \u003cfilename\u003e OR -o \u003cfilename\u003e\u0027\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \"batch imports or outputs the list of food products as the filename in CSV.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + String.format(\"%1$-50s\", \"  \u0027config\u0027\") + \"lists all the stored user configurations.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + String.format(\"%1$-50s\", \"  \u0027config UI -h \u003cheight\u003e -w \u003cwidth\u003e\u0027\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \"updates the default window size configuration with specified values.\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + String.format(\"%1$-50s\", \"  \u0027config LOG -c \u003clog count\u003e -s \u003csize in MB\u003e -l \u003clevel\u003e\u0027\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    + \"updates the logging configuration with specified values.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + String.format(\"%1$-50s\", \"  \u0027bye\u0027 OR \u0027exit\u0027 OR \u0027quit\u0027\") + \"to exit the programme\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + String.format(\"%1$-50s\", \"  \u0027help\u0027\") + \"to show a list of available command\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Show the list of all available commands."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param model   The facade of all the models."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param storage The storage manager for commands."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return The command result with feedback to user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public CommandResult execute(ModelManager model, StorageManager storage) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LL-Pengfei": 77
    }
  },
  {
    "path": "src/main/java/cube/logic/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * The command list all the food."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList.SortType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.ProfitStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic SortType sortType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic static final String MESSAGE_SUCCESS \u003d \"Here are the food in your list: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t+ \"%1$s\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t+ \"The total revenue so far is $ %2$f\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Default constructor of ListCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic ListCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Constructor with one argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param sortType The type of sorting used for food list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic ListCommand(SortType sortType) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis.sortType \u003d sortType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Shows the list of food."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param model The facade of all models."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param storage The storage manager for commands."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The command result with feedback to user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic CommandResult execute(ModelManager model, StorageManager storage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tFoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tif (sortType !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\tlist.sort(sortType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\treturn new CommandResult(String.format(MESSAGE_SUCCESS, list, ProfitStorage.getAnnualRevenue()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 2,
      "tygq13": 46,
      "ZKathrynx": 5
    }
  },
  {
    "path": "src/main/java/cube/logic/command/ListPromotionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " * The command list all the promotions."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " * @author parvathi14"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.PromotionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "public class ListPromotionCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the list of promotions: \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            + \"%1$s\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Default constructor of ListPromotionCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public ListPromotionCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Shows the list of promotion."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param model storage model."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param storage The storage we have."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return Message feedback to user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public CommandResult execute(ModelManager model, StorageManager storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        PromotionList list \u003d model.getPromotionList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, list));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 32,
      "ZKathrynx": 7
    }
  },
  {
    "path": "src/main/java/cube/logic/command/ProfitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "//@@author LL-Pengfei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * ProfitCommand.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * Support commands related to generating profits and revenue."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.model.sale.Sale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.model.sale.SalesHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.storage.ProfitStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.command.util.CommandUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * This class supports commands related to generating profits and revenue."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "public class ProfitCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Use enums to specify the states of the object whose profits and revenue is to be generated."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public enum ProfitBy {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        INDEX, NAME, TYPE, ALL"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    private int profitIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    private String profitDescription;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    private Date dateI; //start date (initial)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    private Date dateF; //end date (final)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    private ProfitCommand.ProfitBy param;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            \u003d \"Nice! I\u0027ve generated the profits and revenue for all the stocks:\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + \"profit:  $ %1$s\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + \"revenue: $ %2$s\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + \"In total, you have %3$s food in the list.\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public static final String MESSAGE_SUCCESS_SINGLE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            \u003d \"Nice! I\u0027ve generated the profits and revenue for this food:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + \"profit:  $ %1$s\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + \"revenue: $ %2$s\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + \"In total, you have %3$s food in the list.\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public static final String MESSAGE_SUCCESS_MULTIPLE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            \u003d \"Nice! I\u0027ve generated the profits and revenue for this type:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + \"profit:  $ %1$s\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + \"revenue: $ %2$s\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + \"This type contains \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + \"%3$s food items\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            + \"In total, you have %4$s food in the list.\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * The default constructor, empty since parameters are required to perform generating profits and revenue command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public ProfitCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * The constructor for generating the total profits and revenue."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param dateI The start date of the period where generating profits and revenue is concerned."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param dateF The end date of the period where generating profits and revenue is concerned."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param param The parameter is used to specify the type of generating profits and revenue."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public ProfitCommand(Date dateI, Date dateF, String param) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.dateI \u003d dateI;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.dateF \u003d dateF;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.param \u003d ProfitCommand.ProfitBy.valueOf(param);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * The constructor for generating the total profits and revenue using index."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param dateI The start date of the period where generating profits and revenue is concerned."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param dateF The end date of the period where generating profits and revenue is concerned."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param index The index of the food whose profits and revenue are to be generated."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param param The parameter is used to specify the type of generating profits and revenue."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public ProfitCommand(Date dateI, Date dateF, int index, String param) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.dateI \u003d dateI;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.dateF \u003d dateF;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.profitIndex \u003d index - 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.param \u003d ProfitCommand.ProfitBy.valueOf(param);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * The constructor for generating the total profits and revenue using food name or food type."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param dateI The start date of the period where generating profits and revenue is concerned."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param dateF The end date of the period where generating profits and revenue is concerned."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param profitDescription The food name or food type whose profits and revenue are to be generated."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param param The parameter is used to specify the type of generating profits and revenue."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public ProfitCommand(Date dateI, Date dateF, String profitDescription, String param) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.dateI \u003d dateI;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.dateF \u003d dateF;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.profitDescription \u003d profitDescription;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.param \u003d ProfitCommand.ProfitBy.valueOf(param);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * A separate method to generate the annual profit revenue (for convenience)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param model The facade of the model list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public static void generateAnnualProfitRevenue(ModelManager model) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        SalesHistory saleSet \u003d ModelManager.getSalesHistory();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double toGenerateProfit \u003d 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double toGenerateRevenue \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance(ParserUtil.getTimeZone());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        cal.setTime(currentDate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        cal.set(Calendar.DAY_OF_YEAR, 1);  // Jan, Day 1"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Date startDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        cal.set(Calendar.MONTH, 11); // December"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        cal.set(Calendar.DAY_OF_MONTH, 31); // Day 31"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Date endDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Iterator\u003cSale\u003e it \u003d saleSet.iterator();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            Sale tempSale \u003d it.next();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            Date tempDate \u003d tempSale.getDate();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            if (tempDate.compareTo(startDate) \u003e\u003d 0 \u0026\u0026 tempDate.compareTo(endDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                double tempRevenue \u003d tempSale.getRevenue();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                double tempProfit \u003d tempSale.getProfit();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                toGenerateRevenue +\u003d tempRevenue;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                toGenerateProfit +\u003d tempProfit;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        ProfitStorage.setAnnualRevenue(toGenerateRevenue);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        ProfitStorage.setAnnualProfit(toGenerateProfit);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * The class generates the profits and revenue for food whose profits and revenue the user wishes to generate."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param storage The storage we have."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return The Feedback to User for Generate Revenue Command."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @throws CommandException If Generating Revenue is unsuccessful."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public CommandResult execute(ModelManager model, StorageManager storage) throws CommandException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        FoodList list \u003d ModelManager.getFoodList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        SalesHistory saleSet \u003d ModelManager.getSalesHistory();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double toGenerateProfit \u003d 0;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double toGenerateRevenue \u003d 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        String tempFoodName;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Iterator\u003cSale\u003e it \u003d saleSet.iterator();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        switch (param) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            case ALL:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //generating the profits and revenue for all food in the given period from date_i to date_f,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //simply iterating though the sales history will do."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                while (it.hasNext()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    Sale tempSale \u003d it.next();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    Date tempDate \u003d tempSale.getDate();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    if (tempDate.compareTo(dateI) \u003e\u003d 0 \u0026\u0026 tempDate.compareTo(dateF) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        double tempRevenue \u003d tempSale.getRevenue();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        double tempProfit \u003d tempSale.getProfit();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        toGenerateRevenue +\u003d tempRevenue;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        toGenerateProfit +\u003d tempProfit;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS_ALL, toGenerateProfit,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        toGenerateRevenue, list.size()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            case INDEX:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //generating the profits and revenue for the food with given index in the list, in the given period"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //from date_i to date_f, slightly more involved."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //get the food name based on indexing from the food list, then iterate through sales history to find"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //matching description."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                CommandUtil.requireValidIndex(list, profitIndex);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                Food foodToGenerate \u003d list.get(profitIndex);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                tempFoodName \u003d foodToGenerate.getName(); //possible to do this because we disallow duplicate food names"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                while (it.hasNext()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    Sale tempSale \u003d it.next();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    Date tempDate \u003d tempSale.getDate();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    String tempName \u003d tempSale.getName();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    if (tempDate.compareTo(dateI) \u003e\u003d 0 \u0026\u0026 tempDate.compareTo(dateF) \u003c\u003d 0"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                            \u0026\u0026 tempFoodName.equals(tempName)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        double tempRevenue \u003d tempSale.getRevenue();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        double tempProfit \u003d tempSale.getProfit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        toGenerateRevenue +\u003d tempRevenue;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        toGenerateProfit +\u003d tempProfit;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS_SINGLE, toGenerateProfit,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        toGenerateRevenue, list.size()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            case NAME:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //generating the profits and revenue for the food with given food name, in the given period"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //from date_i to date_f, rather straightforward."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //since we disallow duplicate food names in this project, iterate through sales history will do."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                CommandUtil.requireValidName(list, profitDescription);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                tempFoodName \u003d profitDescription; //for consistency"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                while (it.hasNext()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    Sale tempSale \u003d it.next();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    Date tempDate \u003d tempSale.getDate();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    String tempName \u003d tempSale.getName();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    if (tempDate.compareTo(dateI) \u003e\u003d 0 \u0026\u0026 tempDate.compareTo(dateF) \u003c\u003d 0"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                            \u0026\u0026 tempFoodName.equals(tempName)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        double tempRevenue \u003d tempSale.getRevenue();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        double tempProfit \u003d tempSale.getProfit();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        toGenerateRevenue +\u003d tempRevenue;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        toGenerateProfit +\u003d tempProfit;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS_SINGLE, toGenerateProfit,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        toGenerateRevenue, list.size()));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            case TYPE:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //generating the profits and revenue for the food with given food type, in the given period"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //from date_i to date_f, most involved in all cases here."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //get all the food names of the food of the associated food type from the food list,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //then iterate through sales history to find possible matching descriptions."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //store all the food names of the food with the food type the user is looking for into an arraylist."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                CommandUtil.requireValidType(list, profitDescription);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                ArrayList\u003cString\u003e tempFoodNames \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                int count \u003d 0;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                int listSize \u003d list.size();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                for (int i \u003d 0; i \u003c listSize; ++i) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    if ((list.get(i).getType() !\u003d null) \u0026\u0026 (list.get(i).getType().equals(profitDescription))) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        tempFoodNames.add(list.get(i).getName());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        ++count;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //iterate through the sales history to look for matching food names, identification"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                //with only food names is possible since we disallow duplicate food names in this project."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                while (it.hasNext()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    Sale tempSale \u003d it.next();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    Date tempDate \u003d tempSale.getDate();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    String tempName \u003d tempSale.getName();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    if (tempDate.compareTo(dateI) \u003e\u003d 0 \u0026\u0026 tempDate.compareTo(dateF) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        for (int i \u003d 0; i \u003c count; ++i) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                            if (tempName.equals(tempFoodNames.get(i))) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                                double tempRevenue \u003d tempSale.getRevenue();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                                double tempProfit \u003d tempSale.getProfit();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                                toGenerateRevenue +\u003d tempRevenue;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                                toGenerateProfit +\u003d tempProfit;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS_MULTIPLE, toGenerateProfit,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        toGenerateRevenue, count, listSize));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LL-Pengfei": 267
    }
  },
  {
    "path": "src/main/java/cube/logic/command/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " * The command adds a new reminder to the reminder list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " * @@author parvathi14"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    int daysToExpiry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    int stockIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Constructor for setting a new reminder."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param daysToExpiry Number of days to expiry date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param stockIndex Value for low stock."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public ReminderCommand(int daysToExpiry, int stockIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.daysToExpiry \u003d daysToExpiry;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.stockIndex \u003d stockIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public static String MESSAGE_SUCCESS \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Creates the list of reminders based on items nearing its expiry date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param list The list of expiry date reminders."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    private void buildExpiryReminder(FoodList list) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        MESSAGE_SUCCESS +\u003d \"Here are the upcoming expiry dates:\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            Food food \u003d list.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            MESSAGE_SUCCESS +\u003d String.format(\"%1$s due in %2$s\\n\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                    food.getName(), ParserUtil.parseDateToString(food.getExpiryDate()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        MESSAGE_SUCCESS +\u003d \"\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Creates the list of reminders based on items that are low in stock."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param list The list of low stock reminders."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    private void buildStockReminder(FoodList list) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        MESSAGE_SUCCESS +\u003d \"Here are the food products that are low in stock:\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            Food food \u003d list.get(i);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            MESSAGE_SUCCESS +\u003d String.format(\"%1$s : %2$s left\\n\", food.getName(), food.getStock());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Shows the list of food products that are low on stock (Default: less than quantity of 5)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * or approaching/nearing its expiry date (Default: by a week or lesser)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param model storage model."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param storage storage of Cube."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return Message feedback to user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @throws CommandException when the command requirements are not met."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public CommandResult execute(ModelManager model, StorageManager storage) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        FoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        FoodList stockReminder \u003d new FoodList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        FoodList expiryReminder \u003d new FoodList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        cal.setTime(new Date()); // get current time"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        cal.add(Calendar.DATE, daysToExpiry); // deadline within 7 days"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            Food food \u003d list.get(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            Date expiryDate \u003d food.getExpiryDate();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            int stock \u003d food.getStock();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            if (expiryDate !\u003d null \u0026\u0026 expiryDate.before(cal.getTime()) \u0026\u0026 expiryDate.after(new Date())) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                expiryReminder.add(food);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            if (stock !\u003d 0 \u0026\u0026 stock \u003c stockIndex) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                stockReminder.add(food);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        buildExpiryReminder(expiryReminder);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        buildStockReminder(stockReminder);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 101
    }
  },
  {
    "path": "src/main/java/cube/logic/command/SoldCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * SoldCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * This class manages the selling of food."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.Promotion;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.PromotionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.sale.Sale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.sale.SalesHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.storage.ProfitStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class SoldCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tString foodName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tint quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tDate soldDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tFood toSold;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\tPromotion promotion;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic static final String MESSAGE_SUCCESS \u003d \"%1$d of %2$s have been sold with $%3$f\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t+ \"you have earn $%4$f\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Constructor with two arguments."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Calls another constructor with additional argument Date \u003d current time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param foodName The name of the food to be sold."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param quantity The quantity of food sold."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic SoldCommand(String foodName, int quantity) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis(foodName, quantity, new Date());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Constructor with three arguments."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param foodName The name of the food to be sold."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param quantity The quantity of food sold."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param soldDate The date of the food sold."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic SoldCommand(String foodName, int quantity, Date soldDate) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis.foodName \u003d foodName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis.quantity \u003d quantity;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis.soldDate \u003d soldDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Acquires the food to sold for this command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param list The food list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @throws CommandException when the command requirements are not met."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic void obtainFoodSold(FoodList list) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tCommandUtil.requireValidName(list, foodName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\ttoSold \u003d list.get(foodName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * If parameters are valid, this method will generate a sale record and adjust the quantity"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * of food toSold. Finally, changes sale record and food will be saved in storage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param storage The storage we have."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The Feedback to User for Delete Command."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @throws CommandException If deletion is unsuccessful."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic CommandResult execute(ModelManager model, StorageManager storage) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\tFoodList list \u003d ModelManager.getFoodList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tfinal PromotionList promotionList \u003d model.getPromotionList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tfinal SalesHistory salesHistory \u003d model.getSalesHistory();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tobtainFoodSold(list);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tCommandUtil.requireValidQuantity(toSold, quantity);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\tdouble price;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\tCalendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\tcal.setTime(new Date());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\tif (promotionList.existsName(foodName)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\tpromotion \u003d promotionList.get(foodName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\tDate currentDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\tcal.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\tDate modifiedDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\t//cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (currentDate.before(promotion.getEndDate())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\t\u0026\u0026 modifiedDate.after(promotion.getStartDate())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\t\tprice \u003d promotion.getPromotionalPrice();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\t\tprice \u003d toSold.getPrice();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\tprice \u003d toSold.getPrice();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tint originalQty \u003d toSold.getStock();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\tdouble revenue \u003d quantity * price;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\ttoSold.setStock(originalQty - quantity);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tdouble profit \u003d revenue - quantity * toSold.getCost();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t//food revenue update, in the food model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\tdouble tempFoodRevenue \u003d toSold.getFoodRevenue();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\ttempFoodRevenue +\u003d revenue;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\ttoSold.setFoodRevenue(tempFoodRevenue);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\t//profit and revenue in sales record update"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\tdouble tempRevenue \u003d ProfitStorage.getAnnualRevenue();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\ttempRevenue +\u003d revenue;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\tProfitStorage.setAnnualRevenue(tempRevenue);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\tdouble tempProfit \u003d ProfitStorage.getAnnualProfit();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\ttempProfit +\u003d profit;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\tProfitStorage.setAnnualProfit(tempProfit);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tSale saleRecord \u003d new Sale(foodName, quantity, revenue, profit, soldDate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tsalesHistory.add(saleRecord);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tstorage.storeSalesHistory(salesHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn new CommandResult(String.format(MESSAGE_SUCCESS, quantity, foodName, revenue, profit));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 25,
      "tygq13": 81,
      "ZKathrynx": 7,
      "LL-Pengfei": 17
    }
  },
  {
    "path": "src/main/java/cube/logic/command/UpdateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.util.CommandUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private Food newFood;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private int[] changeBit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Food updated: \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        + \"You have updated:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        + \"%1$s\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        + \"to: \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        + \"%2$s.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param food the food to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public UpdateCommand(Food food, int[] changeBit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.newFood \u003d food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.changeBit \u003d changeBit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Adds food to foodList and store it if the food does not already exists, otherwise throws"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Command exception."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param storage The current Storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return The message feedback to user before Programme Exit."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public CommandResult execute(ModelManager model, StorageManager storage) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandUtil.requireValidName(list, newFood.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final String oldInfo \u003d list.get(newFood.getName()).toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (changeBit[0] \u003d\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            //type"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            list.get(newFood.getName()).setType(newFood.getType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (changeBit[1] \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            //price"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            list.get(newFood.getName()).setPrice(newFood.getPrice());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (changeBit[2] \u003d\u003d 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            //cost"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            list.get(newFood.getName()).setCost(newFood.getCost());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (changeBit[3] \u003d\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            //stock"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            list.get(newFood.getName()).setStock(newFood.getStock());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (changeBit[4] \u003d\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            //expiry date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            list.get(newFood.getName()).setExpiryDate(newFood.getExpiryDate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, oldInfo, newFood));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 6,
      "ZKathrynx": 59
    }
  },
  {
    "path": "src/main/java/cube/logic/command/exception/CommandErrorMessage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * The collection of all error message used in Command Exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class CommandErrorMessage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static final String FOOD_ALREADY_EXISTS"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        \u003d \"OOPS!!! The food already exists\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static final String FOOD_NOT_EXISTS"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        \u003d \"OOPS!!! The food does not exists\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static final String INVALID_QUANTITY_SOLD"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        \u003d \"OOPS!!! The quantity sold is negative or too large\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static final String INVALID_INDEX"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        \u003d \"OOPS!!! The index is out of the range of food list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static final String INVALID_TYPE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        \u003d \"OOPS!!! The food type does not exist\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static final String INVALID_EXPIRY_DATE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        \u003d \"OOPS!!! The food expiry date cannot be before today\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        \u003d \"OOPS!!! There are some issues with the command format.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            + \"Please view \u0027help\u0027 or our user guide for more info!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public static final String INVALID_PROMOTION_PERIOD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            \u003d \"OOPS!!! The end date cannot be before the start date.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public static final String INVALID_PROMOTION_DATES"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            \u003d \"OOPS!!! The dates cannot be before today.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public static final String PROMOTION_ALREADY_EXISTS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            \u003d \"OOPS!!! There is already a promotion for the same food in this period.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String FREE_ITEM"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            \u003d \"OOPS!!! The item you are going to promote is already free.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 3,
      "kuromono": 1,
      "tygq13": 16,
      "ZKathrynx": 10
    }
  },
  {
    "path": "src/main/java/cube/logic/command/exception/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Handles exception specific to command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class CommandException extends CubeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic CommandException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Constructor with one argument."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Constructs the exception with message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @param message the message to be printed when exception happens."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 21,
      "ZKathrynx": 4
    }
  },
  {
    "path": "src/main/java/cube/logic/command/util/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * The class represents the result of a command execution, it is used to show execution feedback for ui and gui."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command.util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    // used for Junit test for commands"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tygq13"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tygq13"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 61,
      "ZKathrynx": 1
    }
  },
  {
    "path": "src/main/java/cube/logic/command/util/CommandUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * This class of helper functions for command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command.util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.promotion.Promotion;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.PromotionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class CommandUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Checks that a given food name is not in the food list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param list The food list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param foodName The food name to check."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @throws CommandException If the given food name is inside the food list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static void requireNameNotExists(FoodList list, String foodName) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        if (list.existsName(foodName)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            throw new CommandException(CommandErrorMessage.FOOD_ALREADY_EXISTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Checks that a given food name is in the food list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @param list The food list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @param foodName The food name to check."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @throws CommandException If the given food name is not inside the food list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static void requireValidName(FoodList list, String foodName) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        if (!list.existsName(foodName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            throw new CommandException(CommandErrorMessage.FOOD_NOT_EXISTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Checks that a given food type is in the food list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @param list The food list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @param foodType The food type to check."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @throws CommandException If the given food type is not inside the food list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static void requireValidType(FoodList list, String foodType) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        if (!list.existsType(foodType)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            throw new CommandException(CommandErrorMessage.INVALID_TYPE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Checks that a given index is valid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @param list The food list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @param index The food index to check."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @throws CommandException If the given index is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static void requireValidIndex(FoodList list, int index) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            throw new CommandException(CommandErrorMessage.INVALID_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Checks the quantity is valid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @param food The food to check agaisnt."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @param quantity The quantity to check."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @throws CommandException if quantity is not valid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static void requireValidQuantity(Food food, int quantity) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tif (quantity \u003c 0 || quantity \u003e food.getStock()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \t\tthrow new CommandException(CommandErrorMessage.INVALID_QUANTITY_SOLD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \t}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Checks that the expiry date is not before today."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @param date The expiry date to check."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @throws CommandException if expiry date is before today."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static void requireValidExpiryDate(Date date) throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        cal.setTime(date);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        if (cal.before(Calendar.getInstance())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            throw new CommandException(CommandErrorMessage.INVALID_EXPIRY_DATE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    // @@author parvathi14"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Checks that a given index is valid in the promotion list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param list The promotion list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param index The promotion index to check."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @throws CommandException If the given index is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public static void requireValidIndexPromotion(PromotionList list, int index)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new CommandException(CommandErrorMessage.INVALID_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Checks that the promotion period is valid"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * i.e. the dates are not before the current date"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * and the end date is not before the start date."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param startDate The start date of the promotion period."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param endDate The end date of the promotion period."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @throws CommandException if promotion period is invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public static void requireValidPromotionDates(Date startDate, Date endDate)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (startDate \u003d\u003d null || endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (endDate.before(startDate)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new CommandException(CommandErrorMessage.INVALID_PROMOTION_PERIOD);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        cal.setTime(new Date());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        Date modifiedDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (endDate.before(modifiedDate) || startDate.before(modifiedDate)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new CommandException(CommandErrorMessage.INVALID_PROMOTION_DATES);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    //@@author ZKathrynx"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Checks that the same food does not have two different promotions at the same time."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param promotionList the list of existing promotions."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param newPromotion the new promotion to be added."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws CommandException if the same food has two different promotions at the same time."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static void requireNotOverlappingTime(PromotionList promotionList, Promotion newPromotion)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String foodName \u003d newPromotion.getName();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Date start \u003d newPromotion.getStartDate();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Date end \u003d newPromotion.getEndDate();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (!promotionList.existsName(foodName)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        for (int i \u003d 0; i \u003c promotionList.size(); i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (promotionList.get(i).getName().equals(foodName)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (!(end.before(promotionList.get(i).getStartDate())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        || start.after(promotionList.get(i).getEndDate()))) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    throw new CommandException(CommandErrorMessage.PROMOTION_ALREADY_EXISTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Checks whether the food item that is going to promote is already free."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param foodList the list of food."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param foodName the food item to promote."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws CommandException when the food item that is going to promote is already free."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static void requireNotFreeItem(FoodList foodList, String foodName) throws CommandException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (foodList.get(foodName).getPrice() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new CommandException(CommandErrorMessage.FREE_ITEM);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 47,
      "tygq13": 94,
      "ZKathrynx": 42
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "//@@author ZKathrynx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse add food command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class AddCommandParser implements ParserPrototype\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private Food tempFood \u003d new Food();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Parse user add command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param args user inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return add command with the food to be added"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public AddCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final int foodNameIndex \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int foodTypeIndex \u003d -1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int priceIndex \u003d -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int costIndex \u003d -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int stockIndex \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int expiryDateIndex \u003d -1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] params \u003d new String[] {\"-t\", \"-p\", \"-c\", \"-s\", \"-e\"};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (args.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (ParserUtil.hasInvalidParameters(args, params)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_PARAMETER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (ParserUtil.hasRepetitiveParameters(args)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.REPETITIVE_PARAMETER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        for (int i \u003d 1; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (args[i].equals(\"-t\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                foodTypeIndex \u003d i;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (args[i].equals(\"-p\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                priceIndex \u003d i;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (args[i].equals(\"-c\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tcostIndex \u003d i;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (args[i].equals(\"-s\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                stockIndex \u003d i;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (args[i].equals(\"-e\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                expiryDateIndex \u003d i;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String foodName \u003d ParserUtil.findFullString(args, foodNameIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (foodName.equals(\"\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        tempFood.setName(foodName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (foodTypeIndex !\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.hasField(args, foodTypeIndex + 1)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            tempFood.setType(ParserUtil.findFullString(args, foodTypeIndex + 1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (priceIndex !\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.hasField(args, priceIndex + 1)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.isValidNumber(args[priceIndex + 1])) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            tempFood.setPrice(Double.parseDouble(args[priceIndex + 1]));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (costIndex !\u003d -1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (!ParserUtil.hasField(args, costIndex + 1)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tthrow new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (!ParserUtil.isValidNumber(args[costIndex + 1])) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tthrow new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\ttempFood.setCost(Double.parseDouble(args[costIndex + 1]));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (stockIndex !\u003d -1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.hasField(args, stockIndex + 1)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.isValidInteger(args[stockIndex + 1])) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            tempFood.setStock(Integer.parseInt(args[stockIndex + 1]));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (expiryDateIndex !\u003d -1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.hasField(args, expiryDateIndex + 1)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            tempFood.setExpiryDate(ParserUtil.parseStringToDate(args[expiryDateIndex + 1]));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return new AddCommand(tempFood);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Getter for temp food."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return temp food."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public Food getTempFood() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return tempFood;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 116
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/AddPromotionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.AddPromotionCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.promotion.Promotion;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse add promotion command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class AddPromotionCommandParser implements ParserPrototype\u003cAddPromotionCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private Promotion tempPromotion \u003d new Promotion();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Parse user inputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param args user inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return add promotion command with promotion to be added."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public AddPromotionCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final int foodNameIndex \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int discountIndex \u003d -1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int startDateIndex \u003d -1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int endDateIndex \u003d -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] params \u003d new String[]{\"-s\",\"-e\",\"-%\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (args.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (ParserUtil.hasInvalidParameters(args,params)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_PARAMETER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (ParserUtil.hasRepetitiveParameters(args)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.REPETITIVE_PARAMETER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        for (int i \u003d 1; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (args[i].equals(\"-%\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                discountIndex \u003d i;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (args[i].equals(\"-s\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                startDateIndex \u003d i;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (args[i].equals(\"-e\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                endDateIndex \u003d i;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String foodName \u003d ParserUtil.findFullString(args,foodNameIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (foodName.equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (discountIndex \u003d\u003d -1 || endDateIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        tempPromotion.setFoodName(foodName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (!ParserUtil.hasField(args,discountIndex + 1)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (!ParserUtil.isValidNumber(args[discountIndex + 1])) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        tempPromotion.setDiscount(Double.parseDouble(args[discountIndex + 1]));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (startDateIndex !\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.hasField(args,startDateIndex + 1)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            tempPromotion.setStartDate(ParserUtil.parseStringToDate(args[startDateIndex + 1]));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            tempPromotion.setStartDate(new Date());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (!ParserUtil.hasField(args,endDateIndex + 1)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        tempPromotion.setEndDate(ParserUtil.parseStringToDate(args[endDateIndex + 1]));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return new AddPromotionCommand(tempPromotion);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Getter for temp promotion."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return temp promotion."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public Promotion getTempPromotion() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return tempPromotion;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 99
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/BatchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.BatchCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse batch command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class BatchCommandParser implements ParserPrototype\u003cBatchCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Parse user batch command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param args user inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return batch command with the corresponding operation type."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public BatchCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String[] params \u003d new String[] {\"-o\", \"-i\", \"-e\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (ParserUtil.hasInvalidParameters(args, params)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_PARAMETER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (ParserUtil.hasRepetitiveParameters(args)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.REPETITIVE_PARAMETER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (args.length \u003c 3) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            throw new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        switch (args[1]) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        case \"-o\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return new BatchCommand(args[2], BatchCommand.OperationType.EXPORT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        case \"-i\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return new BatchCommand(args[2], BatchCommand.OperationType.IMPORT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        case \"-e\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return new BatchCommand(args[2], BatchCommand.OperationType.EMPTY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 24,
      "ZKathrynx": 18
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/ConfigCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.ConfigCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.ConfigCommand.ConfigType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.LogConfig;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.UiConfig;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse config command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class ConfigCommandParser implements ParserPrototype\u003cConfigCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Parse user config command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param args user inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return config command with relevant parameters."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public ConfigCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] params \u003d new String[] {\"-h\", \"-w\", \"-s\", \"-c\", \"-l\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (ParserUtil.hasInvalidParameters(args, params)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_PARAMETER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (ParserUtil.hasRepetitiveParameters(args)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.REPETITIVE_PARAMETER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (args.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return new ConfigCommand(ConfigType.VIEW);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        int configTypeIndex \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        // Sets default action to view all configurations."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ConfigType configType \u003d ConfigType.VIEW;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            configType \u003d ConfigType.valueOf(args[configTypeIndex].toUpperCase());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_PARAMETER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        switch (configType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        case UI:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            int heightIndex \u003d -1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            int widthIndex \u003d -1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            for (int i \u003d 1; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                if (args[i].equals(\"-h\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    heightIndex \u003d i;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                if (args[i].equals(\"-w\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    widthIndex \u003d i;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            UiConfig uiConfig \u003d new UiConfig();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            if (heightIndex !\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (!ParserUtil.hasField(args, heightIndex + 1)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                double windowHeight \u003d Double.parseDouble(args[heightIndex + 1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                double minHeight \u003d UiConfig.getMinWindowHeight();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                double maxHeight \u003d UiConfig.getMaxWindowHeight();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                if (windowHeight \u003c minHeight || windowHeight \u003e maxHeight) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    throw new ParserException(String.format("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                            ParserErrorMessage.INVALID_PARAM_RANGE, \"-h\", minHeight, maxHeight));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                uiConfig.setWindowHeight(windowHeight);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            if (widthIndex !\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (!ParserUtil.hasField(args, widthIndex + 1)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                double windowWidth \u003d Double.parseDouble(args[widthIndex + 1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                double minWidth \u003d UiConfig.getMinWindowWidth();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                double maxWidth \u003d UiConfig.getMaxWindowWidth();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                if (windowWidth \u003c minWidth || windowWidth \u003e maxWidth) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    throw new ParserException(String.format("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                            ParserErrorMessage.INVALID_PARAM_RANGE, \"-w\", minWidth, maxWidth));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                uiConfig.setWindowWidth(windowWidth);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return new ConfigCommand(configType, uiConfig);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        case LOG:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            int maxFileCountIndex \u003d -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            int maxFileSizeIndex \u003d -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            int currentLogLevelIndex \u003d -1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            for (int i \u003d 1; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                if (args[i].equals(\"-c\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    maxFileCountIndex \u003d i;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                if (args[i].equals(\"-s\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    maxFileSizeIndex \u003d i;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                if (args[i].equals(\"-l\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    currentLogLevelIndex \u003d i;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            LogConfig logConfig \u003d new LogConfig();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            if (maxFileCountIndex !\u003d -1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (!ParserUtil.hasField(args, maxFileCountIndex + 1)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (!ParserUtil.isValidInteger(args[maxFileCountIndex + 1])) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                logConfig.setMaxFileCount(Integer.parseInt(args[maxFileCountIndex + 1]));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            if (maxFileSizeIndex !\u003d -1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (!ParserUtil.hasField(args, maxFileSizeIndex + 1)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (!ParserUtil.isValidInteger(args[maxFileSizeIndex + 1])) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                logConfig.setMaxFileSizeMB(Integer.parseInt(args[maxFileSizeIndex + 1]));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            if (currentLogLevelIndex !\u003d -1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (!ParserUtil.hasField(args, currentLogLevelIndex + 1)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                logConfig.setCurrentLogLevel(args[currentLogLevelIndex + 1]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return new ConfigCommand(configType, logConfig);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        case VIEW:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return new ConfigCommand(configType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 93,
      "ZKathrynx": 45
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "//@@author ZKathrynx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse delete command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class DeleteCommandParser implements ParserPrototype\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Parse user delete command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param args user inputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return delete command with relative parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic DeleteCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tString[] params \u003d new String[]{\"-i\",\"-n\",\"-t\",\"-all\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (ParserUtil.hasInvalidParameters(args,params)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.INVALID_PARAMETER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (ParserUtil.hasRepetitiveParameters(args)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.REPETITIVE_PARAMETER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tboolean isOnlyCommand \u003d (args.length \u003d\u003d 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tboolean isNotAll \u003d (args.length \u003d\u003d 2 \u0026\u0026 !args[1].equals(\"-all\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (isOnlyCommand || isNotAll) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tswitch (args[1]) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"-i\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tif (!ParserUtil.isValidInteger(args[2])) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\tthrow new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new DeleteCommand(Integer.parseInt(args[2]),\"INDEX\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"-n\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new DeleteCommand(String.join(\" \","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\t\tArrays.copyOfRange(args,2,args.length)),\"NAME\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"-t\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new DeleteCommand(String.join(\" \","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\t\tArrays.copyOfRange(args,2,args.length)),\"TYPE\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"-all\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new DeleteCommand(String.join(\" \","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\t\tArrays.copyOfRange(args,2,args.length)),\"ALL\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tdefault:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tthrow new ParserException(ParserErrorMessage.INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 57
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/DeletePromotionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.DeletePromotionCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse delete promotion command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "public class DeletePromotionCommandParser implements ParserPrototype\u003cDeletePromotionCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Parse user delete promotion command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param args user inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return delete promotion command with relative parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public DeletePromotionCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] params \u003d new String[]{\"-all\",\"-delete\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (ParserUtil.hasInvalidParameters(args, params)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_PARAMETER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (ParserUtil.hasRepetitiveParameters(args)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new ParserException(ParserErrorMessage.REPETITIVE_PARAMETER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (args.length \u003d\u003d 2 \u0026\u0026 !args[1].equals(\"-all\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (args[2].equals(\"-all\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            return new DeletePromotionCommand(String.join(\" \", Arrays.copyOfRange(args,2,args.length)),\"ALL\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (!ParserUtil.isValidInteger(args[2])) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new ParserException((ParserErrorMessage.INVALID_NUMBER));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return new DeletePromotionCommand(Integer.parseInt(args[2]), \"INDEX\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 27,
      "ZKathrynx": 16
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "//@@author ZKathrynx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse find command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class FindCommandParser implements ParserPrototype\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Parse user find command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param args user inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return find command with relative parameters."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public FindCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] params \u003d new String[]{\"-i\",\"-n\",\"-t\",\"-sort\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (ParserUtil.hasInvalidParameters(args,params)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_PARAMETER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (ParserUtil.hasRepetitiveParameters(args)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.REPETITIVE_PARAMETER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (args.length \u003c 3) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        switch (args[1]) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            case \"-i\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (!ParserUtil.isValidInteger(args[2])) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                return new FindCommand(Integer.parseInt(args[2]),\"INDEX\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            case \"-n\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String name  \u003d new ParserUtil().findFullString(args,2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                int sortIndex \u003d -1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                for (int i \u003d 1; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    if (args[i].equals(\"-sort\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        sortIndex \u003d i;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (sortIndex !\u003d -1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    if (!ParserUtil.hasField(args,sortIndex + 1)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    if (FoodList.SortType.isDefined(args[sortIndex + 1])) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        return new FindCommand(name,\"NAME\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                                FoodList.SortType.valueOf(args[sortIndex + 1].toUpperCase()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        throw new ParserException(ParserErrorMessage.INVALID_SORT_TYPE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                return new FindCommand(name,\"NAME\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            case \"-t\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String type  \u003d new ParserUtil().findFullString(args,2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                sortIndex \u003d -1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                for (int i \u003d 1; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    if (args[i].equals(\"-sort\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        sortIndex \u003d i;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                if (sortIndex !\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    if (!ParserUtil.hasField(args,sortIndex + 1)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    if (FoodList.SortType.isDefined(args[sortIndex + 1])) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        return new FindCommand(type,\"TYPE\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                                FoodList.SortType.valueOf(args[sortIndex + 1].toUpperCase()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        throw new ParserException(ParserErrorMessage.INVALID_SORT_TYPE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                return new FindCommand(type,\"TYPE\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 85
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "//@@author ZKathrynx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.FoodList.SortType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse list command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class ListCommandParser implements ParserPrototype\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Parse user list command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param args user inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return list command with relative parameters."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic ListCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tString[] params \u003d new String[]{\"-sort\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (ParserUtil.hasInvalidParameters(args,params)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.INVALID_PARAMETER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (ParserUtil.hasRepetitiveParameters(args)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.REPETITIVE_PARAMETER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (args.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\treturn new ListCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (args.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (SortType.isDefined(args[2].toUpperCase())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\treturn new ListCommand(SortType.valueOf(args[2].toUpperCase()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.INVALID_SORT_TYPE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 45
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/ListPromotionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.ListPromotionCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse list promotion command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class ListPromotionCommandParser implements ParserPrototype\u003cListPromotionCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Parse user list promotion command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param args user inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return list promotion command with relative parameters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public ListPromotionCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return new ListPromotionCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 20
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "//@@author ZKathrynx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "// design pattern copied from address book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "// reference: https://github.com/nusCS2113-AY1920S1/addressbook-level3/tree/master/src/main/java/seedu/address/logic/parser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse user command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Parse user command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Format:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * add foodName -t foodType -p price -s stock -e expiryDate"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * update foodName -t foodType -p price -s stock -e expiryDate"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * batch -i / -o"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * config"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * list -sort expiry/name/stock"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * find -i index / -n foodName / -t foodType --sort expiry/name/stock"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * profit -t1 time1 -t2 time2 -i index / -n foodName / -t foodType / -all All"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * delete -i index / -n foodName / -t foodType"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * sold -n foodName -q quantity"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * reminder -d daysToExpiry -s stock"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * promotion -n foodName -% discount -s startDate -e endDate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * promotion -list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * promotion -delete index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * help"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * bye / exit / quit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param fullCommand the command that user inputs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return corresponding command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic static Command parse(String fullCommand) throws ParserException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tString[] inputs \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tString command \u003d inputs[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tcommand \u003d command.trim().toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tswitch (command) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t//Alphabetical order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"add\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new AddCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"batch\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new BatchCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"config\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new ConfigCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"delete\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new DeleteCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"find\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new FindCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"help\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new HelpCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"list\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new ListCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"profit\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new ProfitCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"promotion\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new PromotionCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"reminder\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new ReminderCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"sold\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new SoldCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"update\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new UpdateCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"bye\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"exit\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tcase \"quit\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tdefault:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tthrow new ParserException(ParserErrorMessage.INVALID_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 80
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/ParserPrototype.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public interface ParserPrototype\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws ParserException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    T parse(String[] userInput) throws ParserException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 13,
      "ZKathrynx": 4
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.TimeZone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * The collection of all check methods used in parser."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\tprivate static final SimpleDateFormat DATE_FORMAT \u003d new SimpleDateFormat(\"dd/MM/yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\tprivate static final TimeZone TIME_ZONE \u003d TimeZone.getTimeZone(\"GMT+8:00\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Returns the string of date by parsing a date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param date the date to be parsed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return the string of date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic static String parseDateToString(Date date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tif (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\treturn \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\tDATE_FORMAT.setTimeZone(TIME_ZONE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\treturn DATE_FORMAT.format(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Returns a Date object by parsing the date String."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Time zone is set as Singapore time by default."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param dateString the String describing the date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return the date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @throws ParserException exception occurs when unable to parse."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic static Date parseStringToDate(String dateString) throws ParserException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (dateString \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\treturn null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\tSimpleDateFormat formatter \u003d DATE_FORMAT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tformatter.setLenient(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\tformatter.setTimeZone(TIME_ZONE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tDate date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\tdate \u003d formatter.parse(dateString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t} catch (ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t//@@author ZKathrynx"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Find the full name/type until next parameter/end of input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param inputs tokens containing the full string to be found."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param index starting index."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return the full name/type until next parameter/end of input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic static String findFullString(String[] inputs, int index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tString fullString \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tfor (int i \u003d index; i \u003c inputs.length; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (inputs[i].matches(\"-(.*)\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tbreak;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (i !\u003d index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tfullString +\u003d \" \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tfullString +\u003d inputs[i];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn fullString.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Checks that the inputs only contains given parameters."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param inputs tokens containing the parameters to be checked."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param params set of possible parameters."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return true if the input has parameter that is not within possible parameter set."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t *         false otherwise."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic static boolean hasInvalidParameters(String[] inputs, String[] params) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tboolean flag \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c inputs.length; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (inputs[i].matches(\"-(.*)\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tflag \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tfor (int j \u003d 0; j \u003c params.length; j++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\tif (inputs[i].equals(params[j])) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\t\tflag \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\t\tbreak;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\t}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tif (!flag) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\treturn true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Checks whether the inputs have repetitive parameters."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param inputs tokens containing the full string to be found."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return true if the input has parameter that is not within possible parameter set."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t *         false otherwise."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic static boolean hasRepetitiveParameters(String[] inputs) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tHashSet\u003cString\u003e table \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c inputs.length; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (inputs[i].matches(\"-(.*)\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tif (table.contains(inputs[i])) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\treturn true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\ttable.add(inputs[i]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Find out whether the field value is empty."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param inputs tokens containing the full string to be found."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param index the index after which there should be a field value."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return true if the field value after index is not empty,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t *         false otherwise."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic static boolean hasField(String[] inputs, int index) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (index \u003e\u003d inputs.length || inputs[index].matches(\"-(.*)\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\treturn false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Checks whether the number is a valid numeric."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param input the number to be checked."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return true if the input is a valid number."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t *         false otherwise."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic static boolean isValidNumber(String input) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tdouble number;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tnumber \u003d Double.parseDouble(input);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (number \u003c 0 || number \u003e\u003d 10000) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\treturn true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t} catch (Exception e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\treturn false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Checks whether the number is a valid integer."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param input the number to be checked."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return true if the input is a valid integer."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *         false otherwise."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static boolean isValidInteger(String input) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int number;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            number \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (number \u003c 0 || number \u003e\u003d 10000) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Retrieve the DATE FORMAT that is used in Cube."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return Date Formatter specified for Cube."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic static SimpleDateFormat getDateFormat() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn DATE_FORMAT;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Retrieve the TIME ZONE that is used in Cube."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return TimeZone specified for Cube."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic static TimeZone getTimeZone() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn TIME_ZONE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 7,
      "tygq13": 21,
      "ZKathrynx": 167
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/ProfitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "//@@author LL-Pengfei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * ProfitCommandParser.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * Parse the command for ProfitCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.command.ProfitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * This class parses the command for ProfitCommand, i.e. the command to generate profits and revenue."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "public class ProfitCommandParser implements ParserPrototype\u003cProfitCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Parses the command for ProfitCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param args The tokenized arguments."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return Call the ProfitCommand constructor with arguments corresponding to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *         the command type of generating profits and revenue."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @throws ParserException if Parsing is unsuccessful."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public ProfitCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        String[] params \u003d new String[]{\"-i\",\"-t\",\"-n\",\"-all\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        if (args.length \u003c 6) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            //generating profits and revenue requires at least 6 arguments, which is the case of generating for all"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            //food within the given time period"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            throw new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        if (!args[5].equals(\"-all\") \u0026\u0026 args.length \u003c 7) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            //if generating profits and revenue is not for all food within the period, but only for a specific type"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            //of food, then it requires at least 7 arguments in total."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            throw new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Date dateI \u003d ParserUtil.parseStringToDate(args[2]); //the start date of the period (initial)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Date dateF \u003d ParserUtil.parseStringToDate(args[4]); //the end date of the period (final)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        switch (args[5]) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            case \"-all\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                return new ProfitCommand(dateI, dateF, \"ALL\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            case \"-i\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                return new ProfitCommand(dateI, dateF, Integer.parseInt(args[6]),\"INDEX\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            case \"-n\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                return new ProfitCommand(dateI, dateF, String.join(\" \","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        Arrays.copyOfRange(args,6,args.length)),\"NAME\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            case \"-t\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                return new ProfitCommand(dateI, dateF, String.join(\" \","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                        Arrays.copyOfRange(args,6,args.length)),\"TYPE\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                throw new ParserException(ParserErrorMessage.INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LL-Pengfei": 57
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/PromotionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "//@@author ZKathrynx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse promotion command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class PromotionCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Parse user promotion command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param args user inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return corresponding promotion command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static Command parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (args.length \u003c 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (args[1].equals(\"-list\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            return new ListPromotionCommandParser().parse(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (args[1].equals(\"-delete\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            return new DeletePromotionCommandParser().parse(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return new AddPromotionCommandParser().parse(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 32
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/ReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "// @@author parvathi14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.ReminderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " * Parse reminder command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "public class ReminderCommandParser implements ParserPrototype\u003cReminderCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Parse user reminder command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param args user inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return reminder command with relative parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public ReminderCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        String[] params \u003d new String[]{\"-s\",\"-d\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (args.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (ParserUtil.hasInvalidParameters(args,params)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_PARAMETER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (ParserUtil.hasRepetitiveParameters(args)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new ParserException(ParserErrorMessage.REPETITIVE_PARAMETER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        int daysToExpiryIndex \u003d -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        int stockIndex \u003d -1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        for (int i \u003d 1; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            if (args[i].equals(\"-d\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                daysToExpiryIndex \u003d i;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            if (args[i].equals(\"-s\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                stockIndex \u003d i;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (daysToExpiryIndex \u003d\u003d -1 \u0026\u0026 stockIndex !\u003d -1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            if (!ParserUtil.hasField(args,stockIndex + 1)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            if (!ParserUtil.isValidInteger(args[stockIndex + 1])) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            return new ReminderCommand(7, Integer.parseInt(args[stockIndex + 1]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        } else if (stockIndex \u003d\u003d -1 \u0026\u0026 daysToExpiryIndex !\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            if (!ParserUtil.hasField(args,daysToExpiryIndex + 1)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            if (!ParserUtil.isValidInteger(args[daysToExpiryIndex + 1])) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            return new ReminderCommand(Integer.parseInt(args[daysToExpiryIndex + 1]), 5);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        } else if (daysToExpiryIndex \u003d\u003d -1 \u0026\u0026 stockIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            return new ReminderCommand(7,5);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (!ParserUtil.hasField(args,stockIndex + 1)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (!ParserUtil.hasField(args,daysToExpiryIndex + 1)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (!ParserUtil.isValidInteger(args[stockIndex + 1])) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (!ParserUtil.isValidInteger(args[daysToExpiryIndex + 1])) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return new ReminderCommand(Integer.parseInt(args[daysToExpiryIndex + 1]),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                Integer.parseInt(args[stockIndex + 1]));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 80
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/SoldCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.SoldCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse sold command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class SoldCommandParser implements ParserPrototype\u003cSoldCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Parse user sold command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param args user inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return sold command with relative parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic SoldCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tfinal int foodNameIndex \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tint quantityIndex \u003d -1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\tint dateIndex \u003d -1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tString[] params \u003d new String[]{\"-q\",\"-t\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (args.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (ParserUtil.hasInvalidParameters(args,params)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.INVALID_PARAMETER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (ParserUtil.hasRepetitiveParameters(args)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.REPETITIVE_PARAMETER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tfor (int i \u003d 1; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (args[i].equals(\"-q\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tquantityIndex \u003d i;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\tif (args[i].equals(\"-t\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\t\tdateIndex \u003d i;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tString foodName \u003d ParserUtil.findFullString(args,foodNameIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (foodName.equals(\"\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.INVALID_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (quantityIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (!ParserUtil.hasField(args,quantityIndex + 1)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (!ParserUtil.isValidInteger(args[quantityIndex + 1])) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (dateIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\treturn new SoldCommand(foodName,Integer.parseInt(args[quantityIndex + 1]), new Date());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (!ParserUtil.hasField(args,dateIndex + 1)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tthrow new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn new SoldCommand(foodName,Integer.parseInt(args[quantityIndex + 1]),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tParserUtil.parseStringToDate(args[dateIndex + 1]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 7,
      "tygq13": 8,
      "ZKathrynx": 51
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/UpdateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "//@@author ZKathrynx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.UpdateCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Parse update command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class UpdateCommandParser implements ParserPrototype\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private Food tempFood \u003d new Food();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Parse user update command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param args user inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return update command with relative parameters."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @throws ParserException when user input is illegal."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public UpdateCommand parse(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int[] changeBit \u003d new int[] {0, 0, 0, 0, 0};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final int foodNameIndex \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int foodTypeIndex \u003d -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int priceIndex \u003d -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int costIndex \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int stockIndex \u003d -1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int expiryDateIndex \u003d -1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] params \u003d new String[] {\"-t\", \"-p\", \"-s\", \"-e\", \"-c\"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (args.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (ParserUtil.hasInvalidParameters(args, params)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_PARAMETER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (ParserUtil.hasRepetitiveParameters(args)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.REPETITIVE_PARAMETER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        for (int i \u003d 1; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (args[i].equals(\"-t\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                foodTypeIndex \u003d i;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                changeBit[0] \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (args[i].equals(\"-p\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                priceIndex \u003d i;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                changeBit[1] \u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (args[i].equals(\"-c\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                costIndex \u003d i;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                changeBit[2] \u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (args[i].equals(\"-s\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                stockIndex \u003d i;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                changeBit[3] \u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (args[i].equals(\"-e\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                expiryDateIndex \u003d i;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                changeBit[4] \u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String foodName \u003d ParserUtil.findFullString(args, foodNameIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (foodName.equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.INVALID_NAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (foodTypeIndex \u003d\u003d -1 \u0026\u0026 priceIndex \u003d\u003d -1 \u0026\u0026 costIndex \u003d\u003d -1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            \u0026\u0026 stockIndex \u003d\u003d -1 \u0026\u0026 expiryDateIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            throw new ParserException(ParserErrorMessage.NOT_ENOUGH_PARAMETER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        tempFood.setName(foodName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (foodTypeIndex !\u003d -1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.hasField(args, foodTypeIndex + 1)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            tempFood.setType(ParserUtil.findFullString(args, foodTypeIndex + 1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (priceIndex !\u003d -1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.hasField(args, priceIndex + 1)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.isValidNumber(args[priceIndex + 1])) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            tempFood.setPrice(Double.parseDouble(args[priceIndex + 1]));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (costIndex !\u003d -1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.hasField(args, costIndex + 1)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.isValidNumber(args[costIndex + 1])) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            tempFood.setCost(Double.parseDouble(args[costIndex + 1]));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (stockIndex !\u003d -1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.hasField(args, stockIndex + 1)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.isValidInteger(args[stockIndex + 1])) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.INVALID_NUMBER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            tempFood.setStock(Integer.parseInt(args[stockIndex + 1]));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        if (expiryDateIndex !\u003d -1) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (!ParserUtil.hasField(args, expiryDateIndex + 1)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                throw new ParserException(ParserErrorMessage.EMPTY_FIELD);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            tempFood.setExpiryDate(ParserUtil.parseStringToDate(args[expiryDateIndex + 1]));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return new UpdateCommand(tempFood, changeBit);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Getter for temp food."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return temp food."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public Food getTempFood() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return tempFood;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 124
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/exception/ParserErrorMessage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * The collection of all error message used in Parser Exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class ParserErrorMessage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String NOT_ENOUGH_PARAMETER"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        \u003d \"OOPS!!! The parameter you input is not enough\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String INVALID_DATE_FORMAT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        \u003d \"OOPS!!! The date format is invalid. Please specify date in \u0027dd/mm/yyyy\u0027\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String INVALID_COMMAND"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        \u003d \"OOPS!!! The command is invalid. Enter \u0027help\u0027 to view the list of command\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String INVALID_PARAMETER"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        \u003d \"OOPS!!! Your input contains invalid parameter.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String REPETITIVE_PARAMETER"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        \u003d \"OOPS!!! Your input contains repetitive parameter\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String EMPTY_FIELD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        \u003d \"OOPS!!! Your input after a parameter is empty.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String INVALID_NAME"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        \u003d \"OOPS!!! The name should only contains \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            + \"alphanumeric characters and spaces, and cannot be blank or start with \u0027-\u0027\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String INVALID_NUMBER"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        \u003d \"OOPS!!! The number inside input should only be non-negative numerical and less than 10000.00.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static final String INVALID_SORT_TYPE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        \u003d \"OOPS!!! The sort type can only be expiry/name/stock.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String INVALID_PARAM_RANGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003d \"OOPS!!! The input value range for %1$s parameter should be between %2$s and %3$s.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        \u003d \"OOPS!!! There are some issues with the command format.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            + \"Please view \u0027help\u0027 or our user guide for more info!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 3,
      "ZKathrynx": 28
    }
  },
  {
    "path": "src/main/java/cube/logic/parser/exception/ParserException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Handles exception specific to parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class ParserException extends CubeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public ParserException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Constructor with one argument."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Constructs the exception with message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param message the message to be printed when exception happens."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public ParserException(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 25
    }
  },
  {
    "path": "src/main/java/cube/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * The facade of all the model list, so that model can be accessed through a single api."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.PromotionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.sale.SalesHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class ModelManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\tprivate static FoodList foodList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\tprivate static SalesHistory salesHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\tprivate PromotionList promotionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Default constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Creates new instances of foodList, salesHistory and promotionList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic ModelManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\tfoodList \u003d new FoodList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\tsalesHistory \u003d new SalesHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\tthis.promotionList \u003d  new PromotionList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Constructor with food list only."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param foodList The food list to be managed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic ModelManager(FoodList foodList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tModelManager.foodList \u003d foodList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tsalesHistory \u003d new SalesHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tthis.promotionList \u003d  new PromotionList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Constructor with three arguments."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param foodList The food list to be managed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param salesHistory The sales history to be managed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param promotionList The promotion list to be managed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\tpublic ModelManager(FoodList foodList, SalesHistory salesHistory, PromotionList promotionList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\tModelManager.foodList \u003d foodList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t\tModelManager.salesHistory \u003d salesHistory;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "\t\tthis.promotionList \u003d promotionList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Gets the food list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The food list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\tpublic static FoodList getFoodList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn foodList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Sets the food list to be managed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param foodList The food list to be managed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\tpublic void setFoodList(FoodList foodList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\tthis.foodList \u003d foodList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Gets the sales history."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The sales history."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\tpublic static SalesHistory getSalesHistory() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn salesHistory;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Gets the promotion list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The promotion list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic PromotionList getPromotionList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn promotionList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 5,
      "kuromono": 4,
      "tygq13": 49,
      "ZKathrynx": 15,
      "LL-Pengfei": 8
    }
  },
  {
    "path": "src/main/java/cube/model/exception/ModelException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class ModelException extends CubeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public ModelException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Constructor with one argument."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Constructs the exception with message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param message the message to be printed when exception happens."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public ModelException(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 22
    }
  },
  {
    "path": "src/main/java/cube/model/exception/ModelExceptionMessage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class ModelExceptionMessage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 5
    }
  },
  {
    "path": "src/main/java/cube/model/food/Food.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * Food.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * Model the food object."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.model.food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * This class models the food objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    protected double price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    protected double cost;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    protected int stock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    protected Date expiryDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    protected double foodRevenue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * The default constructor. Call the other constructor (overloading) with (null) as argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public Food() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * The constructor with the name of the food object as the argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param name The name of the food object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public Food(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.type \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.price \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.cost \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.stock \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.foodRevenue \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Setter for name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param name name to set."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Getter for the name of the food."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return The name of the food."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Setter for the type of the food."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param type The type of the food to be set."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void setType(String type) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Getter for the type of the food."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return The type of the food."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Setter for the price of the food."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param price The price of the food to be set."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void setPrice(double price) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Getter for the price of the food."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return The price of the food."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Setter for the expiry date of the food."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param expiryDate The expiry date of the food to be set."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void setExpiryDate(Date expiryDate) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Getter for the expiry date of the food."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return The expiry date of the food."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public Date getExpiryDate() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Getter for the revenue of a food."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return The revenue of a food."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public double getFoodRevenue() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        return foodRevenue;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Setter for the revenue of a food."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param revenue The new revenue to be set."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public void setFoodRevenue(double revenue) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        this.foodRevenue \u003d revenue;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Setter for the quantity of the food available in stock."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param newStock The new quantity of the food available to be set."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void setStock(int newStock) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        stock \u003d newStock;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Getter for the quantity of the food available in stock."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return The quantity of food available in stock."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public int getStock() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return stock;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Setter for the cost of the food."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param cost The new cost of the food to be set."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void setCost(double cost) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Getter for the cost of the food."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return The cost of the food."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public double getCost() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Check if the food already exists in the inventory."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return true if exists, false if otherwise."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public boolean exists(String foodName) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (foodName \u003d\u003d this.name) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Cast the information related to the food to a String."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return the String containing the all information associated with the food."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String date \u003d \"Not Specified\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (expiryDate !\u003d null) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            date \u003d format.format(expiryDate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return name + \"\\n  Type: \" + type + \"\\n  Price: $\" + price + \"\\n  Cost: $\" + cost"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            + \"\\n  Stock: \" + stock + \"\\n  Expiry Date: \" + date;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    // for Junit test usage"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        if (other instanceof Food) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            Food b \u003d (Food) other;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            return name.equals(b.name)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                \u0026\u0026 ((type \u003d\u003d null \u0026\u0026 b.type \u003d\u003d null)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                || (type !\u003d null \u0026\u0026 type.equals(b.type)))"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                \u0026\u0026 price \u003d\u003d b.price \u0026\u0026 cost \u003d\u003d b.cost"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                \u0026\u0026 stock \u003d\u003d b.stock \u0026\u0026 expiryDate \u003d\u003d b.expiryDate;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 86,
      "kuromono": 14,
      "tygq13": 39,
      "ZKathrynx": 18,
      "LL-Pengfei": 62
    }
  },
  {
    "path": "src/main/java/cube/model/food/FoodList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.foodutil.SortByExpiry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.foodutil.SortByName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.foodutil.SortByPrice;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.foodutil.SortByStock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Model for food list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class FoodList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\tprivate ArrayList\u003cFood\u003e foodArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * The way to sort."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic enum SortType {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tEXPIRY, NAME, STOCK, PRICE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t * Checks whether the sort type is defined."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t * @param temp the input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t * @return true if is defined, false otherwise."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        public static boolean isDefined(String temp) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        \ttemp \u003d temp.toUpperCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (temp.equals(\"EXPIRY\") || temp.equals(\"NAME\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\t|| temp.equals(\"STOCK\") || temp.equals(\"PRICE\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Default constructor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic FoodList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\tthis.foodArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Constructor with a given list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param list the given list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic FoodList(ArrayList\u003cFood\u003e list) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\tthis.foodArrayList \u003d list;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Add food into the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param food the food to add."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic void add(Food food) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\tthis.foodArrayList.add(food);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Public getter to allow JSON read/write to work."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return the food list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\tpublic ArrayList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\treturn this.foodArrayList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Get food by index."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param index the index."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return the food at the index."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic Food get(int index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn foodArrayList.get(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Get food by name."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param foodName the name."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return the food with the name."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic Food get(String foodName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tfor (Food food : foodArrayList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (food.getName().toLowerCase().equals(foodName.toLowerCase())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t\treturn food;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Remove food by index."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param index the index to remove."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic void removeIndex(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tfoodArrayList.remove(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Remove food by name."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param foodName the name of the food."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic void removeName(String foodName) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c foodArrayList.size(); i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (foodArrayList.get(i).getName().toLowerCase().equals(foodName.toLowerCase())) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tfoodArrayList.remove(i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tbreak;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Remove food by type."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param foodType the type of the food."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return the number of items removed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic int removeType(String foodType) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tint count \u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c foodArrayList.size();) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (foodArrayList.get(i).getType() !\u003d null"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t\t\u0026\u0026 foodArrayList.get(i).getType().equals(foodType)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tfoodArrayList.remove(i);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tcount++;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\ti++;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn count;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Checks whether the name exists."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param foodName the name to check."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return true if exists, false otherwise."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic boolean existsName(String foodName) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tfor (Food food : foodArrayList) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (food.getName().toLowerCase().equals(foodName.toLowerCase())) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t\treturn true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Checks whether the type exists."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param foodType the type to check."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return true if exists, false otherwise."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic boolean existsType(String foodType) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tfor (Food food : foodArrayList) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tif (food.getType() !\u003d null \u0026\u0026 food.getType().toLowerCase().equals(foodType.toLowerCase())) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\treturn true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Get list size."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return the size of the list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic int size() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn foodArrayList.size();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Sort the list by sort type."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param sortType the way to sort."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic void sort(SortType sortType) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tswitch (sortType) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\tcase EXPIRY:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t\tCollections.sort(foodArrayList, new SortByExpiry());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t\tbreak;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\tcase NAME:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t\tCollections.sort(foodArrayList, new SortByName());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t\tbreak;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\tcase STOCK:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t\tCollections.sort(foodArrayList, new SortByStock());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tbreak;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\tcase PRICE:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t\tCollections.sort(foodArrayList, new SortByPrice());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tbreak;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\tdefault:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tbreak;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Clear the list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic void clear() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tfoodArrayList.clear();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tString result \u003d \"\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c foodArrayList.size(); i++) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\tresult +\u003d String.format(\"%1$d. %2$s.\\n\", i + 1, foodArrayList.get(i));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn result;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t// for Junit test use"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic boolean equals(Object other) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t    return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t            || (other instanceof FoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t                    \u0026\u0026 foodArrayList.equals(((FoodList) other).foodArrayList));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 9,
      "tygq13": 78,
      "ZKathrynx": 128
    }
  },
  {
    "path": "src/main/java/cube/model/food/foodutil/SortByExpiry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.model.food.foodutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * This is a helper class for sorting food by expiry date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class SortByExpiry implements Comparator\u003cFood\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Sort by food\u0027s expiry date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param a The first food to be compared."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param b The second food to be compared."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return -1 if smaller, 0 if equal, 1 if larger."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic int compare(Food a, Food b) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tDate first \u003d a.getExpiryDate();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tDate second \u003d b.getExpiryDate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\tif (first \u003d\u003d null \u0026\u0026 second \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\treturn 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\treturn first \u003d\u003d null ? 1 : (second \u003d\u003d null) ? -1 : first.compareTo(second);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 27
    }
  },
  {
    "path": "src/main/java/cube/model/food/foodutil/SortByName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.model.food.foodutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * This is a helper class for sorting food by name."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class SortByName implements Comparator\u003cFood\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Sort by food name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param a The first food to be compared."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param b The second food to be compared."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return -1 if smaller, 0 if equal, 1 if larger."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic int compare(Food a, Food b) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn a.getName().compareTo(b.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 20
    }
  },
  {
    "path": "src/main/java/cube/model/food/foodutil/SortByPrice.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.model.food.foodutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * This is a helper class for sorting food by price."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class SortByPrice implements Comparator\u003cFood\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * Sort by food price."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param a The first food to be compared."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param b The second food to be compared."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @return -1 if smaller, 0 if equal, 1 if larger."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\tpublic int compare(Food a, Food b) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn a.getPrice() \u003c b.getPrice() ? -1 : (a.getPrice() \u003e b.getPrice()) ? 1 : 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 20
    }
  },
  {
    "path": "src/main/java/cube/model/food/foodutil/SortByStock.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.model.food.foodutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * This is a helper class for sorting food by stock."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class SortByStock implements Comparator\u003cFood\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Sort by food stock."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param a The first food to be compared."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param b The second food to be compared."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return -1 if smaller, 0 if equal, 1 if larger."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public int compare(Food a, Food b) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return a.getStock() \u003c b.getStock() ? -1 : (a.getStock() \u003e b.getStock()) ? 1 : 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 20
    }
  },
  {
    "path": "src/main/java/cube/model/promotion/Promotion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "// @@author parvathi14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "package cube.model.promotion;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "public class Promotion {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    protected String foodName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    protected double discount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    protected double promotionalPrice;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    protected Date startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    protected Date endDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public Promotion() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Constructor with food name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param foodName food name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public Promotion(String foodName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Setter for food name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param foodName food name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void setFoodName(String foodName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Gets the name of the food product under promotion."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return the name of the food product."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Sets the discount on the product."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param discount The percentage of discount to be applied to the price of the product."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void setDiscount(double discount) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.discount \u003d discount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Gets the discount on the product."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return the discount on the product."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public double getDiscount() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return discount;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Sets the new promotional price of the product."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param promotionalPrice The new promotional price of the product."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void setPromotionalPrice(double promotionalPrice) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.promotionalPrice \u003d promotionalPrice;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Gets the promotional price of the product."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return the promotional price of the product."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public double getPromotionalPrice() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return promotionalPrice;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Sets the start date of the promotional period for the food item."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param startDate the start date of the promotional period."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void setStartDate(Date startDate) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Gets the start date of the promotional period for the food item."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return the start date of the promotional period for the food item."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Sets the end date of the promotional period for the food item."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param endDate the end date of the promotional period."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void setEndDate(Date endDate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Gets the end date of the promotional period for the food item."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return the end date of the promotional period for the food item."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Shows that the promotion already exists in the promotion list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public boolean exists(String foodName) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (foodName \u003d\u003d this.foodName) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Casts the promotion to String type."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return the String printout of the promotion."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        String start \u003d format.format(startDate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        String end \u003d format.format(endDate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return foodName + \"\\n  Discount: \" + discount"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                + \"\\n  Promotional Price: $\" + promotionalPrice"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                + \"\\n  Start Date: \" + start"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                + \"\\n  End Date: \" + end;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /*@Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    // for Junit test use"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        if (other instanceof Promotion) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            Promotion b \u003d (Promotion) other;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            return foodName.equals(b.foodName)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                    //\u0026\u0026 ((type \u003d\u003d null \u0026\u0026 b.type \u003d\u003d null) || (type !\u003d null \u0026\u0026 type.equals(b.type)))"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                    \u0026\u0026 promotionalPrice \u003d\u003d b.promotionalPrice"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                    \u0026\u0026 discount \u003d\u003d b.discount"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                    \u0026\u0026 startDate \u003d\u003d b.startDate"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                    \u0026\u0026 endDate \u003d\u003d b.endDate;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 180
    }
  },
  {
    "path": "src/main/java/cube/model/promotion/PromotionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "// @@author parvathi14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "package cube.model.promotion;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " * Model for promotion list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "parvathi14"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "public class PromotionList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    private ArrayList\u003cPromotion\u003e promotionArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public PromotionList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.promotionArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Constructor with a given list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param list the given list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public PromotionList(ArrayList\u003cPromotion\u003e list) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.promotionArrayList \u003d list;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Add new promotion."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param promotion the promotion to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void add(Promotion promotion) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        this.promotionArrayList.add(promotion);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Get promotion list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return the promotion list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public ArrayList\u003cPromotion\u003e getPromotionList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return this.promotionArrayList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Get a promotion by index."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param index the index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return promotion at this index."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public Promotion get(int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return promotionArrayList.get(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Get a promotion by food name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param foodName the food name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return promotion of this food name."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public Promotion get(String foodName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        for (Promotion promotion : promotionArrayList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            if (promotion.getName().equals(foodName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                return promotion;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Remove promotion by index."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param index the index."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void removeIndex(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        promotionArrayList.remove(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Checks whether there is a promotion of this food name."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @param foodName the food name."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return true if exists, false otherwise."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public boolean existsName(String foodName) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        for (Promotion promotion : promotionArrayList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            if (promotion.getName().equals(foodName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Get the size of the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * @return the size of the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return promotionArrayList.size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     * Clear the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        promotionArrayList.clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        for (int i \u003d 0; i \u003c promotionArrayList.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "            result +\u003d String.format(\"%1$d. %2$s.\\n\", i + 1, promotionArrayList.get(i));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    // for Junit test use"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                || (other instanceof PromotionList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                \u0026\u0026 promotionArrayList.equals(((FoodList) other).promotionArrayList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "   */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 122
    }
  },
  {
    "path": "src/main/java/cube/model/sale/Sale.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * A sale object represents a transaction."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Implements: Comparable."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.model.sale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnore;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class Sale implements Comparable\u003cSale\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@JsonProperty"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tprotected String foodName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@JsonProperty"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tprotected int quantitySold;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@JsonProperty"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tprotected double profit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@JsonProperty"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tprotected double revenue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@JsonProperty"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tprotected Date soldDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic Sale() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis(null, 0, 0, 0, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Constructor with four arguments."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param quantitySold The quantitySold sold in this sale."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param profit The profit earned in this sale."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param revenue The revenue earned in this sale."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param soldDate The date of sale."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic Sale(String foodName, int quantitySold, double revenue, double profit, Date soldDate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis.foodName \u003d foodName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis.quantitySold \u003d quantitySold;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis.revenue \u003d revenue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis.profit \u003d profit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis.soldDate \u003d soldDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Getter for name of food sold in sale record."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The food name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@JsonIgnore"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn foodName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t * Getter for quantity of food sold in sale record."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "\t * @return The food quantity."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@JsonIgnore"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic int getQuantity() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn quantitySold;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Getter for revenue of food sold in sale record."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The food revenue."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@JsonIgnore"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic double getRevenue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn revenue;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Getter for profit of food sold in sale record."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The food profit."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@JsonIgnore"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic double getProfit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn profit;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Getter for date of food sold in sale record."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The food date."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@JsonIgnore"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic Date getDate() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn soldDate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Converts the sale record to String."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The String format of sale record."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\treturn \"  Quantity Sold: \" + quantitySold"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t+ \"\\n  Revenue: $\" + revenue"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t+ \"\\n  Profit: \" + profit"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\t+ \"\\n  Transaction Date: \" + soldDate;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Compares with another sale record."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * This allows sale record to be sorted."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return -1 if smaller, 0 if equal, 1 if larger."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic int compareTo(Sale b) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t// expand the list of comparison to reduce chance of equal transaction"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tif (soldDate.compareTo(b.getDate()) !\u003d 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\treturn soldDate.compareTo(b.getDate());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t} else if (foodName.compareTo(b.getName()) !\u003d 0) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\treturn foodName.compareTo(b.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t// the order does not matter if time and name the same"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\treturn 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Compares with another object to check if they are identical."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param other The other object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return true if identical, otherwise false."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t// for Junit test use"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tif (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\treturn true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tif (other instanceof Sale) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\tSale b \u003d (Sale) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\treturn foodName.equals(b.foodName)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t\t\t\u0026\u0026 quantitySold \u003d\u003d b.quantitySold"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t\t\t\u0026\u0026 revenue \u003d\u003d b.revenue"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t\t\t\u0026\u0026 profit \u003d\u003d b.profit"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\t\t\t\u0026\u0026 soldDate \u003d\u003d b.soldDate;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\treturn false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 134,
      "ZKathrynx": 6,
      "LL-Pengfei": 2
    }
  },
  {
    "path": "src/main/java/cube/model/sale/SalesHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * The sales history."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * Uses ordered set as the data structure for kepping sales history."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.model.sale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class SalesHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t@JsonProperty"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tprivate TreeSet\u003cSale\u003e salesSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Default constructor for SalesHistory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Initialize a new sales history ordered set."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic SalesHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis.salesSet \u003d new TreeSet\u003cSale\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Constructor with one argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Utilize existing sales history set."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t * @param salesSet the sales history."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic SalesHistory(TreeSet\u003cSale\u003e salesSet) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tthis.salesSet \u003d salesSet;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Adds a sale record to sales history."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @param saleRecord The sale record to be added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic void add(Sale saleRecord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tsalesSet.add(saleRecord);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Gets the size of sales history set."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The size of sales history set."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic int size() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn salesSet.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Gets the iterator for sales history set."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The iterator for sales history set."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic Iterator iterator() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn salesSet.iterator();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * Converts the sales history to String."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t * @return The formatted string of sales history."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t// more for debug use for now"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tString result \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\tIterator i \u003d salesSet.iterator();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\twhile (i.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t\tresult +\u003d i.next() + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t\treturn result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 2,
      "tygq13": 70,
      "ZKathrynx": 2
    }
  },
  {
    "path": "src/main/java/cube/storage/ConfigStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * Object to store user configurable options."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.ReminderConfig;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.UiConfig;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.LogConfig;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class ConfigStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private UiConfig uiConfig;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private ReminderConfig reminderConfig;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private LogConfig logConfig;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a new instance of ConfigStorage class with default settings."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public ConfigStorage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.uiConfig \u003d new UiConfig();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.reminderConfig \u003d new ReminderConfig();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.logConfig \u003d new LogConfig();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Getter for UiConfig."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @return UiConfig object containing UI specific configurations."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public UiConfig getUiConfig() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return uiConfig;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Setter for UiConfig."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param uiConfig The UiConfig object that contains UI specific configurations."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setUiConfig(UiConfig uiConfig) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.uiConfig \u003d uiConfig;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Getter for ReminderConfig."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @return ReminderConfig object containing Reminder Command specific configurations."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public ReminderConfig getReminderConfig() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return reminderConfig;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Setter for ReminderConfig."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param reminderConfig The ReminderConfig object that contains Reminder Command specific configurations."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setReminderConfig(ReminderConfig reminderConfig) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.reminderConfig \u003d reminderConfig;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Getter for LogConfig."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @return LogConfig object containing logger configurations."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public LogConfig getLogConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return logConfig;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Setter for LogConfig."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param logConfig The LogConfig object that contains logger configurations to be set."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setLogConfig(LogConfig logConfig) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.logConfig \u003d logConfig;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 74,
      "ZKathrynx": 1
    }
  },
  {
    "path": "src/main/java/cube/storage/FoodStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * Support food-related methods for storage."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class FoodStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\tprivate FoodList foodList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t * Default constructor for FoodStorage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\tpublic FoodStorage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\tthis.foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t * Getter for FoodList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t * @return FoodList containing list of Food objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\tpublic FoodList getFoodList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\treturn foodList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t * Setter for FoodList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t * @param foodlist Object containing the list of Food objects."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\tpublic void storeFoodList(FoodList foodlist) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\t\tthis.foodList \u003d foodlist;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 30,
      "tygq13": 5,
      "ZKathrynx": 1
    }
  },
  {
    "path": "src/main/java/cube/storage/ProfitStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "//@@author LL-Pengfei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * ProfitStorage.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * Support profit and revenue generation-related methods for storage."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "package cube.storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * This class supports profit and revenue generation-related methods for storage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "public abstract class ProfitStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    private static double annualRevenue \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    private static double annualProfit \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Getter for Annual Revenue."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return The Annual Revenue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public static double getAnnualRevenue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        return annualRevenue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Setter for Annual Revenue."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param annualRevenue The Annual Revenue to be set."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public static void setAnnualRevenue(double annualRevenue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        ProfitStorage.annualRevenue \u003d annualRevenue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Getter for Annual Profit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return The Annual Profit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public static double getAnnualProfit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        return annualProfit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Setter for Annual Profit."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param annualProfit The Annual Profit to be set."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public static void setAnnualProfit(double annualProfit) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        ProfitStorage.annualProfit \u003d annualProfit;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LL-Pengfei": 51
    }
  },
  {
    "path": "src/main/java/cube/storage/PromotionStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.promotion.PromotionList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class PromotionStorage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private PromotionList promotionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Default constructor for PromotionStorage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public PromotionStorage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.promotionList \u003d new PromotionList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Getter for PromotionList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return Promotion object containing current promotions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public PromotionList getPromotionList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return promotionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Setter for PromotionList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param promotionList object containing promotions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void storePromotionList(PromotionList promotionList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.promotionList \u003d promotionList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 30
    }
  },
  {
    "path": "src/main/java/cube/storage/SaleStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "//@author tygq13"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.sale.SalesHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class SaleStorage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    private SalesHistory salesHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Default constructor for SalesStorage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public SaleStorage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        this.salesHistory \u003d new SalesHistory();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Gets the sales history in this storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @return the sales history."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public SalesHistory getSalesHistory() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        return salesHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Updates the SalesHistory in this storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * @param salesHistory The list of sales record."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void storeSalesHistory(SalesHistory salesHistory) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        this.salesHistory \u003d salesHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 6,
      "tygq13": 24,
      "ZKathrynx": 2
    }
  },
  {
    "path": "src/main/java/cube/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Handling of JSON File Read/Write operations in Cube."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.promotion.PromotionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.sale.SalesHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @JsonProperty"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    private FoodStorage foodStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @JsonProperty"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private ConfigStorage configStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @JsonProperty"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private SaleStorage saleStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @JsonProperty"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private PromotionStorage promotionStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a new instance of all Storage Classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public StorageManager() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.foodStorage \u003d new FoodStorage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.configStorage \u003d new ConfigStorage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.saleStorage \u003d new SaleStorage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.promotionStorage \u003d new PromotionStorage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Constructor with multiple arguments."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a new instance of all Storage Classes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public StorageManager(FoodStorage foodStorage, SaleStorage saleStorage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                          PromotionStorage promotionStorage, ConfigStorage configStorage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.foodStorage \u003d foodStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.saleStorage \u003d saleStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.promotionStorage \u003d promotionStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.configStorage \u003d configStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Retrieves the FoodList stored in the FoodStorage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @return FoodList object stored in the FoodStorage."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public FoodList getFoodList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return foodStorage.getFoodList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Stores the specified FoodList object into the FoodStorage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param foodlist FoodList object to be stored into the FoodStorage."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void storeFoodList(FoodList foodlist) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        foodStorage.storeFoodList(foodlist);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Retrieves the past sales histories stored in SaleStorage."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @return SalesHistory object containing past sale histories stored in SaleStroage."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public SalesHistory getSalesHistory() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return saleStorage.getSalesHistory();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Stores the SalesHistory object into SaleStorage."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param salesHistory SalesHistory object to be stored in the SaleStorage."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void storeSalesHistory(SalesHistory salesHistory) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        saleStorage.storeSalesHistory(salesHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Retrieves the past sales histories stored in SaleStorage."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @return SalesHistory object containing past sale histories stored in SaleStroage."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public PromotionList getPromotionList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        return promotionStorage.getPromotionList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Stores the SalesHistory object into SaleStorage."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param promotionList SalesHistory object to be stored in the SaleStorage."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void storePromotionList(PromotionList promotionList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        promotionStorage.storePromotionList(promotionList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Retrieves the configuration storage containing user-defined configurations."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @return ConfigStorage object containing the user-defined configurations."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public ConfigStorage getConfig() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return configStorage;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Sets the configuration storage containing user-defined configurations."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setConfig(ConfigStorage configStorage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.configStorage \u003d configStorage;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 86,
      "tygq13": 13,
      "ZKathrynx": 25
    }
  },
  {
    "path": "src/main/java/cube/storage/config/LogConfig.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * Config object containing configurations for logging."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.storage.config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class LogConfig {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private int maxFileCount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private int maxFileSizeBytes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private String currentLogLevel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a new instance of LogConfig class with default settings."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public LogConfig() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.maxFileCount \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.maxFileSizeBytes \u003d (int)(Math.pow(2, 20) * 10); // 10MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.currentLogLevel \u003d \"INFO\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public int getMaxFileCount() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return maxFileCount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setMaxFileCount(int maxFileCount) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.maxFileCount \u003d maxFileCount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public int getMaxFileSizeBytes() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return maxFileSizeBytes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setMaxFileSizeMB(int maxFileSizeMB) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.maxFileSizeBytes \u003d (int)(Math.pow(2, 20) * maxFileSizeMB);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public String getCurrentLogLevel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return currentLogLevel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setCurrentLogLevel(String currentLogLevel) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.currentLogLevel \u003d currentLogLevel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        result +\u003d String.format(\"%1$s \u003d %2$s\\n\", \"maxFileCount\", maxFileCount);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        result +\u003d String.format(\"%1$s \u003d %2$s\\n\", \"maxFileSizeBytes\", maxFileSizeBytes);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        result +\u003d String.format(\"%1$s \u003d %2$s\\n\", \"currentLogLevel\", currentLogLevel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 55,
      "ZKathrynx": 1
    }
  },
  {
    "path": "src/main/java/cube/storage/config/ReminderConfig.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.storage.config;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class ReminderConfig {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private int daysToExpiry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private int stockIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a new instance of ConfigStorage class with default settings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public ReminderConfig() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.daysToExpiry \u003d 7;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.stockIndex \u003d 5;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Constructor that takes in 2 arguments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a new instance of ConfigStorage class with supplied settings."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public ReminderConfig(int daysToExpiry, int stockIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.daysToExpiry \u003d daysToExpiry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.stockIndex \u003d stockIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public int getDaysToExpiry() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return daysToExpiry;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setDaysToExpiry(int daysToExpiry) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.daysToExpiry \u003d daysToExpiry;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public int getStockIndex() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return stockIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setStockIndex(int stockIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.stockIndex \u003d stockIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 40
    }
  },
  {
    "path": "src/main/java/cube/storage/config/UiConfig.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * Config object containing configurations for UI."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.storage.config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class UiConfig {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static final double MIN_WINDOW_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static final double MIN_WINDOW_WIDTH \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static double MAX_WINDOW_HEIGHT \u003d 1000;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static double MAX_WINDOW_WIDTH \u003d 1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private double windowHeight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a new instance of UiConfig class with default settings."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public UiConfig() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.windowHeight \u003d 600;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.windowWidth \u003d 600;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Constructor that takes in 2 arguments."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a new instance of UiConfig class with supplied settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public UiConfig(int windowHeight, int windowWidth) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static double getMinWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return MIN_WINDOW_HEIGHT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static double getMinWindowWidth() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return MIN_WINDOW_WIDTH;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static double getMaxWindowHeight() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return MAX_WINDOW_HEIGHT;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void setMaxWindowHeight(double maxWindowHeight) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        MAX_WINDOW_HEIGHT \u003d maxWindowHeight;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static double getMaxWindowWidth() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return MAX_WINDOW_WIDTH;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void setMaxWindowWidth(double maxWindowWidth) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        MAX_WINDOW_WIDTH \u003d maxWindowWidth;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setWindowHeight(double windowHeight) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setWindowWidth(double windowWidth) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        result +\u003d String.format(\"%1$s \u003d %2$s\\n\", \"windowHeight\", windowHeight);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        result +\u003d String.format(\"%1$s \u003d %2$s\\n\", \"windowWidth\", windowWidth);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 82,
      "ZKathrynx": 1
    }
  },
  {
    "path": "src/main/java/cube/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.FileUtilJson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.LogUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class CommandBox extends UiManager\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private FileUtilJson storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private FoodList foodList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private final Logger logger \u003d LogUtil.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setCommandText(String commandText) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        commandTextField.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        commandTextField.setText(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Handles the Enter button pressed event listener."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void handleCommandEntered() throws CubeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String fullCommand \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            commandExecutor.execute(fullCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            commandTextField.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        commandTextField.clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        CommandResult execute(String commandText) throws CubeException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 65,
      "tygq13": 2
    }
  },
  {
    "path": "src/main/java/cube/ui/FoodListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class FoodListCard extends UiManager\u003cHBox\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Food food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private final SellExecutor sellExecutor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private final EditExecutor editExecutor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Label stock;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Label expiry;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Button edit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Button sell;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Food list card."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param food the food to be displayed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param displayedIndex its index."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param sellExecutor sell executor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param editExecutor edit executor."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public FoodListCard(Food food, int displayedIndex, SellExecutor sellExecutor, EditExecutor editExecutor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.index \u003d displayedIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        name.setText(food.getName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (food.getType() !\u003d \"\") {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            tags.getChildren().add(new Label(food.getType()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            tags.getChildren().setAll(new Label(\"Uncategorized\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        price.setText(\"Price: $\" + food.getPrice());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        cost.setText(\"Cost: $\" + food.getCost());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        stock.setText(\"Stock: \" + food.getStock());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        expiry.setText(\"Expiry: \" + \"Not Specified\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (food.getExpiryDate() !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            expiry.setText(\"Expiry: \" + ParserUtil.parseDateToString(food.getExpiryDate()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.sellExecutor \u003d sellExecutor;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.editExecutor \u003d editExecutor;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void handleEdit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        editExecutor.execute(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void handleSell() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        sellExecutor.execute(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Represents a function that can execute delete commands."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public interface EditExecutor {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        void execute(int index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Represents a function that can execute edit commands."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public interface SellExecutor {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kuromono"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kuromono"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        void execute(int index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 101,
      "ZKathrynx": 7
    }
  },
  {
    "path": "src/main/java/cube/ui/ListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.ui.FoodListCard.EditExecutor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.ui.FoodListCard.SellExecutor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * List panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class ListPanel extends UiManager\u003cListView\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private final SellExecutor sellExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private final EditExecutor editExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private ListView\u003cFood\u003e productListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * List panel."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param foodList the food list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param sellExecutor sell executor."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param editExecutor edit executor."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public ListPanel(FoodList foodList, SellExecutor sellExecutor, EditExecutor editExecutor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ObservableList\u003cFood\u003e observableList \u003d FXCollections.observableArrayList(foodList.getFoodList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        productListView.setItems(observableList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        productListView.setCellFactory(listView -\u003e new ListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.sellExecutor \u003d sellExecutor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.editExecutor \u003d editExecutor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Update food list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param foodList the food list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void updateProductList(FoodList foodList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ObservableList\u003cFood\u003e observableList \u003d FXCollections.observableArrayList(foodList.getFoodList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        productListView.setItems(observableList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Class for list view cell."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    class ListViewCell extends ListCell\u003cFood\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        protected void updateItem(Food food, boolean empty) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                setGraphic(new FoodListCard(food, getIndex() + 1, sellExecutor, editExecutor).getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 50,
      "tygq13": 1,
      "ZKathrynx": 16
    }
  },
  {
    "path": "src/main/java/cube/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.ConfigStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.ProfitStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.UiConfig;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.FileUtilJson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.LogUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.control.MenuBar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Main window."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class MainWindow extends UiManager\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private OverviewDisplay overviewDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private ListPanel listPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private StatusBar statusBar;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private MenuBar menuBar;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private GridPane menuBarPane;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private StackPane overviewDisplayPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static double windowOffsetX \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static double windowOffsetY \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private ConfigStorage configStorage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private FileUtilJson\u003cStorageManager\u003e storage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    private ModelManager modelManager;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private final Logger logger \u003d LogUtil.getLogger(MainWindow.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Main window."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param primaryStage primary stage."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param storageManager storage manager."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param storage storage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public MainWindow(Stage primaryStage, StorageManager storageManager,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                      FileUtilJson\u003cStorageManager\u003e storage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.storageManager \u003d storageManager;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.configStorage \u003d storageManager.getConfig();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        this.modelManager \u003d new ModelManager(storageManager.getFoodList(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                storageManager.getSalesHistory(), storageManager.getPromotionList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Show the main window."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Initialize the components."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void initComponents() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logger.info(\"Initializing Cube GUI components.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        initWindowSize();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        initWindowDrag();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        resultDisplay.setResultText(\"Welcome to Cube!\\nEnter \u0027help\u0027 to see the list of available commands.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ProfitCommand.generateAnnualProfitRevenue(modelManager);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        overviewDisplay \u003d new OverviewDisplay(storageManager.getFoodList().size(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                ProfitStorage.getAnnualProfit(), ProfitStorage.getAnnualRevenue());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        overviewDisplayPlaceholder.getChildren().add(overviewDisplay.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        listPanel \u003d new ListPanel(storageManager.getFoodList(), this::executeSell, this::executeEdit);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        listPanelPlaceholder.getChildren().add(listPanel.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        statusBar \u003d new StatusBar(storage.getFileFullPath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBar.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void initWindowSize() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final double windowHeight \u003d configStorage.getUiConfig().getWindowHeight();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final double windowWidth \u003d configStorage.getUiConfig().getWindowWidth();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Rectangle2D primaryScreenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        double maxHeight \u003d primaryScreenBounds.getHeight();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        double maxWidth \u003d primaryScreenBounds.getWidth();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        UiConfig.setMaxWindowHeight(maxHeight);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        UiConfig.setMaxWindowWidth(maxWidth);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (windowHeight \u003e\u003d primaryStage.getMinHeight() \u0026\u0026 windowHeight \u003c\u003d maxHeight) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            primaryStage.setHeight(windowHeight);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (windowWidth \u003e\u003d primaryStage.getMinWidth() \u0026\u0026 windowWidth \u003c\u003d maxWidth) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            primaryStage.setWidth(windowWidth);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void initWindowDrag() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        primaryStage.initStyle(StageStyle.UNDECORATED);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        menuBar.setOnMousePressed(event -\u003e {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            windowOffsetX \u003d event.getSceneX();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            windowOffsetY \u003d event.getSceneY();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        menuBar.setOnMouseDragged(event -\u003e {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            primaryStage.setX(event.getScreenX() - windowOffsetX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            primaryStage.setY(event.getScreenY() - windowOffsetY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        });"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        primaryStage.getScene().setOnMousePressed(event -\u003e {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            windowOffsetX \u003d event.getSceneX();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            windowOffsetY \u003d event.getSceneY();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        });"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        primaryStage.getScene().setOnMouseDragged(event -\u003e {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            primaryStage.setX(event.getScreenX() - windowOffsetX);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            primaryStage.setY(event.getScreenY() - windowOffsetY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        });"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private CommandResult executeCommand(String command) throws CubeException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            logger.info(\"Command Entered : \" + command);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            Command c \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            CommandResult result \u003d c.execute(modelManager, storageManager);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            resultDisplay.setResultText(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            // Updates GUI components"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            listPanel.updateProductList(storageManager.getFoodList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            if (c instanceof SoldCommand || c instanceof AddCommand"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    || c instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                ProfitCommand.generateAnnualProfitRevenue(modelManager);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                overviewDisplay.updateOverview(storageManager.getFoodList().size(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        ProfitStorage.getAnnualProfit(), ProfitStorage.getAnnualRevenue());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            if (c instanceof ConfigCommand) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                initWindowSize();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            if (result.isShowHelp()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            if (result.isExit()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            storage.save(storageManager);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (CubeException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            resultDisplay.setResultText(e.getMessage());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void executeEdit(int index) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Food food \u003d storageManager.getFoodList().get(index - 1);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String command \u003d \"update %1$s -t %2$s -p %3$s -c %4$s -s %5$s -e %6$s\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        commandBox.setCommandText(String.format(command, food.getName(), food.getType(),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                food.getPrice(), food.getCost(), food.getStock(),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                ParserUtil.parseDateToString(food.getExpiryDate())));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void executeSell(int index) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Food food \u003d storageManager.getFoodList().get(index - 1);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String command \u003d \"sold %1$s -q 1\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        commandBox.setCommandText(String.format(command, food.getName()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Minimizes the application."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void handleMinimize() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        primaryStage.setIconified(true);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Maximizes the application."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void handleMaximize() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (primaryStage.isMaximized()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            primaryStage.setMaximized(false);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            primaryStage.setMaximized(true);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void handleHelp() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String command \u003d \"help\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        commandBox.setCommandText(command);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 219,
      "tygq13": 3,
      "ZKathrynx": 30
    }
  },
  {
    "path": "src/main/java/cube/ui/OverviewDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Overview display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class OverviewDisplay extends UiManager\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static final String FXML \u003d \"OverviewDisplay.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Label productQty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Label profit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Label revenue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Display the overview."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public OverviewDisplay() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        productQty.setText(\"0\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        profit.setText(\"0\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        revenue.setText(\"0\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Display the overview."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param qty number of food items."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param totalProfit total profit."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param totalRevenue total revenue."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public OverviewDisplay(int qty, double totalProfit, double totalRevenue) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        productQty.setText(String.valueOf(qty));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        profit.setText(String.valueOf(totalProfit));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        revenue.setText(String.valueOf(totalRevenue));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Update the overview."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param qty number of food items."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param totalProfit total profit."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param totalRevenue total revenue."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void updateOverview(int qty, double totalProfit, double totalRevenue) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        productQty.setText(String.valueOf(qty));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        profit.setText(String.valueOf(totalProfit));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        revenue.setText(String.valueOf(totalRevenue));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 36,
      "ZKathrynx": 18
    }
  },
  {
    "path": "src/main/java/cube/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class ResultDisplay extends UiManager\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setResultText(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        resultDisplay.setText(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 20
    }
  },
  {
    "path": "src/main/java/cube/ui/StatusBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class StatusBar extends UiManager\u003cVBox\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static final String FXML \u003d \"StatusBar.fxml\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public StatusBar(String fileFullPath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.saveLocationStatus.setText(fileFullPath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 17
    }
  },
  {
    "path": "src/main/java/cube/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "//@@author LL-Pengfei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * Ui.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * Support user interaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "package cube.ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.util.exception.UtilErrorMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * This class is used for the user interface. It supports the interactions with the users,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * including data and instructions input and output."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    private Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Return the next line of user input being read."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @return next line of user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Print the welcome screen of Cube."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        String logo \u003d \" ________  ___  ___  ________  _______      \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                + \"|\\\\   ____\\\\|\\\\  \\\\|\\\\  \\\\|\\\\   __  \\\\|\\\\  ___ \\\\     \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                + \"\\\\ \\\\  \\\\___|\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\|\\\\ /\\\\ \\\\   __/|    \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                + \" \\\\ \\\\  \\\\    \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\   __  \\\\ \\\\  \\\\_|/__  \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                + \"  \\\\ \\\\  \\\\____\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\_|\\\\ \\\\ \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                + \"   \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                + \"    \\\\|_______|\\\\|_______|\\\\|_______|\\\\|_______|\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Print a dotted line in a new line."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Print an error message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param e The error message."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public void showError(String e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        System.out.println(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Print the error message of loading error."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param path The filepath that the user intends to use to load."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public void showLoadingError(String path) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        System.out.println(UtilErrorMessage.WRITE_ERROR + path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    // temporary usage only, before GUI finish"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public void showCommandResult(CommandResult result) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        System.out.println(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LL-Pengfei": 75
    }
  },
  {
    "path": "src/main/java/cube/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.CubeApp;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.LogUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.exception.CubeUtilException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.exception.UtilErrorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public abstract class UiManager\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private final Logger logger \u003d LogUtil.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Main Constructor for Root."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param fxml File name for the FXML user interface design file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param root Type of the JavaFX Object type to load."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public UiManager(String fxml, T root) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            URL fxmlUrl \u003d getFxmlUrl(fxml);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            setRoot(root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            loadFxmlFile(fxmlUrl);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (CubeUtilException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Secondary Constructor."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param fxml File name for the FXML user interface design file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public UiManager(String fxml) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            URL fxmlUrl \u003d getFxmlUrl(fxml);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            loadFxmlFile(fxmlUrl);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (CubeUtilException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Returns the root object of the FXML Loader."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Sets he root object of the FXML Loader."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param root The root FXML Object to be set."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private void setRoot(T root) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Loads the FXML object of the provided type."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param location Location where the FXML files are being stored."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void loadFxmlFile(URL location) throws CubeUtilException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            throw new CubeUtilException(UtilErrorMessage.READ_ERROR + location.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within FXML_FILE_FOLDER."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private static URL getFxmlUrl(String fxml) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String fxmlPath \u003d FXML_FILE_FOLDER + fxml;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        URL fxmlUrl \u003d CubeApp.class.getClassLoader().getResource(fxmlPath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return fxmlUrl;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 86,
      "ZKathrynx": 13
    }
  },
  {
    "path": "src/main/java/cube/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * Abstract parent class for FileUtil."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.exception.CubeUtilException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public abstract class FileUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private String fileFullPath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Constructor with two argument."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param filePath The directory path where data will be stored."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param fileName The filename of the file to be read/write."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public FileUtil(String filePath, String fileName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.fileFullPath \u003d filePath + File.separator + fileName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates the parent directory and file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param file the file at which should be created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @throws CubeUtilException exception occurs when unable to create new file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void create(File file) throws CubeUtilException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            throw new CubeUtilException(fileFullPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Boolean check to see if file available with a createFile flag to toggle creation of new file if not found."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @return true if data file available, otherwise makes a new data file if createFile is true and returns false."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @throws CubeUtilException exception occurs when unable to create new file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public boolean checkFileAvailable(boolean createFile) throws CubeUtilException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        File file \u003d new File(fileFullPath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            if (createFile) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                create(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Getter for FileFullPath."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @return full file path of the JSON file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public String getFileFullPath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return fileFullPath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 66,
      "ZKathrynx": 1
    }
  },
  {
    "path": "src/main/java/cube/util/FileUtilCSV.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Handling of CSV File Read/Write operations in Cube."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import com.fasterxml.jackson.databind.JavaType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import com.fasterxml.jackson.databind.MappingIterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvMapper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvSchema;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.exception.CubeUtilException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.exception.UtilErrorMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class FileUtilCSV\u003cT\u003e extends FileUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private T fileObject;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private String fileFullPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private CsvMapper mapper;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Constructor with two argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param filePath the directory path where data will be stored."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public FileUtilCSV(String filePath, String fileName, T fileObject) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(filePath, fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.fileFullPath \u003d filePath + File.separator + fileName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.fileObject \u003d fileObject;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.file \u003d new File(fileFullPath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.mapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.mapper.setDateFormat(ParserUtil.getDateFormat());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.mapper.setTimeZone(ParserUtil.getTimeZone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Loads data from the CSV file to an ArrayList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @throws CubeException exception happens in reading from the data file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public ArrayList\u003cT\u003e load() throws CubeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        ArrayList\u003cT\u003e collectionToLoad \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(\"Loading file from : \" + fileFullPath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            CsvSchema schema \u003d CsvSchema.emptySchema().withHeader();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            JavaType type \u003d mapper.getTypeFactory().constructType(fileObject.getClass());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            ObjectReader reader \u003d mapper.readerFor(type).with(schema);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            MappingIterator\u003cT\u003e iterator \u003d reader.readValues(file);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                T currentObject \u003d iterator.next();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                collectionToLoad.add(currentObject);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            throw new CubeUtilException(UtilErrorMessage.READ_ERROR + fileFullPath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return collectionToLoad;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Saves the Collection into a CSV file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param collectionToSave Collection to be saved into CSV."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @throws CubeException exception happens in writing to the data file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void save(Collection\u003cT\u003e collectionToSave) throws CubeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        checkFileAvailable(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            JavaType type \u003d mapper.getTypeFactory().constructType(fileObject.getClass());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            CsvSchema schema \u003d mapper.schemaFor(type);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            schema \u003d schema.withUseHeader(true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            mapper.writerFor(collectionToSave.getClass()).with(schema).writeValue(file, collectionToSave);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            throw new CubeUtilException(UtilErrorMessage.WRITE_ERROR + fileFullPath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 83,
      "ZKathrynx": 9
    }
  },
  {
    "path": "src/main/java/cube/util/FileUtilJson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Handling of JSON File Read/Write operations in Cube."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import com.fasterxml.jackson.databind.JavaType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.exception.CubeUtilException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.exception.UtilErrorMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class FileUtilJson\u003cT\u003e extends FileUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private T fileObject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private String fileFullPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private ObjectMapper mapper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Constructor with two argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param filePath the directory path where data will be stored."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public FileUtilJson(String filePath, String fileName, T fileObject) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(filePath, fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.fileFullPath \u003d filePath + File.separator + fileName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.fileObject \u003d fileObject;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.file \u003d new File(fileFullPath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Loads the serialized object from the JSON file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @return De-serialized object read from the JSON file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @throws CubeUtilException exception occurs in reading from data file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public T load() throws CubeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (checkFileAvailable(true)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(\"Loading file from : \" + fileFullPath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                JavaType type \u003d mapper.getTypeFactory().constructType(fileObject.getClass());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                fileObject \u003d mapper.readValue(file, type);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                throw new CubeUtilException(UtilErrorMessage.READ_ERROR + fileFullPath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return fileObject;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Saves the object into a JSON file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param fileObject Object to be saved into JSON."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @throws CubeException exception happens in writing to the data file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void save(T fileObject) throws CubeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        checkFileAvailable(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            mapper.writeValue(file, fileObject);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            throw new CubeUtilException(UtilErrorMessage.WRITE_ERROR + fileFullPath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 65,
      "ZKathrynx": 6
    }
  },
  {
    "path": "src/main/java/cube/util/LogUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * Handles and configures loggers and handlers."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * Default logger is configured to 1 log file, 10MB in size, Level.INFO."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.util;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.LogConfig;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class LogUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static int maxFileCount \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static int maxFileSizeBytes \u003d (int)(Math.pow(2, 20) * 10); // 10MB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static String logFileName \u003d \"cube.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static Logger logger \u003d LogUtil.getLogger(LogUtil.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Initializes the logger with custom configurations from the LogConfig object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param logConfig Object containing the log configurations to load form."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void init(LogConfig logConfig) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logger.info(\"Initializing logger with stored configurations.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        maxFileCount \u003d logConfig.getMaxFileCount();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        maxFileSizeBytes \u003d logConfig.getMaxFileSizeBytes();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        currentLogLevel \u003d Level.parse(logConfig.getCurrentLogLevel());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logger \u003d LogUtil.getLogger(LogUtil.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logger.info(\"Configured Log Level: \" + currentLogLevel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e classType) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (classType \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return getLogger(classType.getSimpleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Adds the ConsoleHandler to the logger."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates the ConsoleHandler if it is null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Remove all the handlers from logger."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Arrays.stream(logger.getHandlers()).forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Adds the FileHandler to the logger."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates the FileHandler if it is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a FileHandler for the log file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Outputs the logs into a log file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(logFileName, maxFileSizeBytes, maxFileCount, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Creates a ConsoleHandler for the log file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Outputs the logs into the console."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 118,
      "ZKathrynx": 2
    }
  },
  {
    "path": "src/main/java/cube/util/exception/CubeUtilException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * This an exception class that handles loading exception when using Cube. Inherits from CubeException."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.util.exception;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class CubeUtilException extends CubeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Constructor with one argument."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Constructs the exception with message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @param message the message to be printed when exception happens."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public CubeUtilException(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 19,
      "ZKathrynx": 2
    }
  },
  {
    "path": "src/main/java/cube/util/exception/UtilErrorMessage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * The task contain all messages used when errors occur."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author tygq13"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.util.exception;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class UtilErrorMessage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String READ_ERROR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003d \"OOPS!!! IO Exception has been caught. Unable to read from \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String WRITE_ERROR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003d \"OOPS!!! IO Exception has been caught. Unable to write to \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 14
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kuromono": 7
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" maxWidth\u003d\"80.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"50\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cImageView fitWidth\u003d\"40\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cimage\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c!-- Icon made by Good Ware from www.flaticon.com --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003cImage url\u003d\"@/images/placeholder_image.png\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003c/image\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"50\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"name\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"price\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cLabel fx:id\u003d\"cost\" styleClass\u003d\"cell_small_label\" text\u003d\"cost\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cLabel fx:id\u003d\"stock\" styleClass\u003d\"cell_small_label\" text\u003d\"stock\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cLabel fx:id\u003d\"expiry\" styleClass\u003d\"cell_small_label\" text\u003d\"expiry\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"50\" spacing\u003d\"10\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cButton fx:id\u003d\"edit\" prefWidth\u003d\"60\" styleClass\u003d\"cell_small_label\" onAction\u003d\"#handleEdit\" text\u003d\"Edit\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cButton fx:id\u003d\"sell\" prefWidth\u003d\"60\" styleClass\u003d\"cell_small_label\" onAction\u003d\"#handleSell\" text\u003d\"Sell\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kuromono": 63
    }
  },
  {
    "path": "src/main/resources/view/ListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    \u003cListView fx:id\u003d\"productListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kuromono": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"600\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Cube\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "         type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cURL value\u003d\"@/view/Theme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cGridPane fx:id\u003d\"menuBarPane\" styleClass\u003d\"menu-bar\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003cMenuBar fx:id\u003d\"menuBar\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003cHBox alignment\u003d\"TOP_RIGHT\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cButton fx:id\u003d\"minimizeBtn\" onAction\u003d\"#handleMinimize\" text\u003d\"-\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cButton fx:id\u003d\"maximizeBtn\" onAction\u003d\"#handleMaximize\" text\u003d\"+\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cButton fx:id\u003d\"exitBtn\" onAction\u003d\"#handleExit\" text\u003d\"×\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"150\" minWidth\u003d\"400\" prefHeight\u003d\"200\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                           styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cStackPane fx:id\u003d\"overviewDisplayPlaceholder\" minHeight\u003d\"50\" minWidth\u003d\"400\" prefHeight\u003d\"50\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                           styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cVBox fx:id\u003d\"viewList\" minHeight\u003d\"200\" minWidth\u003d\"400\" prefHeight\u003d\"350\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                      VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" maxHeight\u003d\"30\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kuromono": 81
    }
  },
  {
    "path": "src/main/resources/view/OverviewDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    \u003cGridPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" maxWidth\u003d\"80.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" maxWidth\u003d\"80.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" maxWidth\u003d\"80.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"50\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cImageView fitWidth\u003d\"40\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cimage\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c!-- Icon made by Good Ware from www.flaticon.com --\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003cImage url\u003d\"@/images/placeholder_item.png\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003c/image\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cLabel text\u003d\"Products\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cLabel fx:id\u003d\"productQty\" text\u003d\"productQty\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"50\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cImageView fitWidth\u003d\"40\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cimage\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c!-- Icon made by Good Ware from www.flaticon.com --\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003cImage url\u003d\"@/images/placeholder_profit.png\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003c/image\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cLabel text\u003d\"Profit\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cLabel fx:id\u003d\"profit\" text\u003d\"profit\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"50\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cImageView fitWidth\u003d\"40\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cimage\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003c!-- Icon made by Good Ware from www.flaticon.com --\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    \u003cImage url\u003d\"@/images/placeholder_revenue.png\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003c/image\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cLabel text\u003d\"Revenue\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            \u003cLabel fx:id\u003d\"revenue\" text\u003d\"revenue\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c/StackPane"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003e"
      }
    ],
    "authorContributionMap": {
      "kuromono": 82
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kuromono": 8
    }
  },
  {
    "path": "src/main/resources/view/StatusBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003cVBox styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kuromono": 11
    }
  },
  {
    "path": "src/main/resources/view/Theme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(#f5f5f6, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    background-color: #e1e2e1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(#f5f5f6, 20%);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: #e1e2e1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: #f5f5f6;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #455a64;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".list-cell:filled:selected .label {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #f5f5f6;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #1c313a;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #1c313a;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(#f5f5f6, 20%);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(#f5f5f6, 20%);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-border-color: derive(#f5f5f6, 10%);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(#f5f5f6, 30%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #455a64;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #455a64;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(#f5f5f6, 30%);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-border-color: derive(#f5f5f6, 25%);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #455a64;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(f5f5f6, 30%);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-border-color: derive(#f5f5f6, 30%);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(#f5f5f6, 30%);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(#455a64, 30%);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #f9fafa;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: #455a64;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #f9fafa;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".menu-bar .button {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".menu-bar .button:hover {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: #718792;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: #718792;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: #455a64;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #f5f5f6;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: #f5f5f6;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #455a64;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: #455a64;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #f5f5f6;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: #f5f5f6;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #455a64;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(#e1e2e1, 30%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(#455a64, 50%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kuromono"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kuromono"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kuromono"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kuromono"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: derive(#e1e2e1, 30%);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #455a64;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kuromono"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kuromono"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kuromono"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-text-fill: #f5f5f6;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-background-color: #455a64;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 255
    }
  },
  {
    "path": "src/test/java/CubeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class CubeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 10
    }
  },
  {
    "path": "src/test/java/cube/logic/command/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static cube.testutil.Assert.assertThrowEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tprivate class FoodStub extends Food{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void constructor_valid_person() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tFoodStub food \u003d new FoodStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tnew AddCommand(food);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *\t ModelManager, StorageManager, FoodList, Food, CommandResult."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Storage not tested."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_foodAcceptedByModel() throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tStorageManager storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tFood food \u003d new Food(\"ok\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tAddCommand command \u003d new AddCommand(food);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tCommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    \tCommandResult expectedResult \u003d new CommandResult(String.format("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    \t\t\tAddCommand.MESSAGE_SUCCESS, food, model.getFoodList().size()), false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tFoodList expectedList \u003d new FoodList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \texpectedList.add(food);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \t"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tassertEquals(model.getFoodList(), expectedList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tassertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *\t ModelManager, StorageManager, FoodList, Food, CommandResult."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_duplicatedFood_throws_NameExist() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tStorageManager storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tFoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tFood food \u003d new Food(\"ok\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tlist.add(food);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tAddCommand command \u003d new AddCommand(food);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    \tassertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "\t\t\t\tCommandErrorMessage.FOOD_ALREADY_EXISTS, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    \t\tcommand.execute(model, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    \t});"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 56,
      "ZKathrynx": 8
    }
  },
  {
    "path": "src/test/java/cube/logic/command/AddPromotionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.Promotion;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.PromotionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import static cube.testutil.Assert.assertThrowEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class AddPromotionCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void execute_promotionAcceptedByModel() throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        StorageManager storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        Food food \u003d new Food(\"testName\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        Promotion promotion \u003d new Promotion(\"testName\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        AddPromotionCommand command \u003d new AddPromotionCommand(promotion);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        CommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(AddPromotionCommand.MESSAGE_SUCCESS, promotion,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        model.getPromotionList().size()), false, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        PromotionList expectedList \u003d new PromotionList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        expectedList.add(promotion);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        assertEquals(model.getPromotionList(), expectedList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void execute_duplicatedPromotion_throws_PromotionExist() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        StorageManager storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        PromotionList list \u003d model.getPromotionList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        Promotion promotion \u003d new Promotion(\"testName\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        list.add(promotion);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        AddPromotionCommand command \u003d new AddPromotionCommand(promotion);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.PROMOTION_ALREADY_EXISTS, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            command.execute(model, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 39,
      "ZKathrynx": 10
    }
  },
  {
    "path": "src/test/java/cube/logic/command/BatchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Testing for BatchCommand utilities."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.testutil.SampleUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.testutil.StorageUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class BatchCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static ModelManager model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static StorageManager storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static FoodList foodList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Initializes variables used for the tests."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void initVariables() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        foodList \u003d SampleUtil.generateSampleData(5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Resets ModelManager \u0026 StorageManager for every test run."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void clearVariables() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Deletes all the files used during this test."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void deleteTestFiles() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        StorageUtil.deleteFile(\"test_export_file.csv\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        StorageUtil.deleteFile(\"test_create_empty_template.csv\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        StorageUtil.deleteFile(\"test_execute_invalid_command.csv\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test exporting a CSV file with sample values."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void export_file() throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String fileName \u003d \"test_export_file.csv\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storage.storeFoodList(foodList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        BatchCommand command \u003d new BatchCommand(fileName, BatchCommand.OperationType.EXPORT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        CommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(BatchCommand.MESSAGE_SUCCESS, BatchCommand.MESSAGE_EXPORT, fileName));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertTrue(StorageUtil.checkFileAvailable(fileName));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test importing a CSV file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void import_file() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String fileName \u003d \"test_export_file.csv\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        BatchCommand command \u003d new BatchCommand(fileName, BatchCommand.OperationType.IMPORT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        CommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(BatchCommand.MESSAGE_SUCCESS, BatchCommand.MESSAGE_IMPORT, fileName));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(storage.getFoodList().toString(), foodList.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test importing a non-existent CSV file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(3)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void import_non_existing_file() throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String fileName \u003d \"test_import_non_existing_file.csv\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        BatchCommand command \u003d new BatchCommand(fileName, BatchCommand.OperationType.IMPORT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        CommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(BatchCommand.MESSAGE_FILE_NOT_FOUND, fileName));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test creation of an empty CSV template for Foodlist."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(4)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void create_empty_template() throws CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String fileName \u003d \"test_create_empty_template.csv\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        BatchCommand command \u003d new BatchCommand(fileName, BatchCommand.OperationType.EMPTY);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        CommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(BatchCommand.MESSAGE_SUCCESS_TEMPLATE, fileName));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        FoodList expectedList \u003d new FoodList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertTrue(StorageUtil.checkFileAvailable(fileName));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(model.getFoodList(), expectedList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 118,
      "ZKathrynx": 9
    }
  },
  {
    "path": "src/test/java/cube/logic/command/ConfigCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Testing for ConfigCommand utilities."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.LogConfig;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.UiConfig;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class ConfigCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static ModelManager model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static StorageManager storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static UiConfig uiConfig;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static LogConfig logConfig;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Initializes variables used for the tests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void initVariables() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        // Sets UiConfig variables: WindowHeight\u003d888.88, WindowWidth\u003d888.88"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        uiConfig \u003d new UiConfig();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        uiConfig.setWindowHeight(888.88);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        uiConfig.setWindowWidth(888.88);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        // Sets LogConfig variables: LogLevel: OFF, MaxFileSize: 8MB, MaxFileCount: 8"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logConfig \u003d new LogConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logConfig.setMaxFileSizeMB(8);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logConfig.setCurrentLogLevel(\"OFF\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logConfig.setMaxFileCount(8);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Resets ModelManager \u0026 StorageManager for every test run."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void clearVariables() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test changing the configuration values for UiConfig."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void change_ui_config() throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ConfigCommand command \u003d new ConfigCommand(ConfigCommand.ConfigType.UI, uiConfig);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        CommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        UiConfig resultUiConfig \u003d storage.getConfig().getUiConfig();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(String.format("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                ConfigCommand.MESSAGE_SUCCESS, ConfigCommand.ConfigType.UI.toString()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(resultUiConfig, uiConfig);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test changing the configuration values for LogConfig."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void change_log_config() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ConfigCommand command \u003d new ConfigCommand(ConfigCommand.ConfigType.LOG, logConfig);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        CommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        LogConfig resultLogConfig \u003d storage.getConfig().getLogConfig();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(String.format("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                ConfigCommand.MESSAGE_SUCCESS, ConfigCommand.ConfigType.LOG.toString()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(resultLogConfig, logConfig);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test viewing all modified variables in config."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(3)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void view_config() throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ConfigCommand command \u003d new ConfigCommand(ConfigCommand.ConfigType.VIEW);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        CommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(ConfigCommand.MESSAGE_VIEW);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 98,
      "ZKathrynx": 5
    }
  },
  {
    "path": "src/test/java/cube/logic/command/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.DeleteCommand.DeleteBy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static cube.testutil.Assert.assertThrowEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tprivate class FoodStub extends Food{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *\t ModelManager, StorageManager, FoodList, Food, CommandResult."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Storage not tested."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_valid_index() throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Food toDelete \u003d new Food(\"anyName\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        list.add(toDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        DeleteCommand command \u003d new DeleteCommand(1, \"INDEX\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        CommandResult result \u003d command.execute(model, new StorageManager());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodList expectedList \u003d new FoodList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_SUCCESS_SINGLE, toDelete, 0));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(model.getFoodList(), expectedList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_invalid_index() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        DeleteCommand deleteTooLargeIndex \u003d new DeleteCommand(1, \"INDEX\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.INVALID_INDEX, () -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            deleteTooLargeIndex.execute(new ModelManager(), new StorageManager());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        DeleteCommand deleteNegativeIndex \u003d new DeleteCommand(-1, \"INDEX\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.INVALID_INDEX, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            deleteNegativeIndex.execute(new ModelManager(), new StorageManager());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *   ModelManager, StorageManager, FoodList, Food, CommandResult "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Storage not tested."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_valid_name() throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Food toDelete \u003d new Food(\"anyName\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        list.add(toDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        DeleteCommand command \u003d new DeleteCommand(\"anyName\", \"NAME\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        CommandResult result \u003d command.execute(model, new StorageManager());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodList expectedList \u003d new FoodList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_SUCCESS_SINGLE, toDelete, 0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(model.getFoodList(), expectedList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_invalid_name() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        DeleteCommand deleteTooLargeIndex \u003d new DeleteCommand(\"anyName\", \"NAME\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.FOOD_NOT_EXISTS, () -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            deleteTooLargeIndex.execute(new ModelManager(), new StorageManager());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *   ModelManager, StorageManager, FoodList, Food, CommandResult "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Storage not tested."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_valid_type() throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Food toDelete \u003d new Food(\"anyName\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        toDelete.setType(\"anyType\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        list.add(toDelete);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        DeleteCommand command \u003d new DeleteCommand(\"anyType\", \"TYPE\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        CommandResult result \u003d command.execute(model, new StorageManager());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodList expectedList \u003d new FoodList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_SUCCESS_MULTIPLE, \"anyType\", 1, 0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(model.getFoodList(), expectedList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_invalid_type() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        DeleteCommand deleteTooLargeIndex \u003d new DeleteCommand(\"anyType\", \"TYPE\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.INVALID_TYPE, () -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            deleteTooLargeIndex.execute(new ModelManager(), new StorageManager());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 95,
      "ZKathrynx": 23
    }
  },
  {
    "path": "src/test/java/cube/logic/command/DeletePromotionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.Promotion;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.PromotionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import static cube.testutil.Assert.assertThrowEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "public class DeletePromotionCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    private class PromotionListStub extends PromotionList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void execute_valid_index() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        PromotionList list \u003d model.getPromotionList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        Promotion toDelete \u003d new Promotion(\"testName\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        list.add(toDelete);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        DeletePromotionCommand command \u003d new DeletePromotionCommand(1, \"INDEX\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        CommandResult result \u003d command.execute(model, new StorageManager());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        PromotionList expectedList \u003d new PromotionList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(DeletePromotionCommand.MESSAGE_SUCCESS_SINGLE, toDelete, 0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        assertEquals(model.getPromotionList(), expectedList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void execute_invalid_index() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        DeletePromotionCommand deleteTooLargeIndex \u003d new DeletePromotionCommand(1, \"INDEX\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.INVALID_INDEX, () -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            deleteTooLargeIndex.execute(new ModelManager(), new StorageManager());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        DeletePromotionCommand deleteNegativeIndex \u003d new DeletePromotionCommand(-1, \"INDEX\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.INVALID_INDEX, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            deleteNegativeIndex.execute(new ModelManager(), new StorageManager());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 40,
      "ZKathrynx": 10
    }
  },
  {
    "path": "src/test/java/cube/logic/command/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static cube.testutil.Assert.assertThrowEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void isExitTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        ExitCommand command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tassertEquals(command.isExit(), true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *\t ModelManager, StorageManager, FoodList, Food, CommandResult "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Storage not tested."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_exit_successful() throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tExitCommand command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tCommandResult result \u003d command.execute(new ModelManager(), new StorageManager());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tCommandResult expectedResult \u003d new CommandResult(ExitCommand.MESSAGE_SUCCESS, false, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tassertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 39
    }
  },
  {
    "path": "src/test/java/cube/logic/command/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static cube.testutil.Assert.assertThrowEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void construct_findType_successfully() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FindCommand.FindBy testEnumValue \u003d FindCommand.FindBy.INDEX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String testType \u003d \"INDEX\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int testIndex \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FindCommand command \u003d new FindCommand(testIndex,testType);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(command.getParam(), testEnumValue);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *\t ModelManager, StorageManager, FoodList, Food, CommandResult."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Storage not tested."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_valid_index() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Food toFind \u003d new Food(\"test\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        list.add(toFind);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FindCommand command \u003d new FindCommand(1, \"INDEX\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult result \u003d command.execute(model, new StorageManager());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(FindCommand.MESSAGE_SUCCESS, toFind));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_index() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FindCommand findTooLargeIndex \u003d new FindCommand(1, \"INDEX\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.INVALID_INDEX, () -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    findTooLargeIndex.execute(new ModelManager(), new StorageManager());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FindCommand findNegativeIndex \u003d new FindCommand(-1, \"INDEX\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.INVALID_INDEX, () -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    findNegativeIndex.execute(new ModelManager(), new StorageManager());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_valid_name() throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Food toFind \u003d new Food(\"test\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        list.add(toFind);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FindCommand command \u003d new FindCommand(\"test\", \"NAME\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult result \u003d command.execute(model, new StorageManager());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FoodList expectedList \u003d new FoodList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expectedList.add(toFind);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(FindCommand.MESSAGE_SUCCESS_M, 1, expectedList));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(model.getFoodList(), expectedList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_name() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FindCommand findInvalidName \u003d new FindCommand(\"test\", \"NAME\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.FOOD_NOT_EXISTS, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    findInvalidName.execute(new ModelManager(), new StorageManager());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_valid_type() throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Food toFind \u003d new Food(\"test\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        toFind.setType(\"test\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        list.add(toFind);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FindCommand command \u003d new FindCommand(\"test\", \"TYPE\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult result \u003d command.execute(model, new StorageManager());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FoodList expectedList \u003d new FoodList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expectedList.add(toFind);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(FindCommand.MESSAGE_SUCCESS_M, 1, expectedList));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(model.getFoodList(), expectedList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_type() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FindCommand findInvalidType \u003d new FindCommand(\"test\", \"TYPE\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.INVALID_TYPE, () -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    findInvalidType.execute(new ModelManager(), new StorageManager());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 111
    }
  },
  {
    "path": "src/test/java/cube/logic/command/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList.SortType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static cube.testutil.Assert.assertThrowEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *\t ModelManager, StorageManager, Food.getRevenue(), CommandResult "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Storage not tested."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_list_noSort() throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tHelpCommand command \u003d new HelpCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tCommandResult result \u003d command.execute(new ModelManager(), new StorageManager());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tCommandResult expectedResult \u003d new CommandResult(HelpCommand.MESSAGE_SUCCESS, true, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tassertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 33
    }
  },
  {
    "path": "src/test/java/cube/logic/command/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList.SortType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.ProfitStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    class FoodListStub extends FoodList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tprivate class ModelStub extends ModelManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodListStub list \u003d new FoodListStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        public FoodListStub getFoodList(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "                 return list;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void construct_sortType_successful() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        SortType type \u003d SortType.EXPIRY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        ListCommand command \u003d new ListCommand(type);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tassertEquals(command.sortType, type);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *\t ModelManager, StorageManager, Food.getRevenue(), CommandResult "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Storage not tested."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_list_noSort() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodListStub list \u003d new FoodListStub();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tListCommand command \u003d new ListCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tCommandResult result \u003d command.execute(model, new StorageManager());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    \tCommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    \t        String.format(ListCommand.MESSAGE_SUCCESS, list,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                        ProfitStorage.getAnnualRevenue()), false, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tassertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 3,
      "tygq13": 39,
      "ZKathrynx": 6,
      "LL-Pengfei": 3
    }
  },
  {
    "path": "src/test/java/cube/logic/command/ListPromotionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.promotion.PromotionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "public class ListPromotionCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    /*private class PromotionListStub extends PromotionList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    private class ModelStub extends ModelManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        PromotionList list \u003d new PromotionListStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void execute_listPromotionCommand() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        PromotionList list \u003d new PromotionList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        ListPromotionCommand command \u003d new ListPromotionCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        CommandResult result \u003d command.execute(model, new StorageManager());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(String.format(ListPromotionCommand.MESSAGE_SUCCESS, list));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 31
    }
  },
  {
    "path": "src/test/java/cube/logic/command/ProfitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "//@@author LL-Pengfei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * ProfitCommandTest.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * Tests on the functionality of ProfitCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.model.sale.Sale;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.model.sale.SalesHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * This class test on the functionality of the ProfitCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "public class ProfitCommandTest extends ProfitCommand {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * Tests whether Profit Command behaviour is as expected."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @throws CommandException If exception occurs when using command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @throws ParserException If exception occurs when using parser."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public void testProfitCommand() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        StorageManager storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        SalesHistory salesHistory \u003d new SalesHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final FoodList list \u003d new FoodList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //create a new dummy sales record"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        String foodName \u003d \"food1Name\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        int quantitySold \u003d 20;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double revenue \u003d 100.00;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double profit \u003d 40.00;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Date soldDate \u003d ParserUtil.parseStringToDate(\"23/03/2018\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Sale saleRecord \u003d new Sale(foodName, quantitySold, revenue, profit, soldDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        salesHistory.add(saleRecord);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //specify the period to search for in the saleshistory, inclusive of the sold date of"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //the dummy sales record created above"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Date dateI \u003d ParserUtil.parseStringToDate(\"23/03/1998\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Date dateF \u003d ParserUtil.parseStringToDate(\"23/03/2028\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //search all"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //should only have the one sales record created above"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        ProfitCommand commandAll \u003d new ProfitCommand(dateI, dateF, \"ALL\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        CommandResult resultAll \u003d commandAll.execute(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        CommandResult expectedResultAll \u003d new CommandResult(String.format(ProfitCommand.MESSAGE_SUCCESS_ALL,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                profit, revenue, 0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(resultAll, expectedResultAll);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //search by name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        ProfitCommand commandName \u003d new ProfitCommand(dateI, dateF, \"food1Name\", \"NAME\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        CommandResult resultName \u003d commandName.execute(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        CommandResult expectedResultName \u003d new CommandResult(String.format(ProfitCommand.MESSAGE_SUCCESS_SINGLE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                profit, revenue, 0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(resultName, expectedResultName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //search by index/type, now requiring the FoodList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //for testing purposes, only initializing the food name \u0026\u0026 set its type will do"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Food dummyFood \u003d new Food(foodName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        dummyFood.setType(\"dummyType\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        list.add(dummyFood);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //search by index"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //since it is the only one in the list, it is indexed 0"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        ProfitCommand commandIndex \u003d new ProfitCommand(dateI, dateF, 0, \"INDEX\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        CommandResult resultIndex \u003d commandIndex.execute(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        CommandResult expectedResultIndex \u003d new CommandResult(String.format(ProfitCommand.MESSAGE_SUCCESS_SINGLE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                profit, revenue, 1)); //now list has one entry"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(resultIndex, expectedResultIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //search by type"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        ProfitCommand commandType \u003d new ProfitCommand(dateI, dateF, \"dummyType\", \"TYPE\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        CommandResult resultType \u003d commandType.execute(model, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        CommandResult expectedResultType \u003d new CommandResult(String.format(ProfitCommand.MESSAGE_SUCCESS_MULTIPLE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                profit, revenue, 1)); //now list has one entry"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(resultType, expectedResultType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LL-Pengfei": 94
    }
  },
  {
    "path": "src/test/java/cube/logic/command/ReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    public void execute_reminder() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        StorageManager storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        ReminderCommand command \u003d new ReminderCommand(3, 7);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final CommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        Food food \u003d new Food(\"testName\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        food.setStock(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        food.setExpiryDate(new Date());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        String expectedFeedbackToUser \u003d \"Here are the upcoming expiry dates:\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                String.format(\"%1$s due in %2$s\\n\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                        \"testName\", ParserUtil.parseDateToString(new Date())) + \"\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                \"Here are the food products that are low in stock:\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "                String.format(\"%1$s : %2$s left\\n\", \"testName\", 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedFeedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "parvathi14"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "parvathi14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "parvathi14": 36,
      "ZKathrynx": 1
    }
  },
  {
    "path": "src/test/java/cube/logic/command/SoldCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.sale.Sale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.sale.SalesHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static cube.testutil.Assert.assertThrowEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class SoldCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\tprivate class FoodStub extends Food{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void obtainFoodSold_valid() throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        SoldCommand command \u003d new SoldCommand(\"anyName\", 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodList list \u003d new FoodList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Food food \u003d new Food(\"anyName\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        list.add(food);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        command.obtainFoodSold(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(command.toSold, food);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void obtainFoodSold_throws_nameNotExist() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        SoldCommand command \u003d new SoldCommand(\"anyName\", 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.FOOD_NOT_EXISTS, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            command.obtainFoodSold(new FoodList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *\t ModelManager, StorageManager, FoodList, Food, CommandResult "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Storage not tested."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_correct_model_change() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    \tfinal ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    \tfinal StorageManager storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tFood food \u003d new Food(\"anyName\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        food.setStock(100);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        food.setPrice(100);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        food.setCost(50);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        model.getFoodList().add(food);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tSoldCommand command \u003d new SoldCommand(\"anyName\", 50);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tCommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tFood expectedFood \u003d new Food(\"anyName\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        expectedFood.setStock(50);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        expectedFood.setPrice(100);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        expectedFood.setCost(50);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    \tassertEquals(food, expectedFood);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *   ModelManager, StorageManager, FoodList, Food, CommandResult "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Storage not tested."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_invalid_quantity() throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final StorageManager storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Food food \u003d new Food(\"anyName\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        food.setStock(100);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        food.setPrice(100);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        food.setCost(50);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        model.getFoodList().add(food);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        SoldCommand largeQuantityCommand \u003d new SoldCommand(\"anyName\", 500);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        SoldCommand negativeQuantityCommand \u003d new SoldCommand(\"anyName\", -1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.INVALID_QUANTITY_SOLD, () -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            largeQuantityCommand.execute(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.INVALID_QUANTITY_SOLD, () -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            negativeQuantityCommand.execute(model, storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     *   ModelManager, StorageManager, FoodList, Food, CommandResult "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     * Storage not tested."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tygq13"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void execute_correct_sale_record() throws CommandException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final StorageManager storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final Date time \u003d new Date();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Food food \u003d new Food(\"anyName\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        food.setStock(100);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        food.setPrice(100);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        food.setCost(50);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        model.getFoodList().add(food);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        SoldCommand command \u003d new SoldCommand(\"anyName\", 50, time);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        CommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(SoldCommand.MESSAGE_SUCCESS, 50, \"anyName\", 100 * 50d, 50 * 50d));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Sale expectedSale \u003d new Sale(\"anyName\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                50, 100 * 50, 50 * 50, time);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        System.out.println(model.getSalesHistory().iterator().next());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(model.getSalesHistory().iterator().next(), expectedSale);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 99,
      "ZKathrynx": 23
    }
  },
  {
    "path": "src/test/java/cube/logic/command/UpdateCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.util.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.command.exception.CommandErrorMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static cube.testutil.Assert.assertThrowEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    private class FoodTest extends Food{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *\t ModelManager, StorageManager, FoodList, Food, CommandResult."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Storage not tested."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_update_correctly() throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        StorageManager storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Food oldTest \u003d new Food(\"test\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        list.add(oldTest);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Food newTest \u003d new Food(\"test\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        newTest.setType(\"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assert newTest.getType().equals(\"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        int[] testChange \u003d {1,0,0,0,0};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        UpdateCommand command \u003d new UpdateCommand(newTest,testChange);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult result \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                String.format(UpdateCommand.MESSAGE_SUCCESS, oldTest, newTest));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FoodList expectedList \u003d new FoodList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expectedList.add(newTest);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(model.getFoodList(), expectedList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Dependent on correct implementation of following class:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     *\t ModelManager, StorageManager, FoodList, Food, CommandResult."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalidName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        StorageManager storage \u003d new StorageManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        FoodList list \u003d model.getFoodList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Food food \u003d new Food(\"test\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int[] testChange \u003d {1,0,0,0};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        UpdateCommand command \u003d new UpdateCommand(food, testChange);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertThrowEquals(CommandException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                CommandErrorMessage.FOOD_NOT_EXISTS, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    command.execute(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 1,
      "ZKathrynx": 62
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class AddCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_parse_correctly() throws ParserException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"add\",\"test\",\"-t\",\"test\",\"-p\",\"1.1\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                \"-s\",\"100\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Food expected \u003d new Food(\"test\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expected.setType(\"test\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expected.setPrice(1.1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expected.setStock(100);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        AddCommandParser test \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        test.parse(inputs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(test.getTempFood(), expected);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"add\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new AddCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_parameter() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"add\", \"test\", \"-x\", \"field\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new AddCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid parameter\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_name() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"add\", \" \", \"-t\", \"field\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new AddCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect empty name\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_NAME, e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_empty_field() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"add\", \"test\", \"-p\"};"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new AddCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect empty field\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.EMPTY_FIELD, e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_repetitive_parameter() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"add\", \"test\", \"-t\", \"A\", \"-t\", \"B\"};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new AddCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect repetitive parameter\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.REPETITIVE_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 82
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/AddPromotionCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.promotion.Promotion;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class AddPromotionCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_parse_correctly() throws ParserException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"promotion\",\"test\",\"-%\",\"20\", \"-s\", \"01/12/2019\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                \"-e\",\"02/12/2019\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Promotion expected \u003d new Promotion(\"test\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expected.setDiscount(20);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expected.setStartDate(new Date(2019-1900,12-01,01));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expected.setEndDate(new Date(2019-1900,12-01,02));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        AddPromotionCommandParser test \u003d new AddPromotionCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        test.parse(inputs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expected \u003d test.getTempPromotion();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(test.getTempPromotion(), expected);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"promotion\"};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new AddPromotionCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_parameter() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"promotion\", \"test\", \"-x\", \"field\"};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new AddPromotionCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid parameter\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_name() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"promotion\", \" \", \"-%\", \"field\", \"-e\", \"field\"};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new AddPromotionCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect empty name\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_NAME, e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_empty_field() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"promotion\", \"test\", \"-%\", \"-e\"};"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new AddPromotionCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect empty field\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.EMPTY_FIELD, e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_repetitive_parameter() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"promotion\", \"test\", \"-%\", \"50\", \"-%\", \"20\"};"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new AddPromotionCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect repetitive parameter\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.REPETITIVE_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 86
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/BatchCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class BatchCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"batch\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new BatchCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_parameter() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"batch\", \"-x\", \"field\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new BatchCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid parameter\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_empty_field() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"batch\", \"-e\"};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new BatchCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect empty field\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.EMPTY_FIELD, e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_repetitive_parameter() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"batch\", \"-i\", \"A\", \"-i\", \"A\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new BatchCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect repetitive parameter\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.REPETITIVE_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 56
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/ConfigCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class ConfigCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void parse_view_correctly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"config\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ConfigCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to parse view correctly\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void parse_log_correctly() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"config\",\"LOG\", \"-c\", \"1\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ConfigCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to parse log correctly\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void parse_ui_correctly() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"config\",\"UI\",\"-h\",\"700\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ConfigCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to parse ui correctly\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_height_out_of_range() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"config\",\"UI\",\"-h\",\"300\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String testParameter \u003d \"-h\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        double maxHeight \u003d 1000.0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        double minHeight \u003d 600.0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ConfigCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to catch height out of range.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(String.format(ParserErrorMessage.INVALID_PARAM_RANGE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                    testParameter,minHeight,maxHeight), e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_parameter() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"config\", \"-x\", \"field\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ConfigCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid parameter\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_empty_field() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"config\", \"UI\", \"-h\"};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ConfigCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect empty field\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.EMPTY_FIELD, e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_repetitive_parameter() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"config\", \"UI\", \"-h\", \"1\", \"-h\", \"1\"};"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ConfigCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect repetitive parameter\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.REPETITIVE_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 94
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter_only_command() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"delete\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new DeleteCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter_not_all() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"delete\",\"test\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new DeleteCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_parameter() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"delete\", \"-x\", \"field\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new DeleteCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid parameter\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_repetitive_parameter() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"delete\", \"-i\", \"1\", \"-i\", \"2\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new DeleteCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect repetitive parameter\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.REPETITIVE_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 57
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/DeletePromotionCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class DeletePromotionCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter_only_command() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"delete\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new DeleteCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter_not_all() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"delete\",\"test\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new DeleteCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_parameter() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"delete\", \"-x\", \"field\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new DeleteCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid parameter\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_repetitive_parameter() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"delete\", \"-i\", \"1\", \"-i\", \"2\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new DeleteCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect repetitive parameter\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.REPETITIVE_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 56
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class FindCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter_only_command() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"find\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new FindCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_number() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"find\",\"-i\", \"test\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new FindCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid number\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_NUMBER, e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_parameter() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"find\", \"-x\", \"field\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new FindCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid parameter\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_repetitive_parameter() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"find\", \"-i\", \"1\", \"-i\", \"2\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new FindCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect repetitive parameter\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.REPETITIVE_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 56
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/ListCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class ListCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"list\",\"-sort\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ListCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_parameter() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"list\", \"-x\", \"field\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ListCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid parameter\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_sort_type() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"list\", \"-sort\", \"test\"};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ListCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect empty field\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_SORT_TYPE, e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_repetitive_parameter() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"list\", \"-sort\", \"-sort\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ListCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect repetitive parameter\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.REPETITIVE_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 56
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void test_invalid_command() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String test \u003d \"test\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new Parser().parse(test);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid command\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_COMMAND, e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 23
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import java.util.TimeZone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class ParserUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void parseDateToString_correctly() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String expected \u003d \"01/11/2019\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Date test \u003d new Date(2019-1900,11-01,1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(ParserUtil.parseDateToString(test),expected);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void parseStringToDate_correctly() throws ParserException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String test \u003d \"01/11/2019\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Date expected \u003d new Date(2019-1900,11-01,1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(ParserUtil.parseStringToDate(test),expected);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void parseStringToDate_invalid_format() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String test \u003d \"01-10-2019\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            ParserUtil.parseStringToDate(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid format\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_DATE_FORMAT, e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void parseStringToDate_negative_date() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String test \u003d \"-1/11/2019\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            ParserUtil.parseStringToDate(test);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid format\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_DATE_FORMAT, e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void parseStringToDate_invalid_date() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String test \u003d \"01/13/2019\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            ParserUtil.parseStringToDate(test);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid format\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_DATE_FORMAT, e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void findFullString_correctly() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String expected \u003d \"test this\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] testInputs \u003d {\"test\",\"this\",\"-\"};"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int testIndex \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(expected,ParserUtil.findFullString(testInputs, testIndex));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void hasInvalidParameters_correctly() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] testInputs \u003d {\"test\",\"this\",\"-\"};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] testParameters \u003d {\"-\"};"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertFalse(ParserUtil.hasInvalidParameters(testInputs,testParameters));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void hasInvalidParameters_incorrectly() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] testInputs \u003d {\"test\",\"this\",\"-test\"};"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] testParameters \u003d {\"-\"};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertTrue(ParserUtil.hasInvalidParameters(testInputs,testParameters));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void hasRepetitiveParameters_correctly() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] testInputs \u003d {\"test\",\"this\",\"-\"};"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertFalse(ParserUtil.hasRepetitiveParameters(testInputs));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void hasRepetitiveParameters_incorrectly() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] testInputs \u003d {\"test\",\"this\",\"-\",\"-\"};"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertTrue(ParserUtil.hasRepetitiveParameters(testInputs));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void hasField_correctly() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] testInputs \u003d {\"test\",\"-\",\"this\"};"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int testIndex \u003d 2;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertTrue(ParserUtil.hasField(testInputs,testIndex));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void hasField_out_of_bound() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] testInputs \u003d {\"test\",\"-\"};"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int testIndex \u003d 2;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertFalse(ParserUtil.hasField(testInputs,testIndex));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void hasField_no_field() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] testInputs \u003d {\"test\",\"-tag1\",\"-tag2\"};"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        int testIndex \u003d 2;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertFalse(ParserUtil.hasField(testInputs,testIndex));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void isValidNumber_correctly() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String test \u003d \"1.1\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertTrue(ParserUtil.isValidNumber(test));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void isValidNumber_too_small() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String test \u003d \"-1.1\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertFalse(ParserUtil.isValidNumber(test));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void isValidInteger_correctly() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String test \u003d \"1\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertTrue(ParserUtil.isValidInteger(test));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void isValidInteger_too_large() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String test \u003d \"1000000\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertFalse(ParserUtil.isValidInteger(test));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void isValidInteger_is_double() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String test \u003d \"1.1\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertFalse(ParserUtil.isValidInteger(test));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    void getTimeZone() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        TimeZone expected \u003d TimeZone.getTimeZone(\"GMT+8:00\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(ParserUtil.getTimeZone(),expected);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 154
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/ProfitCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class ProfitCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter_only_command() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"profit\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ProfitCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter_not_all() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"profit\",\"-t1\",\"1/12/2019\",\"-t2\",\"2/12/2019\",\"test\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ProfitCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 34
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/PromotionCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class PromotionCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_parse_correctly() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"profit\",\"-delete\",\"1\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ProfitCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"profit\",\"test\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ProfitCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 35
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/ReminderCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class ReminderCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_parse_correctly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"reminder\",\"-s\",\"20\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ReminderCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to parse reminder correctly\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"reminder\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ReminderCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_parameter() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"reminder\", \"-x\", \"field\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ReminderCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid parameter\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_integer() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"reminder\", \"-d\", \"1.1\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ReminderCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid integer\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_NUMBER, e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_empty_field() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"reminder\", \"-s\", \"-d\"};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ReminderCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect empty field\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.EMPTY_FIELD, e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_repetitive_parameter() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"reminder\", \"-s\", \"1\", \"-s\", \"2\"};"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new ReminderCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect repetitive parameter\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.REPETITIVE_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 78
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/SoldCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class SoldCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_parse_correctly() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"sold\",\"test\",\"-q\",\"20\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new SoldCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to parse sold correctly\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"sold\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new SoldCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_parameter() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"sold\", \"test\", \"-x\", \"field\"};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new SoldCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid parameter\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_name() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"sold\", \" \", \"-q\", \"field\"};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new SoldCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect empty name\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_NAME, e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_empty_field() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"sold\", \"test\", \"-q\"};"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new SoldCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect empty field\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.EMPTY_FIELD, e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_repetitive_parameter() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"sold\", \"test\", \"-q\", \"1\", \"-q\", \"2\"};"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new SoldCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect repetitive parameter\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.REPETITIVE_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 79
    }
  },
  {
    "path": "src/test/java/cube/logic/parser/UpdateCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "package cube.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_parse_correctly() throws ParserException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"update\",\"test\",\"-t\",\"test\",\"-p\",\"1.1\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                \"-s\",\"100\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        Food expected \u003d new Food(\"test\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expected.setType(\"test\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expected.setPrice(1.1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        expected.setStock(100);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        UpdateCommandParser test \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        test.parse(inputs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(test.getTempFood(), expected);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_not_enough_parameter() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"update\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new UpdateCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect not enough parameter\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.NOT_ENOUGH_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_parameter() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"update\", \"test\", \"-x\", \"field\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new UpdateCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect invalid parameter\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_invalid_name() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"update\", \" \", \"-t\", \"field\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new UpdateCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect empty name\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.INVALID_NAME, e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_empty_field() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"update\", \"test\", \"-p\"};"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new UpdateCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect empty field\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.EMPTY_FIELD, e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void execute_repetitive_parameter() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        String[] inputs \u003d {\"update\", \"test\", \"-t\", \"A\", \"-t\", \"A\"};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            new UpdateCommandParser().parse(inputs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            fail(\"Fail to detect repetitive parameter\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "            assertEquals(ParserErrorMessage.REPETITIVE_PARAMETER, e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZKathrynx": 82
    }
  },
  {
    "path": "src/test/java/cube/model/food/FoodTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "//@@author LL-Pengfei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * FoodTest.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * Test whether the Food Class is functioning as expected."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "package cube.model.food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import cube.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " * This class tests whether the Food Class is functioning as expected."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "public class FoodTest extends Food {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * The default constructor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @param name The food name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public FoodTest(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * This method tests the constructor of the Food Class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public void testConstructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final String food1Name \u003d \"Food1NameWithoutSpace\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final String food2Name \u003d \"Food2 Name With Spaces\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final Food food1 \u003d new Food(food1Name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final Food food2 \u003d new Food(food2Name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final int food1Revenue \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final int food2Revenue \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final String food1Type \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final String food2Type \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food1Price \u003d 0.0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food2Price \u003d 0.0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food1Cost \u003d 0.0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food2Cost \u003d 0.0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final int food1Stock \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final int food2Stock \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food1Name, food1.getName(), \"Food 1 name is wrong.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food1Revenue, food1.getFoodRevenue(), \"Food1 revenue is not initialized properly.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food1Type, food1.getType(), \"Food1 Type is not initialized properly.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food1Price, food1.getPrice(), \"Food1 Price is not initialized properly.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food1Cost, food1.getCost(), \"Food1 Cost is not initialized properly.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food1Stock, food1.getStock(), \"Food1 Stock is not initialized properly.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food2Name, food2.getName(), \"Food 2 name is wrong.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food2Revenue, food2.getFoodRevenue(), \"Food2 revenue is not initialized properly.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food2Type, food2.getType(), \"Food2 Type is not initialized properly.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food2Price, food2.getPrice(), \"Food2 Price is not initialized properly.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food2Cost, food2.getCost(), \"Food2 Cost is not initialized properly.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food2Stock, food2.getStock(), \"Food2 Stock is not initialized properly.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //try some illegal inputs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Food food3 \u003d new Food(food1Name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        fail(\"Constructor allows duplicate food names.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Food food4 \u003d new Food(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        fail(\"Constructor allows null food name.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * This method tests the Setters and Getters for food variables."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     * @throws CubeException if test fails."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public void testSettersAndGetters() throws CubeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final Food food1 \u003d new Food(\"Food1NameWithoutSpaces\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final Food food2 \u003d new Food(\"Food 2 Name With Spaces\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final Food food3 \u003d new Food(\"Food3NameWithoutSpaces\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final Food food4 \u003d new Food(\"Food 4 Name With Spaces\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //testing setters and getters for type of the food."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        String food12Type \u003d \"TypeA\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        String food34Type \u003d \"TypeB\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food1.setType(food12Type);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food2.setType(food12Type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food3.setType(food34Type);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food4.setType(food34Type);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertSame(\"TypeA\", food1.getType(), \"Fail to set Food Type for food1.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertSame(\"TypeA\", food2.getType(), \"Fail to set Food Type for food2.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertSame(\"TypeB\", food3.getType(), \"Fail to set Food Type for food3.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertSame(\"TypeB\", food4.getType(), \"Fail to set Food Type for food4.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final String food1Type \u003d food1.getType();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final String food2Type \u003d food2.getType();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final String food3Type \u003d food3.getType();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final String food4Type \u003d food4.getType();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertSame(food12Type, food1Type, \"Fail to get Food Type for food1.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertSame(food12Type, food2Type, \"Fail to get Food Type for food2.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertSame(food34Type, food3Type, \"Fail to get Food Type for food3.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertSame(food34Type, food4Type, \"Fail to get Food Type for food4.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //try some illegal inputs"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        String illegalType \u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food1.setType(illegalType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        fail(\"Setters for Type allows null type.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //testing setters and getters for price of the food."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double food12Price \u003d 30.00;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double food34Price \u003d 50.00;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food1.setPrice(food12Price);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food2.setPrice(food12Price);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food3.setPrice(food34Price);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food4.setPrice(food34Price);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Price, food1.getPrice(), \"Fail to set Food Price for food1.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Price, food2.getPrice(), \"Fail to set Food Price for food2.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Price, food3.getPrice(), \"Fail to set Food Price for food3.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Price, food4.getPrice(), \"Fail to set Food Price for food4.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food1Price \u003d food1.getPrice();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food2Price \u003d food2.getPrice();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food3Price \u003d food3.getPrice();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food4Price \u003d food4.getPrice();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Price, food1Price, \"Fail to get Food Price for food1.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Price, food2Price, \"Fail to get Food Price for food2.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Price, food3Price, \"Fail to get Food Price for food3.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Price, food4Price, \"Fail to get Food Price for food4.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //try some illegal inputs"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double illegalPrice \u003d -1;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food1.setPrice(illegalPrice);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        fail(\"Setters for Price allows negative inputs.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //testing setters and getters for Expiry Date of the Food."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Date food12Date \u003d ParserUtil.parseStringToDate(\"12/11/2019\"); //near future"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Date food34Date \u003d ParserUtil.parseStringToDate(\"12/11/2025\"); //far future"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food1.setExpiryDate(food12Date);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food2.setExpiryDate(food12Date);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food3.setExpiryDate(food34Date);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food4.setExpiryDate(food34Date);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Date, food1.getExpiryDate(), \"Fail to set Expiry Date for food1.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Date, food2.getExpiryDate(), \"Fail to set Expiry Date for food2.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Date, food3.getExpiryDate(), \"Fail to set Expiry Date for food3.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Date, food4.getExpiryDate(), \"Fail to set Expiry Date for food4.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final Date food1Date \u003d food1.getExpiryDate();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final Date food2Date \u003d food2.getExpiryDate();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final Date food3Date \u003d food3.getExpiryDate();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final Date food4Date \u003d food4.getExpiryDate();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food1Date.compareTo(food12Date), 0, \"Fail to get Food Expiry Date for food1.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food2Date.compareTo(food12Date), 0, \"Fail to get Food Expiry Date for food2.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food3Date.compareTo(food34Date), 0, \"Fail to get Food Expiry Date for food3.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food4Date.compareTo(food34Date), 0, \"Fail to get Food Expiry Date for food4.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //try some illegal inputs"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Date illegalExpiryDate \u003d ParserUtil.parseStringToDate(\"23/03/1998\"); //in the past"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food1.setExpiryDate(illegalExpiryDate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        fail(\"Setters for Expiry Date allows Date in the past.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //testing setters and getters for Revenue of the Food."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double food12Revenue \u003d 100.00;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double food34Revenue \u003d 200.00;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food1.setFoodRevenue(food12Revenue);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food2.setFoodRevenue(food12Revenue);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food3.setFoodRevenue(food34Revenue);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food4.setFoodRevenue(food34Revenue);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Revenue, food1.getFoodRevenue(), \"Fail to set Food Revenue for food1.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Revenue, food2.getFoodRevenue(), \"Fail to set Food Revenue for food2.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Revenue, food3.getFoodRevenue(), \"Fail to set Food Revenue for food3.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Revenue, food4.getFoodRevenue(), \"Fail to set Food Revenue for food4.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food1Revenue \u003d food1.getFoodRevenue();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food2Revenue \u003d food2.getFoodRevenue();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food3Revenue \u003d food3.getFoodRevenue();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food4Revenue \u003d food4.getFoodRevenue();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Revenue, food1Revenue, \"Fail to get Food Revenue for food1.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Revenue, food2Revenue, \"Fail to get Food Revenue for food2.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Revenue, food3Revenue, \"Fail to get Food Revenue for food3.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Revenue, food4Revenue, \"Fail to get Food Revenue for food4.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //try some illegal inputs"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double illegalRevenue \u003d -1.00;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food1.setFoodRevenue(illegalRevenue);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        fail(\"Setters for Food Revenue allows negative revenue.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //testing setters and getters for Stock of the Food."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        int food12Stock \u003d 50; //high"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        int food34Stock \u003d 5; //low"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food1.setStock(food12Stock);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food2.setStock(food12Stock);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food3.setStock(food34Stock);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food4.setStock(food34Stock);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Stock, food1.getStock(), \"Fail to set Food Stock for food1.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Stock, food2.getStock(), \"Fail to set Food Stock for food2.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Stock, food3.getStock(), \"Fail to set Food Stock for food3.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Stock, food4.getStock(), \"Fail to set Food Stock for food4.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final int food1Stock \u003d food1.getStock();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final int food2Stock \u003d food2.getStock();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final int food3Stock \u003d food3.getStock();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final int food4Stock \u003d food4.getStock();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Stock, food1Stock, \"Fail to get Food Stock for food1.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Stock, food2Stock, \"Fail to get Food Stock for food2.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Stock, food3Stock, \"Fail to get Food Stock for food3.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Stock, food4Stock, \"Fail to get Food Stock for food4.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //try some illegal inputs"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        int illegalStock \u003d -5;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food1.setStock(illegalStock);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        fail(\"Setters for Food Stock allows negative stock.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //testing setters and getters for Cost of the Food."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double food12Cost \u003d 15.00;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double food34Cost \u003d 25.00;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food1.setCost(food12Cost);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food2.setCost(food12Cost);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food3.setCost(food34Cost);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food4.setCost(food34Cost);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Cost, food1.getCost(), \"Fail to set Food Cost for food1.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Cost, food2.getCost(), \"Fail to set Food Cost for food2.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Cost, food3.getCost(), \"Fail to set Food Cost for food3.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Cost, food4.getCost(), \"Fail to set Food Cost for food4.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food1Cost \u003d food1.getCost();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food2Cost \u003d food2.getCost();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food3Cost \u003d food3.getCost();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        final double food4Cost \u003d food4.getCost();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Cost, food1Cost, \"Fail to get Food Cost for food1.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food12Cost, food2Cost, \"Fail to get Food Cost for food2.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Cost, food3Cost, \"Fail to get Food Cost for food3.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(food34Cost, food4Cost, \"Fail to get Food Cost for food4.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //try some illegal inputs"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        double illegalCost \u003d -1.00;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        food1.setCost(illegalCost);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        fail(\"Setters for Food Cost allows negative cost.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        //testing exists, i.e. the function to check if the food already exists in the inventory."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        String food5Name \u003d \"foodNameExistsCheck [arbitrary name]\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        Food food5 \u003d new Food(food5Name);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(exists(food5Name), true, \"Exists function that checking on whether a food\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                + \"already exists in the inventory is incorrect.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        String arbitraryRandomName \u003d \"23i54c283hjsqecwr3mudfs\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(exists(arbitraryRandomName), false, \"Exists function that checking on\""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "                + \"whether a food already exists in the inventory is incorrect.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LL-Pengfei": 252
    }
  },
  {
    "path": "src/test/java/cube/model/food/FoodUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.foodutil.SortByExpiry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.foodutil.SortByName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.foodutil.SortByPrice;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "import cube.model.food.foodutil.SortByStock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class FoodUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    private class FoodStub extends Food {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int stock;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        double price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        public FoodStub(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        public FoodStub(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        public FoodStub(int stock) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            this.stock \u003d stock;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        public FoodStub(double price) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        public FoodStub(Date date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        public String getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        public int getStock() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            return stock;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        public double getPrice() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            return price;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        public Date getExpiryDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void sortByNameTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodStub f1 \u003d new FoodStub(\"a\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodStub f2 \u003d new FoodStub(\"b\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        SortByName sort \u003d new SortByName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int smaller \u003d sort.compare(f1, f2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int larger \u003d sort.compare(f2, f1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int equal \u003d sort.compare(f1, f1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(smaller, -1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(larger, 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(equal, 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertFalse(sort.compare(f1,f2) \u003d\u003d 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void sortByStockTest() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodStub f1 \u003d new FoodStub(-1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodStub f2 \u003d new FoodStub(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        SortByStock sort \u003d new SortByStock();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int smaller \u003d sort.compare(f1, f2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int larger \u003d sort.compare(f2, f1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int equal \u003d sort.compare(f1, f1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(smaller, -1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(larger, 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(equal, 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertFalse(sort.compare(f1, f2) \u003d\u003d 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void sortByPriceTest() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodStub f1 \u003d new FoodStub(-1d);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodStub f2 \u003d new FoodStub(1d);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        SortByPrice sort \u003d new SortByPrice();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int smaller \u003d sort.compare(f1, f2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int larger \u003d sort.compare(f2, f1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int equal \u003d sort.compare(f1, f1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(smaller, -1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(larger, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(equal, 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertFalse(sort.compare(f1, f2) \u003d\u003d 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public void sortByDateTest() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodStub f1 \u003d new FoodStub(new Date(2019, 10, 30));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodStub f2 \u003d new FoodStub(new Date(2019, 11, 30));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        FoodStub f3 \u003d new FoodStub();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        SortByExpiry sort \u003d new SortByExpiry();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int smaller \u003d sort.compare(f1, f2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int equal \u003d sort.compare(f1, f1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int larger \u003d sort.compare(f2, f1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final int nullSmaller \u003d sort.compare(f1, f3);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final int nullEqual \u003d sort.compare(f3, f3);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final int nullLarger \u003d sort.compare(f3, f1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(smaller, -1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(larger, 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(equal, 0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(nullSmaller, -1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(nullLarger, 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(nullEqual, 0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertFalse(sort.compare(f1, f2) \u003d\u003d 0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertFalse(sort.compare(f1, f3) \u003d\u003d 0);        "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 108,
      "ZKathrynx": 18
    }
  },
  {
    "path": "src/test/java/cube/model/sale/SaleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.model.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import static cube.testutil.Assert.assertThrowEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class SaleTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public void compareToTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Sale s1 \u003d new Sale(\"b\", 0, 0, 0, new Date(2019, 8, 8));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Sale s2 \u003d new Sale(\"a\", 0, 0, 0, new Date(2019, 8, 8));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Sale s3 \u003d new Sale(\"a\", 0,0,0, new Date(2019, 9, 9));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int dateSmaller \u003d s2.compareTo(s3);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int dateLarger \u003d s3.compareTo(s3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        int dateEqual \u003d s3.compareTo(s3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final int nameSmaller \u003d s2.compareTo(s1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final int dateLargerNameSmaller \u003d s3.compareTo(s1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final int nameEqual \u003d s1.compareTo(s1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final int nameLarger \u003d s1.compareTo(s2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(dateSmaller, -1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(dateEqual, 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(dateLarger, 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(nameSmaller, -1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(nameEqual, 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(nameLarger, 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        assertEquals(dateLargerNameSmaller, 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 28,
      "ZKathrynx": 4
    }
  },
  {
    "path": "src/test/java/cube/storage/ProfitStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Testing for ProfitStorage utilities."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class ProfitStorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Test Getters/Setters for ProfitStorage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void profit_storage_test() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        double testValue \u003d 888.88;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ProfitStorage.setAnnualProfit(testValue);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ProfitStorage.setAnnualRevenue(testValue);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(ProfitStorage.getAnnualProfit(), testValue);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(ProfitStorage.getAnnualRevenue(), testValue);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 25,
      "ZKathrynx": 2
    }
  },
  {
    "path": "src/test/java/cube/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Testing for StorageManager utilities."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.LogConfig;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.config.UiConfig;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.testutil.SampleUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static StorageManager storageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Initializes variables used for the tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void initVariables() throws ParserException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test Getters/Setters for ConfigStorage within StorageManager."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void config_storage_test() throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        final ConfigStorage configStorage \u003d new ConfigStorage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        // Sets UiConfig variables: WindowHeight\u003d888.88, WindowWidth\u003d888.88"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        UiConfig uiConfig \u003d new UiConfig();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        uiConfig.setWindowHeight(888.88);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        uiConfig.setWindowWidth(888.88);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        // Sets LogConfig variables: LogLevel: OFF, MaxFileSize: 8MB, MaxFileCount: 8"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        LogConfig logConfig \u003d new LogConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logConfig.setMaxFileSizeMB(8);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logConfig.setCurrentLogLevel(\"OFF\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        logConfig.setMaxFileCount(8);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        configStorage.setUiConfig(uiConfig);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        configStorage.setLogConfig(logConfig);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storageManager.setConfig(configStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(storageManager.getConfig().getUiConfig().getWindowHeight(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                uiConfig.getWindowHeight());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(storageManager.getConfig().getUiConfig().getWindowWidth(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                uiConfig.getWindowWidth());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(storageManager.getConfig().getLogConfig().getCurrentLogLevel(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                logConfig.getCurrentLogLevel());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(storageManager.getConfig().getLogConfig().getMaxFileCount(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                logConfig.getMaxFileCount());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(storageManager.getConfig().getLogConfig().getMaxFileSizeBytes(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                logConfig.getMaxFileSizeBytes());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test Getters/Setters for FoodStorage within StorageManager."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void food_storage_test() throws ParserException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        // Generates test foodlist of size 5."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        FoodList foodList \u003d SampleUtil.generateSampleData(5);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storageManager.storeFoodList(foodList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(storageManager.getFoodList().toString(), foodList.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 65,
      "ZKathrynx": 12
    }
  },
  {
    "path": "src/test/java/cube/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tygq13"
        },
        "content": "//credit: address-book level 3"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tygq13"
        },
        "content": "package cube.testutil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tygq13"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tygq13"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tygq13"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tygq13"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tygq13"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tygq13"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    public static void assertThrowEquals(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tygq13"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tygq13"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tygq13"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tygq13"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tygq13": 17,
      "ZKathrynx": 1
    }
  },
  {
    "path": "src/test/java/cube/testutil/SampleUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class SampleUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Generates some sample Food Products for testing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * @param numOfProducts Number of sample Food Products to store in Foodlist."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @return Generated FoodList of size NUM_OF_PRODUCTS"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "    public static FoodList generateSampleData(int numOfProducts) throws ParserException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        FoodList foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfProducts; i +\u003d 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            int testFoodIndex \u003d i + 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            Food testFood \u003d new Food(\"Food_\" + testFoodIndex);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            testFood.setType(\"food\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            testFood.setPrice(testFoodIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            testFood.setCost(i);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            testFood.setStock(5000);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            testFood.setExpiryDate(ParserUtil.parseStringToDate(\"31/12/2020\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            foodList.add(testFood);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 30,
      "ZKathrynx": 3
    }
  },
  {
    "path": "src/test/java/cube/testutil/StorageUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class StorageUtil {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Boolean check to see if file exists or not."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * @return true if data file exists, false if not found."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static boolean checkFileAvailable(String fileName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String fileFullPath \u003d \"data\" + File.separator + fileName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        File file \u003d new File(fileFullPath);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Deletes the file with the specified filename."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void deleteFile(String fileName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String fileFullPath \u003d \"data\" + File.separator + fileName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        File file \u003d new File(fileFullPath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 29
    }
  },
  {
    "path": "src/test/java/cube/ui/UiTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "package cube.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "    //nothing much to be tested here"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LL-Pengfei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LL-Pengfei": 13
    }
  },
  {
    "path": "src/test/java/cube/util/FileUtilCSVTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Testing for FileUtilCSV utilities."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.model.food.FoodList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.testutil.SampleUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.testutil.StorageUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.exception.CubeUtilException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.util.exception.UtilErrorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static cube.testutil.Assert.assertThrowEquals;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class FileUtilCSVTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static FoodList foodList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static String fileName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static FileUtilCSV\u003cFood\u003e csvstorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Initializes variables used for the tests."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void initVariables() throws ParserException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        foodList \u003d SampleUtil.generateSampleData(5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        fileName \u003d \"test_fileutil.csv\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Resets FileUtilCSV for every test run."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void clearVariables() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        csvstorage \u003d new FileUtilCSV\u003c\u003e(\"data\", fileName, new Food());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Deletes all the files used during this test."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void deleteTestFiles() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        StorageUtil.deleteFile(fileName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        StorageUtil.deleteFile(\"test_load_non_existing_file.csv\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test exporting a CSV file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void save_file() throws CubeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        csvstorage.save(foodList.getFoodList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertTrue(StorageUtil.checkFileAvailable(fileName));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test importing a CSV file with sample values."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void load_file() throws CubeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ArrayList\u003cFood\u003e resultFoodList \u003d csvstorage.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertTrue(StorageUtil.checkFileAvailable(fileName));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(resultFoodList.toString(), foodList.getFoodList().toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test importing a non existent CSV file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(3)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void load_non_existing_file() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String fileName \u003d \"test_load_non_existing_file.csv\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        csvstorage \u003d new FileUtilCSV\u003c\u003e(\"data\", fileName, new Food());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertThrowEquals(CubeUtilException.class, UtilErrorMessage.READ_ERROR + csvstorage.getFileFullPath(), () -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            csvstorage.load();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kuromono": 96,
      "ZKathrynx": 1
    }
  },
  {
    "path": "src/test/java/cube/util/FileUtilJsonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": " * Testing for FileUtilJson utilities."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": " * @author kuromono"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package cube.util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.exception.CubeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.testutil.SampleUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import cube.testutil.StorageUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class FileUtilJsonTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static String filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static String fileName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private static FileUtilJson\u003cStorageManager\u003e storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Initializes variables used for the tests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void initVariables() throws ParserException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storageManager.storeFoodList(SampleUtil.generateSampleData(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        filePath \u003d \"data\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        fileName \u003d \"test_fileutil.json\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Resets FileUtilJson for every test run."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void clearVariables() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storage \u003d new FileUtilJson\u003c\u003e(filePath, fileName, storageManager);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Deletes all the files used during this test."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void deleteTestFiles() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        StorageUtil.deleteFile(fileName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test saving a JSON file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void save_file() throws CubeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storage.save(storageManager);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertTrue(StorageUtil.checkFileAvailable(fileName));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     * Test loading a JSON file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void load_file() throws CubeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        StorageManager resultStorageManager \u003d storage.load();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertTrue(StorageUtil.checkFileAvailable(fileName));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(resultStorageManager.getFoodList().toString(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                storageManager.getFoodList().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(resultStorageManager.getConfig().getUiConfig().toString(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                storageManager.getConfig().getUiConfig().toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(resultStorageManager.getConfig().getLogConfig().toString(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                storageManager.getConfig().getLogConfig().toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        assertEquals(resultStorageManager.getPromotionList().getPromotionList().toString(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                storageManager.getPromotionList().getPromotionList().toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "     * Optional test : load/save performance by calculating elapsed time."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Order(3)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void performance_test() throws CubeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storageManager.storeFoodList(SampleUtil.generateSampleData(5));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        System.out.println(String.format(\"--- Testing performance for %1$s products ---\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                storageManager.getFoodList().size()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        testSaveTime();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        testLoadTime();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storageManager.storeFoodList(SampleUtil.generateSampleData(50));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        System.out.println(String.format(\"--- Testing performance for %1$s products ---\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                storageManager.getFoodList().size()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        testSaveTime();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        testLoadTime();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storageManager.storeFoodList(SampleUtil.generateSampleData(500));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "        System.out.println(String.format(\"--- Testing performance for %1$s products ---\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZKathrynx"
        },
        "content": "                storageManager.getFoodList().size()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        testSaveTime();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        testLoadTime();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void testSaveTime() throws CubeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        long startTime \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storage.save(storageManager);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        long endTime \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(\"Elapsed Save Time : \" + (endTime - startTime) + \" ms\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    private void testLoadTime() throws CubeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        long startTime \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        storageManager \u003d storage.load();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        long endTime \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(\"Elapsed Load Time : \" + (endTime - startTime) + \" ms\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 109,
      "ZKathrynx": 16
    }
  }
]
