[
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is to handle \"add\" command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a class for command of ADD, which add task to the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param content the command line String without the first ADD command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(String content) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Task temp \u003d Parser.addCommand(content);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (content.contains(\"/after\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                String preconditionString \u003d content.split(\"/after\", 2)[1].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                temp.setDescription(content.split(\"/after\", 2)[0].trim().split(\" \")[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                temp.addPrecondition(preconditionString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.add(temp);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            storage.storeTaskList(tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.print(\"Got it. I\u0027ve added this task: \\n\" + tasks.get(tasks.size() - 1)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "yuyanglin28": 3
    }
  },
  {
    "path": "src/main/java/commands/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is to handle \"bye\" command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a class for command BYE, which exit the Duke assistant."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.print(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "yuyanglin28": 2
    }
  },
  {
    "path": "src/main/java/commands/CheckAnomaliesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Last;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Period;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "//@@author yuyanglin28"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class CheckAnomaliesCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private String memberName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public CheckAnomaliesCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.memberName \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public CheckAnomaliesCommand(String memberName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.memberName \u003d memberName.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * Checks for scheduling clashes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e scheTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (memberName \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            msg \u003d \"Here is the whole team time crash\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            temp \u003d (ArrayList\u003cTask\u003e) tasks.clone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                if (members.get(i).getName().equals(memberName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    msg \u003d \"Here is \" + memberName + \"\u0027s time crash\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    temp \u003d (ArrayList\u003cTask\u003e) members.get(i).getTasksInCharge().clone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        temp \u003d removeNoTimeTask(temp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        scheTasks \u003d sortByDate(temp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c scheTasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (scheTasks.get(i) instanceof Period \u0026\u0026 scheTasks.get(i + 1) instanceof Period) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                Period p1 \u003d (Period) scheTasks.get(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                Period p2 \u003d (Period) scheTasks.get(i + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                if (p1.getEnd().compareTo(p2.getStart()) \u003e 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    output +\u003d \"crash between: \" + p1.toString() + \" \u0026 \" + p2.toString() + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else if (scheTasks.get(i) instanceof Period \u0026\u0026 scheTasks.get(i + 1) instanceof Event) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                Period p1 \u003d (Period) scheTasks.get(i);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                Event e2 \u003d (Event) scheTasks.get(i + 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                if (p1.getStart().compareTo(e2.getTime()) \u003d\u003d 0 || p1.getEnd().compareTo(e2.getTime()) \u003e 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    output +\u003d \"crash between: \" + p1.toString() + \" \u0026 \" + e2.toString() + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else if (scheTasks.get(i) instanceof Event \u0026\u0026 scheTasks.get(i + 1) instanceof Period) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                Event e1 \u003d (Event) scheTasks.get(i);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                Period p2 \u003d (Period) scheTasks.get(i + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                if (p2.getStart().compareTo(e1.getTime()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    output +\u003d \"crash between: \" + e1.toString() + \" \u0026 \" + p2.toString() + \"\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else if (scheTasks.get(i) instanceof Event \u0026\u0026 scheTasks.get(i + 1) instanceof Event) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                Event e1 \u003d (Event) scheTasks.get(i);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                Event e2 \u003d (Event) scheTasks.get(i + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                if (e1.getTime().compareTo(e2.getTime()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    output +\u003d \"crash between: \" + e1.toString() + \" \u0026 \" + e2.toString() + \"\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (!output.equals(\"\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            Ui.print(msg + output);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            Ui.print(\"no time crash\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private ArrayList\u003cTask\u003e removeNoTimeTask(ArrayList\u003cTask\u003e toFilter) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cInteger\u003e toDelete \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        //remove all without dates (ToDos and Lasts)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c toFilter.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (toFilter.get(i).getClass().equals(ToDo.class)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                toDelete.add(i);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (toFilter.get(i).getClass().equals(Last.class)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                toDelete.add(i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (toFilter.get(i).getClass().equals(Deadline.class)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                toDelete.add(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d toDelete.size() - 1; i \u003e\u003d 0; ) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            toFilter.remove((int) toDelete.get(i));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            i--;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return toFilter;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private ArrayList\u003cTask\u003e sortByDate(ArrayList\u003cTask\u003e toSort) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        toSort \u003d removeNoTimeTask(toSort);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        int size \u003d toSort.size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            Date earliest \u003d new Date(Long.MAX_VALUE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            int earliestIndex \u003d -1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            for (int j \u003d 0; j \u003c toSort.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                if (toSort.get(j).getClass().equals(Event.class)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    Event temp \u003d (Event) toSort.get(j);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    if (temp.getTime().before(earliest)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        earliest \u003d temp.getTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        earliestIndex \u003d j;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                } else if (toSort.get(j).getClass().equals(Period.class)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    Period temp \u003d (Period) toSort.get(j);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    if (temp.getStart().before(earliest)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        earliest \u003d temp.getStart();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        earliestIndex \u003d j;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            sorted.add(toSort.get(earliestIndex));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            toSort.remove(earliestIndex);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return sorted;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 6,
      "-": 9,
      "yuyanglin28": 138
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * a general class for Command, to be extended"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The method to execute the corresponding command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks the tasklist ArrayList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the object to manage storage issues"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if anything wrong happend"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public abstract void execute(ArrayList\u003cTask\u003e tasks,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                                 ArrayList\u003cMember\u003e members, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * simple return if the command is bye."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return if the command is bye"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "yuyanglin28": 3
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import core.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is to handle \"delete\" command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * This is a class for command DELETE, which remove one task from the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param line the serial number in the command line after DELETE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public DeleteCommand(String line) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            int order \u003d Integer.parseInt(line);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                members.get(i).getTasksInCharge().remove(tasks.get(order - 1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            Ui.print(\"Noted. I\u0027ve removed this task: \\n\" + tasks.remove(order - 1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                members.get(i).updateIndex();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            storage.storeTaskList(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            storage.storeMemberList(members);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(\"Not a valid task number\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "yuyanglin28": 34
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is to handle \"done\" command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a class for command DONE, which mark one task in the task list as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line the serial number of task to be marked as done"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(String line) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            int order \u003d Integer.parseInt(line);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.get(order - 1).markAsDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            storage.storeTaskList(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.print(\"Nice! I\u0027ve marked this task as done: \\n\" + tasks.get(order - 1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.print(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Not a valid task number\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 1,
      "chenyuheng": 1,
      "-": 39,
      "yuyanglin28": 3
    }
  },
  {
    "path": "src/main/java/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is to handle \"find\" command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a class for command FIND, which search a keyword from the task list and print all results."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line the keyword to be searched"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String line) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.line \u003d line.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String output \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        int resultCount \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tasks.get(i).getDescription().contains(line)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                output +\u003d \"\\n\" + (resultCount++) + \".\" + tasks.get(i);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.print(output);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "yuyanglin28": 2
    }
  },
  {
    "path": "src/main/java/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AugGust"
        },
        "content": " * This class is to handle \"add\" command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AugGust"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AugGust"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * This is a class for command of HELP, which displays a list of usable commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Ui.print(\"Available Commands\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"1. add\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                + \"2. find\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"3. done\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                + \"4. delete\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                + \"5. snooze\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                + \"6. recurring\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                + \"7. remove\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"8. reminder\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"9. member\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"10. link\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"11. unlink\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"12. list\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"13. schedule\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"14. check\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"15. bye\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AugGust": 42,
      "yuyanglin28": 5
    }
  },
  {
    "path": "src/main/java/commands/LinkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class LinkCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * This is a class for command LINK, which links a task based on list index to a member\u0027s name using /to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @param line list index to member name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public LinkCommand(String line) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            String[] arrOfStr \u003d line.split(\" /to \",2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            int indexInList \u003d Integer.parseInt(arrOfStr[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            String memberName \u003d arrOfStr[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                if (members.get(i).getName().equals(memberName)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    ArrayList\u003cMember\u003e pics \u003d tasks.get(indexInList - 1).getPics();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    pics.add(members.get(i));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    tasks.get(indexInList - 1).setPics(pics);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    members.get(i).setTask(indexInList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    storage.storeMemberList(members);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    Ui.print(\"Task \" + indexInList + \" is successfully added to \" + memberName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(\"Member not found or invalid task index\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 39,
      "yuyanglin28": 12
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "//@@ author yuyanglin28"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is to handle \"list\" command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private String option;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private String memberName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private boolean showNopicTask \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private boolean showFreeMember \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param line this is the input of user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public ListCommand(String line) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String[] arrOfStr \u003d line.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        option \u003d arrOfStr[0].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (option.equals(\"tasks\") \u0026\u0026 arrOfStr.length \u003e 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (arrOfStr[1].trim().equals(\"nopic\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                showNopicTask \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else if (option.equals(\"members\") \u0026\u0026 arrOfStr.length \u003e 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (arrOfStr[1].trim().equals(\"free\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                showFreeMember \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else if (option.equals(\"task\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            taskIndex \u003d Integer.parseInt(arrOfStr[1].trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else if (option.equals(\"member\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            memberName \u003d arrOfStr[1].trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String output \u003d \"Here are the \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (option.equals(\"tasks\") \u0026\u0026 showNopicTask \u003d\u003d false) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            output +\u003d \"task(s) in your list:\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            for (int i \u003d 0;i \u003c tasks.size();i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                output +\u003d \"\\n\" + (i + 1) + \".\" + tasks.get(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else if (option.equals(\"members\") \u0026\u0026 showFreeMember \u003d\u003d false) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            output +\u003d \"member(s) in your team:\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                output +\u003d \"\\n\" + (i + 1) + \".\" + members.get(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (showFreeMember) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            output +\u003d \"free member(s): \\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                if (members.get(i).getTasksInCharge().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    output +\u003d (i + 1) + \".\" + members.get(i).getName() + \" is free.\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (count \u003e 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                output +\u003d \"There are/is \" + count + \" free member(s).\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                output \u003d \"No one is free\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else if (showNopicTask) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            output +\u003d \"task(s) haven\u0027t been assigned: \\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                if (tasks.get(i).getPics().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    output +\u003d (i + 1) + \".\" + tasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (count \u003e 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                output +\u003d \"There are/is \" + count + \" task(s) haven\u0027t been assigned.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                output \u003d \"All tasks have assigned to someone\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (option.equals(\"member\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                int memberIndex \u003d 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    if (members.get(i).getName().equals(memberName)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        memberIndex \u003d i + 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                ArrayList\u003cTask\u003e tasksInCharge \u003d members.get(memberIndex - 1).getTasksInCharge();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                ArrayList\u003cInteger\u003e tasksInChargeIndex \u003d members.get(memberIndex - 1).getTasksInChargeIndex();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                if (tasksInCharge.size() \u003e 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    output +\u003d \"task(s) of member \";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    output +\u003d memberIndex + \". \" + members.get(memberIndex - 1).getName();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    for (int i \u003d 0; i \u003c tasksInCharge.size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        output +\u003d \"\\n\" + tasksInChargeIndex.get(i) + \". \" + tasksInCharge.get(i);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    output \u003d \"member \" + memberIndex + \". \" + members.get(memberIndex - 1).getName();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    output +\u003d \" is free.\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                throw new DukeException(\"Member not found.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else if (option.equals(\"task\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            output +\u003d \"persons in charge of task \" + taskIndex + \".\" + tasks.get(taskIndex - 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (tasks.get(taskIndex - 1).getPics().size() \u003e 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.get(taskIndex - 1).getPics().size(); i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    int memberIndex \u003d members.indexOf(tasks.get(taskIndex - 1).getPics().get(i)) + 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    output +\u003d \"\\n\" + memberIndex + \".\" + members.get(memberIndex - 1).getName();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                output \u003d taskIndex + \".\" + tasks.get(taskIndex - 1) + \" hasn\u0027t been assigned.\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        Ui.print(output);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "yuyanglin28": 129
    }
  },
  {
    "path": "src/main/java/commands/MemberAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": " * This class is to handle \"add\" command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class MemberAddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * This is a class for command of ADD, which add task to the task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param name the command line String without the first ADD command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public MemberAddCommand(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage)  {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        Member newMember \u003d new Member(this.name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        members.add(newMember);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        storage.storeMemberList(members);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        Ui.print(\"Nice, I\u0027ve added \" + name + \" to your team.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                + \"Now you have \" + members.size() + \" members.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 39
    }
  },
  {
    "path": "src/main/java/commands/MemberDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class MemberDeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * This is a class for command UNLINK, which unlinks a task based on list index to a member\u0027s name using /from"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @param line list index to member name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public MemberDeleteCommand(String line) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            String memberName \u003d line;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                if (members.get(i).getName().equals(memberName)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    for (int j \u003d 0; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        ArrayList\u003cMember\u003e pics \u003d tasks.get(j).getPics();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        pics.remove(members.get(i));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        tasks.get(j).setPics(pics);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    members.remove(i);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    storage.storeMemberList(members);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    Ui.print(\"Member: \" + memberName + \" has been successfully removed from the list of members\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            throw new DukeException(\"Member not found\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 42,
      "yuyanglin28": 7
    }
  },
  {
    "path": "src/main/java/commands/RecurringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a class for handling recurring events command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " *  @author Justin Chia"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecurringCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected int numWeeks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line is the task in which to convert to recurring, while numWeeks describe num of weeks to recur"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @author Justin Chia"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public RecurringCommand(String line) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splites \u003d line.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d Integer.parseInt(splites[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.numWeeks \u003d Integer.parseInt(splites[1]) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Event temp \u003d (Event) tasks.get(index - 1); //TODO Generalise implementation of recurrence"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Date originalDate \u003d temp.getAt();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            String originalDescription \u003d temp.getDescription();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            calendar.setTime(originalDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d numWeeks; i +\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                calendar.add(Calendar.DATE, 7);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Event newEvent \u003d new Event(originalDescription, calendar.getTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                newEvent.setRecurring(numWeeks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                tasks.add(newEvent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.get(index - 1).setRecurring(numWeeks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            storage.storeTaskList(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Ui.print(\"The task \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                    + tasks.get(index - 1).getDescription()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                    +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                    \" has been converted to recur for \" + numWeeks + \" weeks\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Not a valid recurrence command, recurrence can only be used on events\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 5,
      "-": 55,
      "yuyanglin28": 3
    }
  },
  {
    "path": "src/main/java/commands/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import tasks.Period;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AugGust"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public String line;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public RemindCommand(String line) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        String[] splites \u003d line.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (splites.length !\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            throwSyntaxError();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        int taskIndex \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        int beforeInt \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            taskIndex \u003d Integer.parseInt(splites[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            beforeInt \u003d Integer.parseInt(splites[1].substring(0, splites[1].length() - 1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            throwSyntaxError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        String response \u003d \"Alright! I\u0027ll remind you about: \\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            response +\u003d tasks.get(taskIndex - 1).toString() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            throw new DukeException(\"Task does not exist!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        response +\u003d beforeInt;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        char beforeMult \u003d splites[1].charAt(splites[1].length() - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (beforeMult \u003d\u003d \u0027m\u0027) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            response +\u003d \" mintutes\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else if (beforeMult \u003d\u003d \u0027h\u0027) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            response +\u003d \" hours\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else if (beforeMult \u003d\u003d \u0027d\u0027) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            response +\u003d \" days\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            throw new DukeException(\"Specify m (minutes), h (hours) or d (days)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Class classOfTask \u003d tasks.get(taskIndex - 1).getClass();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (classOfTask !\u003d Deadline.class \u0026\u0026 classOfTask !\u003d Event.class \u0026\u0026 classOfTask !\u003d Period.class) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            throw new DukeException(\"Only for Deadline, Event or Period tasks\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        response +\u003d \" before its time\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Ui.print(response);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Shows tooltip for correct syntax"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @throws DukeException Hint for proper syntax"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void throwSyntaxError() throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        throw new DukeException(\"usage: reminder [task index] [time before]\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"*Only for tasks with dates\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"Time before: e.g. 5m, 10h, 3d\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AugGust": 81
    }
  },
  {
    "path": "src/main/java/commands/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * This is a class for command SNOOZE, which changes a task to a different date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @param line the TASKNAME to another time"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public SnoozeCommand(String line) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String[]arrOfStr \u003d line.split(\" to \",2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            String name \u003d arrOfStr[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            String date \u003d arrOfStr[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Date date1 \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                if (tasks.get(i).getDescription().equals(name)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    tasks.get(i).setTime(date1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            storage.storeTaskList(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.print(\"Nice! I\u0027ve changed the time of this task to \" + date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Task not found\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "yuyanglin28": 3,
      "jasonchanwq": 2
    }
  },
  {
    "path": "src/main/java/commands/UnlinkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class UnlinkCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * This is a class for command UNLINK, which unlinks a task based on list index to a member\u0027s name using /from"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @param line list index to member name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public UnlinkCommand(String line) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            String[]arrOfStr \u003d line.split(\" /from \",2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            int indexInList \u003d Integer.parseInt(arrOfStr[0]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            String memberName \u003d arrOfStr[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                if (members.get(i).getName().equals(memberName)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    ArrayList\u003cMember\u003e pics \u003d tasks.get(indexInList - 1).getPics();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    pics.remove(members.get(i));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    tasks.get(indexInList - 1).setPics(pics);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    members.get(i).removeTask(indexInList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    storage.storeMemberList(members);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    Ui.print(\"Task \" + indexInList + \" is successfully removed from \" + memberName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(\"Member not found or invalid task index\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 42,
      "yuyanglin28": 8
    }
  },
  {
    "path": "src/main/java/commands/ViewScheCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Last;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Period;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewScheCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private String option;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private String memberName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private boolean sortByDate \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * This is a class for command SCHEDULE, which displays tasks that has DATETIME in chronological order."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Optionally provided DATE allows filtering of tasks from that day only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param line is /all or /member [memberName]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public ViewScheCommand(String line) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String[] arrOfStr \u003d line.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.option \u003d arrOfStr[0].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (option.equals(\"/all\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (arrOfStr.length \u003e 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                this.date \u003d Parser.parseDate(arrOfStr[1].trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                sortByDate \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else if (option.equals(\"/member\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            this.memberName \u003d arrOfStr[1].trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (arrOfStr.length \u003e 2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                this.date \u003d Parser.parseDate(arrOfStr[2].trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                sortByDate \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    //@@author auggust yuyanglin28"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, ArrayList\u003cMember\u003e members, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        ArrayList\u003cTask\u003e scheTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (option.equals(\"/all\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            output \u003d \"Here is the whole team schedule in order\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            temp \u003d (ArrayList\u003cTask\u003e) tasks.clone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else if (option.equals(\"/member\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                if (members.get(i).getName().equals(memberName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    output \u003d \"Here is \" + memberName + \"\u0027s schedule in order\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    temp \u003d (ArrayList\u003cTask\u003e) members.get(i).getTasksInCharge().clone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (sortByDate) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            temp \u003d removeNoTimeTask(temp);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            temp \u003d filterByDate(temp, date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            scheTasks \u003d sortByDate(temp);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (scheTasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                output +\u003d \" on \" + date;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                output +\u003d \"There is no task on \" + date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            scheTasks \u003d sortByDate(temp);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        for (int i \u003d 0; i \u003c scheTasks.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            output +\u003d \"\\n\" + scheTasks.get(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Ui.print(output);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Removes and return list of tasks by provided date"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param toFilter original list of tasks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param date date of tasks to be filtered by"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @return List of tasks filtered by date"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private ArrayList\u003cTask\u003e filterByDate(ArrayList\u003cTask\u003e toFilter, Date date) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        ArrayList\u003cInteger\u003e toDelete \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Calendar calAim \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Calendar calTest \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        calAim.setTime(date);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        //remove all on different dates"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        for (int i \u003d 0; i \u003c toFilter.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (toFilter.get(i).getClass().equals(Deadline.class)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                Deadline temp \u003d (Deadline) toFilter.get(i);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                calTest.setTime(temp.getTime());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            } else if (toFilter.get(i).getClass().equals(Event.class)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                Event temp \u003d (Event) toFilter.get(i);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                calTest.setTime(temp.getTime());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            } else if (toFilter.get(i).getClass().equals(Period.class)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                Period temp \u003d (Period) toFilter.get(i);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                calTest.setTime(temp.getStart());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            boolean sameDay \u003d calAim.get(Calendar.DAY_OF_YEAR) \u003d\u003d calTest.get(Calendar.DAY_OF_YEAR)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    \u0026\u0026 calAim.get(Calendar.YEAR) \u003d\u003d calTest.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (!sameDay) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                toDelete.add(i);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        for (int i \u003d toDelete.size() - 1; i \u003e\u003d 0; ) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            toFilter.remove((int) toDelete.get(i));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            i--;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return toFilter;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Returns list of tasks provided without those that has no Date"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param toFilter original list of tasks"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @return filtered task list"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private ArrayList\u003cTask\u003e removeNoTimeTask(ArrayList\u003cTask\u003e toFilter) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        ArrayList\u003cInteger\u003e toDelete \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        //remove all without dates (ToDos and Lasts)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        for (int i \u003d 0; i \u003c toFilter.size(); i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (toFilter.get(i).getClass().equals(ToDo.class)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                toDelete.add(i);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (toFilter.get(i).getClass().equals(Last.class)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                toDelete.add(i);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        for (int i \u003d toDelete.size() - 1; i \u003e\u003d 0; ) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            toFilter.remove((int) toDelete.get(i));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            i--;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return toFilter;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Sorts list of tasks into chronological order"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param toSort list of tasks to by sorted"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @return list of tasks sorted by date"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private ArrayList\u003cTask\u003e sortByDate(ArrayList\u003cTask\u003e toSort) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        ArrayList\u003cTask\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        toSort \u003d removeNoTimeTask(toSort);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        int size \u003d toSort.size();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            Date earliest \u003d new Date(Long.MAX_VALUE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            int earliestIndex \u003d -1;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            for (int j \u003d 0; j \u003c toSort.size(); j++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                if (toSort.get(j).getClass().equals(Deadline.class)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    Deadline temp \u003d (Deadline) toSort.get(j);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    if (temp.getTime().before(earliest)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        earliest \u003d temp.getTime();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        earliestIndex \u003d j;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                } else if (toSort.get(j).getClass().equals(Event.class)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    Event temp \u003d (Event) toSort.get(j);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    if (temp.getTime().before(earliest)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        earliest \u003d temp.getTime();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        earliestIndex \u003d j;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                } else if (toSort.get(j).getClass().equals(Period.class)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    Period temp \u003d (Period) toSort.get(j);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    if (temp.getStart().before(earliest)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        earliest \u003d temp.getStart();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        earliestIndex \u003d j;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            sorted.add(toSort.get(earliestIndex));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            toSort.remove(earliestIndex);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return sorted;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 6,
      "-": 19,
      "yuyanglin28": 25,
      "AugGust": 150
    }
  },
  {
    "path": "src/main/java/core/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import gui.Window;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import utils.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import utils.TasksCounter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": " * This is the main class to be executed for DUKE PRO application"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": " * @author T14-4 team"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * an array list contains all the tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private ArrayList\u003cMember\u003e members;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public static Duke instance;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * A constructor which applies the file path to load previous data"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param taskFilePath   the file path of task list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param memberFilePath the file path of member list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public Duke(String taskFilePath, String memberFilePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        storage \u003d new Storage(taskFilePath, memberFilePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        tasks \u003d storage.loadTaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        members \u003d storage.loadMemberList(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Duke.instance \u003d this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * main running structure of Duke."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        TasksCounter tc \u003d new TasksCounter(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        new Window(tc);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        Ui.welcome();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                String fullCommand \u003d Ui.readLine(in);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                Command c \u003d Parser.commandLine(fullCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                c.execute(tasks, members, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                Ui.print(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Attempts to parse and execute given input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param command input line from user"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void doCommand(String command) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            c \u003d Parser.commandLine(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            c.execute(tasks, members, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (c.isExit()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            Ui.print(e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Static version of doCommand. For window access"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param command input line from user"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public static void processCommand(String command) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        instance.doCommand(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * Main method of the entire project."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param args command line arguments, not used here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        new Duke(\"data/tasks.txt\", \"data/members.txt\").run();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 4,
      "chenyuheng": 33,
      "AugGust": 37,
      "yuyanglin28": 29,
      "-": 4
    }
  },
  {
    "path": "src/main/java/core/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import gui.Window;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * deals with interactions with the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String horizontalLine \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * print out Duke logo and welcome message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void welcome() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        print(\"For a list of commands, type \\\"help\\\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /***\u003cp\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a method to print the message Duke said, automatically add"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * horizontal lines and indentations to the original message and print them."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * A sample output is:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *     ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *      Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *      What can I do for you?"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *     ____________________________________________________________\u003c/p\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toPrint the message need to be printed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void print(String toPrint) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Window.instance.outputArea.setText(Window.instance.outputArea.getText() + \"\\n\\n\" + toPrint);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Window.instance.updatePercentage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(horizontalLine);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        toPrint \u003d \"\\t\" + toPrint;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c toPrint.length(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (toPrint.charAt(i) \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                toPrint \u003d toPrint.substring(0, i + 1) + \"\\t\" + toPrint.substring(i + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(toPrint);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(horizontalLine);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method is used to read a line from Scanner in."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param in the instantiated Scanner object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the String read"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readLine(Scanner in) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 2,
      "chenyuheng": 1,
      "-": 51,
      "AugGust": 5
    }
  },
  {
    "path": "src/main/java/gui/InputMemory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AugGust"
        },
        "content": "public class InputMemory {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    ArrayList\u003cString\u003e inputHistory \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    int currentPointer \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    String tempInput \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Creates a new InputMemory Class Object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public InputMemory() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Looks for previous commands when user presses up key"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param currentInput the text currently in the inputField"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @return new text to replace inputField"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public String moveUp(String currentInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (inputHistory.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return currentInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (currentPointer \u003d\u003d inputHistory.size()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                tempInput \u003d currentInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (currentPointer \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                return currentInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            currentPointer -\u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return inputHistory.get(currentPointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Looks for previous commands when user presses down key"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param currentInput the text currently in the inputField"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @return new text to replace inputField"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public String moveDown(String currentInput) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (inputHistory.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return currentInput;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (currentPointer \u003d\u003d inputHistory.size() - 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                currentPointer \u003d inputHistory.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                return tempInput;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (currentPointer \u003d\u003d inputHistory.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                return currentInput;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            currentPointer +\u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return inputHistory.get(currentPointer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Adds new inputted command to history"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param input the newly executed input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void addToHistory(String input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputHistory.add(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        currentPointer \u003d inputHistory.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AugGust": 71
    }
  },
  {
    "path": "src/main/java/gui/PieChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.Graphics;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.Graphics2D;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.Rectangle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JComponent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": "public class PieChart extends JComponent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private float percentage \u003d 0f;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private float targetPercentage \u003d 0f;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Creates a new PieChart with provided completed percentage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param percentage percentage of tasks completed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    PieChart(float percentage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.targetPercentage \u003d percentage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Thread thread \u003d new Thread(new PieAnimator(this));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        thread.start();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Paints the pie chart"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param g Graphics object of the Component"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void paint(Graphics g) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        drawPie((Graphics2D) g, getBounds());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Draws the pie chart with the given percentages with a 3 pixel border"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param g    Graphics object of the Component"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param area Bounds of the space to draw"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    void drawPie(Graphics2D g, Rectangle area) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (g \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.rotate(Math.toRadians(270));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.translate(-getBounds().width, 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.setColor(Color.black);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.fillArc(area.x, area.y, area.width, area.height, 0, 360);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.setColor(Color.lightGray);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        int angleIncomplete \u003d (int) Math.ceil((100f - percentage) * 3.60f);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.fillArc(area.x + 3, area.y + 3, area.width - 6, area.height - 6, 0, angleIncomplete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.setColor(Color.gray);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.fillArc(area.x + 3, area.y + 3, area.width - 6, area.height - 6, angleIncomplete, 360 - angleIncomplete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Updates percentage of the pie chart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param percentage of tasks completed"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void setPercentage(float percentage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.targetPercentage \u003d percentage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    class PieAnimator implements Runnable {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        PieChart pc;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        public PieAnimator(PieChart pc) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            this.pc \u003d pc;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        public void run() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                if (pc.targetPercentage \u003d\u003d pc.percentage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        Thread.sleep(100);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                } else if (pc.targetPercentage - pc.percentage \u003e 1 || pc.targetPercentage - pc.percentage \u003c -1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    pc.percentage +\u003d ((pc.targetPercentage - pc.percentage) / 5f);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    pc.paint(pc.getGraphics());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    pc.percentage \u003d pc.targetPercentage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    pc.paint(pc.getGraphics());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    Thread.sleep(40);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AugGust": 96
    }
  },
  {
    "path": "src/main/java/gui/Window.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.AbstractAction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.Action;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.BorderFactory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JFrame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JTextArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.SystemColor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.event.WindowAdapter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.event.WindowEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.Font;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.border.LineBorder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.text.DefaultCaret;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import core.Duke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import utils.TasksCounter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import gui.PieChart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JScrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.ScrollPaneConstants;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.KeyStroke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.SwingConstants;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AugGust"
        },
        "content": "public class Window {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private JFrame frame;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private JTextField inputField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private TasksCounter tasksCounter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public static Window instance;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public JTextArea outputArea;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private JTextField completedPercField;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Create the Window"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public Window(TasksCounter tc) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Window.instance \u003d this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.tasksCounter \u003d tc;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.frame.setVisible(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Initialize the contents of the frame."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame \u003d new JFrame(\"Team Manager\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().setBackground(new Color(120, 168, 219));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().setLayout(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JPanel panel \u003d new JPanel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel.setBounds(22, 284, 363, 264);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel.setBorder(new LineBorder(new Color(0, 0, 0), 3, true));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel.setBackground(SystemColor.window);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().add(panel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel.setLayout(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JScrollPane scrollPane \u003d new JScrollPane();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        scrollPane.setBorder(BorderFactory.createEmptyBorder());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        scrollPane.setBounds(10, 10, 343, 244);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel.add(scrollPane);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JTextArea outputArea \u003d new JTextArea();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        scrollPane.setViewportView(outputArea);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        outputArea.setText(\"Welcome to Team Manager!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        outputArea.setEditable(false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        outputArea.setFont(new Font(\"Sans Serif\", Font.PLAIN, 15));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        outputArea.setWrapStyleWord(true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        outputArea.setLineWrap(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        DefaultCaret caret \u003d (DefaultCaret) outputArea.getCaret();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.outputArea \u003d outputArea;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JPanel panel1 \u003d new JPanel();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel1.setLayout(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel1.setBorder(new LineBorder(new Color(0, 0, 0), 3, true));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel1.setBackground(Color.WHITE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel1.setBounds(408, 508, 363, 40);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().add(panel1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField \u003d new JTextField();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.setFont(new Font(\"Constantia\", Font.PLAIN, 15));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.setBounds(10, 10, 343, 19);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel1.add(inputField);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.setColumns(10);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.setBorder(BorderFactory.createEmptyBorder());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.setBounds(100, 100, 800, 600);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.setResizable(false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.addWindowListener(new WindowAdapter() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            public void windowOpened(WindowEvent e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                inputField.requestFocus();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JPanel panel2 \u003d new JPanel();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel2.setLayout(null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel2.setBorder(new LineBorder(new Color(0, 0, 0), 3, true));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel2.setBackground(Color.WHITE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel2.setBounds(106, 234, 197, 40);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().add(panel2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField \u003d new JTextField();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setText(\"\" + (int) tasksCounter.getPercCompleted() + \"% of tasks complete\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setHorizontalAlignment(SwingConstants.CENTER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setFont(new Font(\"Constantia\", Font.PLAIN, 15));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setColumns(10);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setBorder(BorderFactory.createEmptyBorder());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setBounds(10, 10, 177, 19);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel2.add(completedPercField);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JPanel piePanel \u003d new JPanel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        piePanel.setLocation(106, 24);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        piePanel.setBackground(new Color(120, 168, 219));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        piePanel.setLayout(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        piePanel.setSize(200, 200);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().add(piePanel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        pieChart \u003d new PieChart(tasksCounter.getPercCompleted());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        pieChart.setBounds(0, 0, 200, 200);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        piePanel.add(pieChart);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        InputMemory im \u003d new InputMemory();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Action enterPressed \u003d new AbstractAction() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            public void actionPerformed(ActionEvent e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                Duke.processCommand(inputField.getText());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                im.addToHistory(inputField.getText());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                inputField.setText(\"\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        };"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.addActionListener(enterPressed);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Action upPressed \u003d new AbstractAction() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            public void actionPerformed(ActionEvent e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                inputField.setText(im.moveUp(inputField.getText()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        };"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        String key \u003d \"UP\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        KeyStroke keyStroke \u003d KeyStroke.getKeyStroke(key);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.getInputMap().put(keyStroke, key);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.getActionMap().put(key, upPressed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        key \u003d \"DOWN\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        keyStroke \u003d KeyStroke.getKeyStroke(key);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.getInputMap().put(keyStroke, key);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Action downPressed \u003d new AbstractAction() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            public void actionPerformed(ActionEvent e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                inputField.setText(im.moveDown(inputField.getText()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        };"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.getActionMap().put(key, downPressed);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Updates the percentage displayed on the window"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void updatePercentage() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setText(\"\" + (int) tasksCounter.getPercCompleted() + \"% of tasks complete\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        pieChart.setPercentage(tasksCounter.getPercCompleted());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AugGust": 177
    }
  },
  {
    "path": "src/main/java/logic/LogicController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.CommandOutput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.parser.NewParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class LogicController {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public LogicController(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Runs the necessary command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public CommandOutput execute(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        CommandOutput commandResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        Command command \u003d NewParser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 34
    }
  },
  {
    "path": "src/main/java/logic/command/AddToDoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class AddToDoCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public AddToDoCommand(String arguments) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public CommandOutput execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        ToDo todo \u003d new ToDo(arguments);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        model.addToDo(todo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return new CommandOutput(\"you have added a todo\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 21
    }
  },
  {
    "path": "src/main/java/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Executes the command and returns the output message. Every command MUST be passed a model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public abstract CommandOutput execute(Model model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 21
    }
  },
  {
    "path": "src/main/java/logic/command/CommandOutput.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " * Details the output of a command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class CommandOutput {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private final String responseToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * The project manager should exit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public CommandOutput(String feedbackToUser, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.responseToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public CommandOutput(String feedbackToUser) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this(feedbackToUser, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public String getOutputToUser() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return responseToUser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 46
    }
  },
  {
    "path": "src/main/java/logic/command/HiCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class HiCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"hi\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * This is a sample command to give a sensing how the new structure works"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public CommandOutput execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return new CommandOutput(\"This is the hello message\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 17
    }
  },
  {
    "path": "src/main/java/logic/parser/AddParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.AddToDoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class AddParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static final Pattern BASIC_ADD_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Parses add commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static Command parseAddCommand(String partialParsedCommand) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final Matcher matcher \u003d BASIC_ADD_COMMAND_FORMAT.matcher(partialParsedCommand.trim());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Message is invalid\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final String addType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        switch (addType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case AddToDoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return new AddToDoCommand(arguments);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Command word not found\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 34
    }
  },
  {
    "path": "src/main/java/logic/parser/NewParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.HiCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class NewParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @author Justin Chia"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static final String ADD_COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * General top level parser."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static Command parseCommand(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(fullCommand.trim());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Message is invalid\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case HiCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return new HiCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case ADD_COMMAND_WORD:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return AddParser.parseAddCommand(arguments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Command word not found\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 45
    }
  },
  {
    "path": "src/main/java/members/Member.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package members;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class Member {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * name of this member"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * an int array list stores the index(s) of the in charge task(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public ArrayList\u003cInteger\u003e tasksInChargeIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public ArrayList\u003cTask\u003e tasksInCharge;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param name name of the member"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public Member(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.tasksInChargeIndex \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.tasksInCharge \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * another constructor"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param name name of the member"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param tasksInChargeIndex the array list stores the index(s) of in charge task(s)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public Member(String name, ArrayList\u003cInteger\u003e tasksInChargeIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.tasksInChargeIndex \u003d tasksInChargeIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.tasksInCharge \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cMember\u003e pics \u003d new ArrayList\u003cMember\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksInChargeIndex.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            int index \u003d tasksInChargeIndex.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            tasksInCharge.add(Task.tasks.get(index - 1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            pics \u003d Task.tasks.get(index - 1).getPics();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            pics.add(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            Task.tasks.get(index - 1).setPics(pics);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * a method to format the data list data store in file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return a string which will show in data file that store the member list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String dataString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String data \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksInChargeIndex.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            data +\u003d \" | \" + tasksInChargeIndex.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksInCharge() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return this.tasksInCharge;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public ArrayList\u003cInteger\u003e getTasksInChargeIndex() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return this.tasksInChargeIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void setTask(int indexInList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        tasksInChargeIndex.add(indexInList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        tasksInCharge.add(Task.tasks.get(indexInList - 1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * a method to remove a task from the list of members"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @param indexInList the index in the list of members"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void removeTask(int indexInList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksInChargeIndex.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (tasksInChargeIndex.get(i) \u003d\u003d indexInList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                tasksInChargeIndex.remove(i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                tasksInCharge.remove(Task.tasks.get(indexInList - 1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (this.tasksInChargeIndex.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return this.name + \" is free.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            String tasksInChargeString \u003d \"[\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            for (i \u003d 0; i \u003c tasksInChargeIndex.size() - 1; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                tasksInChargeString +\u003d \" \" + tasksInChargeIndex.get(i) + \",\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            tasksInChargeString +\u003d \" \" + tasksInChargeIndex.get(i) + \" ]\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return this.name + \" is in charge of task(s): \" + tasksInChargeString + \".\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * this is a method to update index in Member when deleting task"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void updateIndex() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        tasksInChargeIndex.clear();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksInCharge.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            tasksInChargeIndex.add(Task.tasks.indexOf(tasksInCharge.get(i)) + 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 105,
      "jasonchanwq": 16
    }
  },
  {
    "path": "src/main/java/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.task.ToDo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Methods listed here detail CRUD create read update delete functions for the model. The following is an example"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * of a create function"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    void addToDo(ToDo todo);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 11
    }
  },
  {
    "path": "src/main/java/model/ModelController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.task.ToDo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class ModelController implements Model {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private ProjectManager projectManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Handles model changes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public ModelController() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        //Create new project manager object, TODO change to loading from storage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        projectManager \u003d new ProjectManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void addToDo(ToDo todo) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        projectManager.addTodo(todo);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 21
    }
  },
  {
    "path": "src/main/java/model/ProjectManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class ProjectManager implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public ProjectManager() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Basic adding function of task, this can be extended very widely such as including input checks in the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * individual data model, however this is the prototype model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void addTodo(ToDo todo) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Returns arraylist of tasks. However we can consider building a model for task list itself"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 31
    }
  },
  {
    "path": "src/main/java/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " * a general Task class, to be extended"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * description of the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * status of the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * default constructor of Task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * another constructor of Task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param description the description, or the content of a task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *                    params isDone and recurring are auto set to false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * get task\u0027s description"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @return task\u0027s description"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * set the description of task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param description the description, or the content of a task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Set the time of task to a certain date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * For TODO task, this method is unneeded."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param data data to set"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void setTime(Date data) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        //for polymorphism use"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + this.description;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * set start time of Period task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param start start time"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void setStart(Date start) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * set end time of Period task"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param end end time"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void setEnd(Date end) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * set duration for Last task"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param duration duration time"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void setDuration(String duration) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Return the status icon."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @return the status icon (\"V\" for done and \"x\" for todo) of the task"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * This abstract method return the String for saving the task object in txt file."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @return String for saving the task object in txt file"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public abstract String dataString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 124
    }
  },
  {
    "path": "src/main/java/model/task/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " * ToDo task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " * command is \"add todo [description]\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * default constructor of ToDo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public ToDo() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * another constructor of ToDo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param description description of this task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * how task list will print out in console"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * a method to format the output of the task list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * a string which will show in data file that store the task list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * a method to format the data list data store in file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public String dataString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return \"T | \" + (this.isDone ? 1 : 0) + \" | \" + this.description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 44
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * a task has deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * command is \"add deadline [description] /by [deadline time]\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Date getTime() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * default constructor of Deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Deadline() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * another constructor of Deadline"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description The description, or content of deadline"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param by          the time when this task due"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * set the deadline"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param by the deadline of this task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTime(Date by) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * how task list will print out in console"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * a method to format the data list data store in file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * a string which will show in data file that store the task list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String dataString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return \"D | \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + (this.isDone ? 1 : 0) + \" | \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + this.description + \" | \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + getPrecondition()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \" | \" + ft.format(this.by);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 12,
      "chenyuheng": 4,
      "-": 51,
      "yuyanglin28": 2
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * a task has exact happened time"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * command is \"add event [description] /at [time]\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * time of this event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * default constructor of Event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Event() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTime(Date at) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public Date getTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format the output of the task list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return a string which will be printed out in console when listing this event"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return \"[E]\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \" (at: \" + at + \")\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + (isRecurring ? \" recurring: \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + this.recurringWeeks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \" weeks\" : \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * a method to format the data list data store in file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return a string which will show in data file that store the task list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String dataString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return \"E | \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + (this.isDone ? 1 : 0)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \" | \" + this.description"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \" | \" + getPrecondition()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \" | \" + ft.format(this.at);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @author Justin Chia"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter for date object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return the request date object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Date getAt() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 14,
      "chenyuheng": 5,
      "-": 56,
      "AugGust": 1
    }
  },
  {
    "path": "src/main/java/tasks/Last.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Provide support for managing tasks that takes a fixed amount of time but does not have a fixed start/end time"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g., reading the sales report (needs 2 hours)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * command is \"add last [description] /last [duration]\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class Last extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * a String store the duration time"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * default constructor of Last"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Last() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * another constructor of Last"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param description description of this task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param duration    duration of this task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public Last(String description, String duration) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * a method to set the duration"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param duration duration of this task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void setDuration(String duration) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * a method to format the output of the task list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return a string which will be printed out in console when listing this Last task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[L]\" + super.toString() + \" (last: \" + duration + \")\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * a method to format the data list data store in file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return a string which will show in data file that store the task list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String dataString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"L | \" + (this.isDone ? 1 : 0) + \" | \" + this.description + \" | \" + this.duration;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 7,
      "chenyuheng": 4,
      "-": 48,
      "yuyanglin28": 3
    }
  },
  {
    "path": "src/main/java/tasks/Period.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Provide support for managing tasks that need to be done within a certain period"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g., collect certificate between Jan 15 and 25th."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * command is \"add period [description] /from [time] /to [time]\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class Period extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * the start time of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Date start;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * the end time of the task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Date end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * default constructor of Period"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Period() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * another constructor of Period"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param description the description of this task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param start       the starting time of this task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param end         the end time of this task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public Period(String description, Date start, Date end) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * set the start time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param start starting time"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void setStart(Date start) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public Date getStart() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.start;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public Date getEnd() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * set the end time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param end end time"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void setEnd(Date end) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * a method to format the output of the task list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return a string which will be printed out in console when listing this Period task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[P]\" + super.toString() + \" (from: \" + start + \" to: \" + end + \")\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * a method to format the data list data store in file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return a string which will show in data file that store the task list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public String dataString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return \"P | \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + (this.isDone ? 1 : 0)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + this.description"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + ft.format(this.start)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + ft.format(this.end);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 18,
      "chenyuheng": 4,
      "-": 66,
      "yuyanglin28": 6
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * a general Task class, to be extended"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * description of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * status of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    protected ArrayList\u003cTask\u003e precondition;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @author Justin Chia"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flag for recurring status"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isRecurring;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @author Justin Chia"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Number of weeks for recurrence"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected int recurringWeeks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    protected ArrayList\u003cMember\u003e pics;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * default constructor of Task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isRecurring \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.recurringWeeks \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.precondition \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        pics \u003d new ArrayList\u003cMember\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * another constructor of Task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description, or the content of a task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                    params isDone and recurring are auto set to false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isRecurring \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.recurringWeeks \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.precondition \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        pics \u003d new ArrayList\u003cMember\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * get task\u0027s description"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return task\u0027s description"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * get tasks\u0027s isDone status"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @return isDone boolean"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public ArrayList\u003cMember\u003e getPics() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return pics;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void setPics(ArrayList\u003cMember\u003e pics) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.pics \u003d pics;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * set the description of task"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param description the description, or the content of a task"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the time of task to a certain date."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * For TODO task, this method is unneeded."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param data data to set"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTime(Date data) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //for polymorphism use"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + this.description"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + ((this.precondition.size() \u003d\u003d 0) ? \"\" : (\" (Precondition: \" + this.getPrecondition() + \")\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * set start time of Period task"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param start start time"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setStart(Date start) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * set end time of Period task"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param end end time"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setEnd(Date end) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * set duration for Last task"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param duration duration time"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuration(String duration) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * This method marks the task status as \u0027done\u0027"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @throws DukeException if the preconditions (if it has) are not satisfied,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *                       that is, this task cannot be marked as \u0027done\u0027 at this point"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() throws DukeException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean preconditionDone \u003d true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String notDonePrecondition \u003d \"\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c precondition.size(); i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!precondition.get(i).isDone) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                preconditionDone \u003d false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                notDonePrecondition +\u003d precondition.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!preconditionDone) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Duke error, the following precondition is not done: \\n\" + notDonePrecondition);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Return the status icon."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the status icon (\"V\" for done and \"x\" for todo) of the task"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2715\"); //return tick or X symbols"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param numWeeks the number (quantity) of weeks for the recurrence task"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @author Justin Chia"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Toggle the recurrence flag"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setRecurring(int numWeeks) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isRecurring \u003d true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        this.recurringWeeks \u003d numWeeks;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * This abstract method return the String for saving the task object in txt file."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String for saving the task object in txt file"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String dataString();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method add prerequisite task to the precondition list"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param precondition the prerequisite task to be added"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPrecondition(Task precondition) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        this.precondition.add(precondition);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * This method add prerequisite task to the precondition list"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param preconditionString the prerequisite task to be added, represented by indexes of prerequisite tasks,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *                           separated by space, for example: 1 2 10 11"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @throws DukeException when the format of preconditions is not valid"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPrecondition(String preconditionString) throws DukeException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        preconditionString \u003d preconditionString.trim();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preconditionString.equals(\"0\")) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preconditionString.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] indexString \u003d preconditionString.split(\" \");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            int[] preconditionIndex \u003d new int[indexString.length];"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c preconditionIndex.length; i++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    preconditionIndex[i] \u003d Integer.parseInt(indexString[i].trim());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"Prerequisite task sequence number format error, should be integer.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c preconditionIndex.length; i++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                if (preconditionIndex[i] \u003c\u003d 0 || preconditionIndex[i] \u003e tasks.size()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"Prerequisite task sequence number out of range.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                this.addPrecondition(tasks.get(preconditionIndex[i] - 1));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * This method gets prerequisite task to the precondition list."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return the string of precondition, represented by indexes of prerequisite tasks,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * separated by space, for example: 1 2 10 11"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrecondition() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        if (precondition.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"0\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        String preconditionString \u003d \"\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c precondition.size(); i++) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            preconditionString +\u003d tasks.indexOf(precondition.get(i)) + 1 + \" \";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        return preconditionString;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 11,
      "chenyuheng": 8,
      "-": 207,
      "yuyanglin28": 13,
      "AugGust": 13
    }
  },
  {
    "path": "src/main/java/tasks/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * ToDo task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * command is \"add todo [description]\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * default constructor of ToDo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToDo() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * another constructor of ToDo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description description of this task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * how task list will print out in console"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * a method to format the output of the task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * a string which will show in data file that store the task list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * a method to format the data list data store in file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String dataString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"T | \" + (this.isDone ? 1 : 0) + \" | \" + this.description + \" | \" + this.getPrecondition();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 2,
      "-": 41
    }
  },
  {
    "path": "src/main/java/utils/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * handle the error"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * constructor of Duke Exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param msg error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/utils/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.CheckAnomaliesCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.LinkCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.MemberAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.MemberDeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.RecurringCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import commands.RemindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.SnoozeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.UnlinkCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.ViewScheCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import core.Ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Last;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Period;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * deals with making sense of the user command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eparse a line in the data text to an object.\u003c/p\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line a line of String to be parsed, without \\n last"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the line cannot be parsed properly"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Task taskDataLine(String line) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splites \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splites.length \u003c 3 || (splites.length \u003c 2 \u0026\u0026 (splites[0].equals(\"E\") || splites[0].equals(\"D\")))) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(\"Invalid Duke data line, the information is incomplete.\", -1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Task temp;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splites[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new ToDo();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new Event();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new Deadline();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"L\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new Last();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new Period();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Invalid data line input: the first character is not T, E, D, L or P,\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \" which cannot represent any task type Duke support.\", -1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Integer.parseInt(splites[1]) !\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                temp.markAsDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(\"Invalid number format for the second column of Duke data line.\", -1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.print(e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        temp.setDescription(splites[2]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            temp.addPrecondition(splites[3]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(e.getMessage(), -1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splites[0].equals(\"E\") || splites[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                temp.setTime(ft.parse(splites[4]));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"L\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            temp.setDuration(splites[4]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                temp.setStart(ft.parse(splites[4]));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                temp.setEnd(ft.parse(splites[5]));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * \u003cp\u003eparse a line in the data text to an object.\u003c/p\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param line a line of String to be parsed, without \\n last"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return a Member. Member object produced by the input line"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Member memberDataLine(String line) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String[] splites \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String name \u003d splites[0].trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        int numOfTaskInCharge \u003d splites.length - 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cInteger\u003e tasksInChargeIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfTaskInCharge; i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            tasksInChargeIndex.add(Integer.parseInt(splites[1 + i].trim()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return new Member(name, tasksInChargeIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eParse a command line String to a Commands.Command object.\u003c/p\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line the input command line String"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the new Commands.Command object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if the format of command cannot be parsed"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command commandLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splites \u003d line.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        splites[0] \u003d splites[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        splites[0] \u003d commandCorrector(splites[0]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Command temp \u003d null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        int length \u003d splites.length;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (splites[0].equals(\"HELP\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            temp \u003d new HelpCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else if (splites[0].equals(\"ADD\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (length \u003c 2) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                throw new DukeException(\"usage: add [type of tasks] ...\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new AddCommand(splites[1]);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"LIST\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (length \u003c 2) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                throw new DukeException(\"usage: list [tasks/members/member [index]]\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            temp \u003d new ListCommand(splites[1].trim());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"DONE\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (length \u003c 2) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                throw new DukeException(\"usage: done [index]\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new DoneCommand(splites[1]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"BYE\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new ByeCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"DELETE\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (length \u003c 2) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                throw new DukeException(\"usage: delete [index]\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new DeleteCommand(splites[1]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"FIND\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (length \u003c 2) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                throw new DukeException(\"usage: find [keyword]\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new FindCommand(splites[1]);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else if (splites[0].equals(\"REMINDER\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (length \u003c 2) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                throw new DukeException(\"usage: reminder [task index] [time before]\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        + \"*Only for tasks with dates\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        + \"Time before: e.g. 5m, 10h, 3d\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            temp \u003d new RemindCommand(splites[1]);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"RECURRING\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new RecurringCommand(splites[1]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"SNOOZE\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new SnoozeCommand(splites[1]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } else if (splites[0].equals(\"LINK\")) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            temp \u003d new LinkCommand(splites[1]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } else if (splites[0].equals(\"UNLINK\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            temp \u003d new UnlinkCommand(splites[1]);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } else if (splites[0].equals(\"REMOVE\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            temp \u003d new MemberDeleteCommand(splites[1]);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals((\"SCHEDULE\"))) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            temp \u003d new ViewScheCommand(splites[1]);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"CHECK\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (length \u003c 2) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                temp \u003d new CheckAnomaliesCommand();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                temp \u003d new CheckAnomaliesCommand(splites[1]);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else if (splites[0].equals(\"MEMBER\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (length \u003c 2) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                throw new DukeException(\"usage: member [name]\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            temp \u003d new MemberAddCommand(splites[1]);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"command not found\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eParse an add command to get the corresponding Task.Task object.\u003c/p\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line the add command line with \"add\" removed"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the corresponding Task.Task object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if the format of command cannot be parsed"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Date parseDate(String line) throws DukeException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            Date temp \u003d ft.parse(line);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Adds the task to the database."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param line is the full command"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @return the corresponding Task.Task object"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @throws DukeException if the format of command cannot be parsed"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Task addCommand(String line) throws DukeException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splites \u003d line.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        splites[0] \u003d splites[0].toUpperCase();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        Task temp \u003d null;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splites.length \u003c 2) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"No descriptions\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splites[0].equals(\"TODO\")) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new ToDo(splites[1]);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"DEADLINE\")) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            splites \u003d splites[1].split(\"/by\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splites.length \u003c 2) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"No time keyword /by\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            splites[0] \u003d splites[0].trim();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            splites[1] \u003d splites[1].trim();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                temp \u003d new Deadline(splites[0], ft.parse(splites[1]));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                return temp;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"EVENT\")) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            splites \u003d splites[1].split(\"/at\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splites.length \u003c 2) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"No time keyword /at\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            splites[0] \u003d splites[0].trim();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            splites[1] \u003d splites[1].trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                temp \u003d new Event(splites[0], ft.parse(splites[1]));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                return temp;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"LAST\")) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            splites \u003d splites[1].split(\"/last\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splites.length \u003c 2) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"No time keyword /last\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            splites[0] \u003d splites[0].trim();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            splites[1] \u003d splites[1].trim();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            temp \u003d new Last(splites[0], splites[1]);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (splites[0].equals(\"PERIOD\")) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            splites \u003d splites[1].split(\"/from\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splites.length \u003c 2) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"No time keyword /from\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d splites[0].trim();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            splites[1] \u003d splites[1].trim();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            splites \u003d splites[1].split(\"/to\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splites.length \u003c 2) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"No time keyword /to\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            splites[0] \u003d splites[0].trim();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            splites[1] \u003d splites[1].trim();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                Date start \u003d ft.parse(splites[0]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                Date end \u003d ft.parse(splites[1]);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                if (start.compareTo(end) \u003e 0) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"Invalid time period, start time should before end time\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                temp \u003d new Period(description, start, end);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                return temp;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Task.Task type \" + splites[0] + \" not recognized\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * This method automatically correct typos of command, only support the command words"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * in the dict String Array: \u003cbr /\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * \u003ccode\u003edict \u003d {\"ADD\", \"LIST\", \"DONE\", \"BYE\", \"DELETE\", \"FIND\", \"RECURRING\", \"SNOOZE\", \"SCHEDULE\", \"CHECK\","
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * \"LINK\", \"UNLINK\", \"REMOVE\"};"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * \u003c/code\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param command the original command word"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return If the method can recognize the word, return the correct(ed) command word;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * if the method cannot recognize the word, return the original word."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static String commandCorrector(String command) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        String[] dict \u003d {\"ADD\", \"LIST\", \"DONE\", \"BYE\", \"DELETE\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            \"FIND\", \"RECURRING\", \"REMINDER\", \"SNOOZE\", \"SCHEDULE\", \"CHECK\", \"LINK\", \"UNLINK\", \"REMOVE\", \"HELP\"};"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        double[] similarity \u003d new double[dict.length];"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        double maxSimilarity \u003d 0;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        int maxSimilarityCommandIndex \u003d -1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c dict.length; i++) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            similarity[i] \u003d getSimilarity(dict[i], command);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            maxSimilarity \u003d maxSimilarity \u003e similarity[i] ? maxSimilarity : similarity[i];"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            maxSimilarityCommandIndex \u003d maxSimilarity \u003e similarity[i] ? maxSimilarityCommandIndex : i;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (maxSimilarity \u003e 0.4) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            return dict[maxSimilarityCommandIndex];"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * Get the similarity between two Strings.\u003cbr /\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * The similarity has some properties below:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cli\u003eIf similarity \u003d\u003d 1, the two Strings are equal.\u003c/li\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cli\u003eIf similarity \u003c 1, the two Strings have certain difference.\u003c/li\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cli\u003eIf similarity \u003c 0, the two Strings have different lengths.\u003c/li\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param string1 the first String"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param string2 the second String"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return the defined similarity"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static double getSimilarity(String string1, String string2) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        double delta \u003d 1; // lost penalty"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        double alpha \u003d 1; // mismatch penalty"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        double[][] opt \u003d new double[string1.length() + 1][string2.length() + 1];"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        opt[0][0] \u003d 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c string1.length() + 1; i++) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            opt[i][0] \u003d i * delta;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c string2.length() + 1; i++) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            opt[0][i] \u003d i * delta;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int j \u003d 1; j \u003c string2.length() + 1; j++) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            for (int i \u003d 1; i \u003c string1.length() + 1; i++) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                double s1 \u003d opt[i - 1][j - 1];"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                if (string1.charAt(i - 1) !\u003d string2.charAt(j - 1)) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    s1 \u003d alpha + opt[i - 1][j - 1];"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                double s2 \u003d delta + opt[i - 1][j];"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                double s3 \u003d delta + opt[i][j - 1];"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                opt[i][j] \u003d Math.min(Math.min(s1, s2), s3);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return 2 * (0.5 - opt[string1.length()][string2.length()] / (string1.length() + string2.length()));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 13,
      "chenyuheng": 60,
      "-": 202,
      "jasonchanwq": 24,
      "AugGust": 16,
      "yuyanglin28": 48
    }
  },
  {
    "path": "src/main/java/utils/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * file that store the data"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private File taskDataFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private File memberDataFile;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * input stream to get the file input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private InputStream is;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * constructor of Storage, pass the data to dataFile by file path"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param taskFilePath path of the file that store the task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param memberFilePath path of the file that store the member list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public Storage(String taskFilePath, String memberFilePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        taskDataFile \u003d new File(taskFilePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        memberDataFile \u003d new File(memberFilePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        //Generate folders and files if does not exist"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        taskDataFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        memberDataFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            taskDataFile.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            memberDataFile.createNewFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Read the data stored in hard disk to taskList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return an ArrayList of Task, which is the task list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTaskList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            is \u003d new FileInputStream(taskDataFile);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new InputStreamReader(is));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                tasks.add(Parser.taskDataLine(line));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            Task.tasks \u003d tasks;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            is.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Save the tasks data to the hard disk."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the array list of tasks to be saved."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return if this method executed successfully"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public boolean storeTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            output +\u003d taskList.get(i).dataString() + \"\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(taskDataFile));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            bw.write(output);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * Read the data stored in hard disk to memberList."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return an ArrayList of Member, which is the member list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public ArrayList\u003cMember\u003e loadMemberList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cMember\u003e members \u003d new ArrayList\u003cMember\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            is \u003d new FileInputStream(memberDataFile);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new InputStreamReader(is));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                members.add(Parser.memberDataLine(line));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            is.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return members;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * Save the members data to the hard disk."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param memberList the array list of members to be saved."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return if this method executed successfully"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public boolean storeMemberList(ArrayList\u003cMember\u003e memberList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c memberList.size(); i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            output +\u003d memberList.get(i).dataString() + \"\\n\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(memberDataFile));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            bw.write(output);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 3,
      "chenyuheng": 9,
      "-": 69,
      "yuyanglin28": 52,
      "AugGust": 10
    }
  },
  {
    "path": "src/main/java/utils/TasksCounter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AugGust"
        },
        "content": "public class TasksCounter {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Initilises a new TaskCounter with given arraylist of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * For counting number of completed tasks in given set"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param tasks task set to be counted"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public TasksCounter(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Gets percentage of tasks marked \"done\" in given set of tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @return float value of percentage marked done"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public float getPercCompleted() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return 0f;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        float totalCompleted \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (tasks.get(i).getIsDone()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                totalCompleted +\u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return totalCompleted / (float) tasks.size() * 100f;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AugGust": 38
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/command/DoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import utils.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author: Jason"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void checkNotDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        String description \u003d \"This is a test for checkNotDone\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        ToDo temp \u003d new ToDo(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        assertEquals(false, temp.getIsDone());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author: Jason"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void checkDone() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        String description \u003d \"This is a test for checkDone\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        ToDo temp \u003d new ToDo(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        temp.markAsDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        assertEquals(true, temp.getIsDone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author: Jason"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void execute_negativeIntegerInput_throwsDukeException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        tasks.add(new ToDo(\"test\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new DoneCommand(\"-1\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                .execute(tasks, new ArrayList\u003cMember\u003e(), null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 42,
      "-": 3
    }
  },
  {
    "path": "src/test/java/command/LinkCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import members.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class LinkCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author: Jason"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void checkLink() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        ArrayList\u003cMember\u003e members;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        members \u003d new ArrayList\u003cMember\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        String description \u003d \"This is a task for checkLink\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        ToDo temp \u003d new ToDo(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        tasks.add(temp);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        String member \u003d \"This is a member\u0027s name for checkLink\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        Member newMember \u003d new Member(member);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        members.add(newMember);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        int setTo \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        //members.get(0).setTask(1); //revisit this"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        assertEquals(\"This is a member\u0027s name for checkLink is in charge of task(s): [ 1 ].\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                members.get(0).getName() + \" is in charge of task(s): [ \" + setTo + \" ].\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 38,
      "-": 1
    }
  },
  {
    "path": "src/test/java/tasks/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void checkDescription() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String description \u003d \"test method for deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String at \u003d \"15/12/2019 1130\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Date tempDate \u003d ft.parse(at);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Deadline temp \u003d new Deadline(description, tempDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            assertEquals(description, temp.getDescription());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Invalid command format\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void checkAt() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String description \u003d \"This is a test method for deadline\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String at \u003d \"10/12/2019 1130\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Date tempDate \u003d ft.parse(at);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Deadline temp \u003d new Deadline(description, tempDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            assertEquals(tempDate, temp.getTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 43
    }
  },
  {
    "path": "src/test/java/tasks/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void checkDescription() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String description \u003d \"This is a test Event\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String at \u003d \"10/12/2019 1130\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Date tempDate \u003d ft.parse(at);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Event temp \u003d new Event(description, tempDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            assertEquals(description, temp.getDescription());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void checkAt() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String description \u003d \"This is a test Event\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String at \u003d \"10/12/2019 1130\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Date tempDate \u003d ft.parse(at);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Event temp \u003d new Event(description, tempDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            assertEquals(tempDate, temp.getAt());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 42
    }
  },
  {
    "path": "src/test/java/tasks/LastTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class LastTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void checkToString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String description \u003d \"This is a test Last\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String duration \u003d \"1 hr\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        String expectedResult \u003d \"[L][\\u2715] This is a test Last (last: 1 hr)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        Last temp \u003d new Last(description, duration);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        assertEquals(expectedResult, temp.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void checkDataString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String description \u003d \"This is a test Last\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String duration \u003d \"1 hr\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String expectedResult \u003d \"L | 0 | This is a test Last | 1 hr\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        Last temp \u003d new Last(description, duration);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        assertEquals(expectedResult, temp.dataString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 3,
      "yuyanglin28": 21,
      "AugGust": 1
    }
  },
  {
    "path": "src/test/java/tasks/PeriodTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import utils.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class PeriodTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void checkDataString() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String description \u003d \"This is a test Period\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String start \u003d \"10/12/2019 1120\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String end \u003d \"12/12/2019 1122\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String result \u003d \"P | 0 | This is a test Period | 10/12/2019 1120 | 12/12/2019 1122\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            Date tempStart \u003d ft.parse(start);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            Date tempEnd \u003d ft.parse(end);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            Period temp \u003d new Period(description, tempStart, tempEnd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            assertEquals(result, temp.dataString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 31
    }
  },
  {
    "path": "src/test/java/tasks/ToDoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void checkDescription() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String description \u003d \"This is a test todo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        ToDo temp \u003d new ToDo(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        assertEquals(description, temp.getDescription());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 15
    }
  },
  {
    "path": "src/test/java/utils/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void dateTest() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String testDate \u003d \"25/10/2019 1030\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Date tempz \u003d ft.parse(testDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            assertEquals(tempz, Parser.parseDate(testDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void similarityTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        // equal test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            String randomString \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                int randomInt \u003d (int) (Math.random() * 96) + 30;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                char randomChar \u003d (char) randomInt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                randomString +\u003d randomChar;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                if (randomInt \u003c 40) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            System.out.println(\"randomString is: \" + randomString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            assertEquals(1, Parser.getSimilarity(randomString, randomString));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        // mismatch test under same length"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            String randomString1 \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            String randomString2 \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                int randomInt1 \u003d (int) (Math.random() * 96) + 30;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                int randomInt2 \u003d (int) (Math.random() * 96) + 30;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                char randomChar1 \u003d (char) randomInt1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                char randomChar2 \u003d (char) randomInt2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                if (Math.random() \u003e 0.3 \u0026\u0026 (!randomString1.equals(randomString2))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    randomString2 +\u003d randomChar1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    randomString2 +\u003d randomChar2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                randomString1 +\u003d randomChar1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                if (randomInt1 \u003c 40) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            double similarity \u003d Parser.getSimilarity(randomString1, randomString2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            System.out.println(\"randomStrings are: \" + randomString1 + \", \" + randomString2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            System.out.println(\"The similarity is: \" + similarity);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            assertTrue(similarity \u003c 1 \u0026\u0026 similarity \u003e\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 24,
      "chenyuheng": 43
    }
  }
]
