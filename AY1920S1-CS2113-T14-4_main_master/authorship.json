[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"1.1.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027T-14-4\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00271.0.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    mainClassName \u003d \"core/Duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 1,
      "chenyuheng": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/java/common/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * handle the error"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * constructor of Duke Exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param msg error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 2,
      "chenyuheng": 1,
      "yuyanglin28": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/common/LoggerController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import static java.util.logging.Logger.getLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class LoggerController {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static Logger logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static final String debugString \u003d \"DEBUG_MESSAGE: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Info messages are unimportant and just to detail the running of the program"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static void logInfo(Class className, String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        logger \u003d getLogger(className.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        logger.log(Level.INFO, message);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Debug messages help create breakpoints to identify errors"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static void logDebug(Class className, String message) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        logger \u003d getLogger(className.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        logger.log(Level.INFO, debugString + message);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Error logging helps us view if the program is running smoothly"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static void logWarning(Class className, String message) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        logger \u003d getLogger(className.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        logger.log(Level.WARNING, message);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 38
    }
  },
  {
    "path": "src/main/java/core/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003dNew Imports for new structure"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import gui.UiController;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.LogicController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.ModelController;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": " * This is the main class to be executed for DUKE PRO application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": " * @author T14-4 team"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dNew instantiation of new structure objects\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    protected Model modelController;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    protected LogicController logicController;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    protected UiController uiController;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public static Duke instance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * A constructor which applies the file path to load previous data"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d instantiation for controllers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        modelController \u003d new ModelController();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        logicController \u003d new LogicController(modelController);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        uiController \u003d new UiController(logicController, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Duke.instance \u003d this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * main running structure of Duke."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void run() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        UiController.welcome();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        uiController.start();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        while (isExit) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            uiController.readCommand(in);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            isExit \u003d uiController.isExit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * Main method of the entire project."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param args command line arguments, not used here"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static void main(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 25,
      "chenyuheng": 14,
      "AugGust": 5,
      "yuyanglin28": 20,
      "-": 3
    }
  },
  {
    "path": "src/main/java/core/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import gui.Window;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * deals with interactions with the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String horizontalLine \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * print out Duke logo and welcome message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void welcome() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        print(\"For a list of commands, type \\\"help\\\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /***\u003cp\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a method to print the message Duke said, automatically add"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * horizontal lines and indentations to the original message and print them."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * A sample output is:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *     ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *      Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *      What can I do for you?"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *     ____________________________________________________________\u003c/p\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toPrint the message need to be printed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void print(String toPrint) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Window.instance.outputArea.setText(Window.instance.outputArea.getText() + \"\\n\\n\" + toPrint);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Window.instance.updatePercentage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(horizontalLine);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        toPrint \u003d \"\\t\" + toPrint;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c toPrint.length(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (toPrint.charAt(i) \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                toPrint \u003d toPrint.substring(0, i + 1) + \"\\t\" + toPrint.substring(i + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(toPrint);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(horizontalLine);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method is used to read a line from Scanner in."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param in the instantiated Scanner object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the String read"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readLine(Scanner in) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 2,
      "chenyuheng": 1,
      "-": 51,
      "AugGust": 5
    }
  },
  {
    "path": "src/main/java/gui/InputMemory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AugGust"
        },
        "content": "//@@author AugGust"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AugGust"
        },
        "content": "public class InputMemory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    ArrayList\u003cString\u003e inputHistory \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    int currentPointer \u003d 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    String tempInput \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Creates a new InputMemory Class Object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public InputMemory() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Looks for previous commands when user presses up key"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param currentInput the text currently in the inputField"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @return new text to replace inputField"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public String moveUp(String currentInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (inputHistory.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return currentInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (currentPointer \u003d\u003d inputHistory.size()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                tempInput \u003d currentInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (currentPointer \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                return currentInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            currentPointer -\u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return inputHistory.get(currentPointer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Looks for previous commands when user presses down key"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param currentInput the text currently in the inputField"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @return new text to replace inputField"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public String moveDown(String currentInput) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (inputHistory.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return currentInput;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (currentPointer \u003d\u003d inputHistory.size() - 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                currentPointer \u003d inputHistory.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                return tempInput;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (currentPointer \u003d\u003d inputHistory.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                return currentInput;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            currentPointer +\u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return inputHistory.get(currentPointer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Adds new inputted command to history"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param input the newly executed input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void addToHistory(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputHistory.add(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        currentPointer \u003d inputHistory.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AugGust": 72
    }
  },
  {
    "path": "src/main/java/gui/PieChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.Graphics;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.Graphics2D;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.Rectangle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JComponent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": "//@@author AugGust"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": "public class PieChart extends JComponent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private float percentage \u003d 0f;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private float targetPercentage \u003d 0f;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Creates a new PieChart with provided completed percentage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param percentage percentage of tasks completed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    PieChart(float percentage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.targetPercentage \u003d percentage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Thread thread \u003d new Thread(new PieAnimator(this));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        thread.start();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Paints the pie chart"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param g Graphics object of the Component"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void paint(Graphics g) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        drawPie((Graphics2D) g, getBounds());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Draws the pie chart with the given percentages with a 3 pixel border"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param g    Graphics object of the Component"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param area Bounds of the space to draw"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    void drawPie(Graphics2D g, Rectangle area) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (g \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.rotate(Math.toRadians(270));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.translate(-getBounds().width, 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.setColor(Color.black);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.fillArc(area.x, area.y, area.width, area.height, 0, 360);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.setColor(Color.lightGray);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        int angleIncomplete \u003d (int) Math.ceil((100f - percentage) * 3.60f);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.fillArc(area.x + 3, area.y + 3, area.width - 6, area.height - 6, 0, angleIncomplete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.setColor(Color.gray);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        g.fillArc(area.x + 3, area.y + 3, area.width - 6, area.height - 6, angleIncomplete, 360 - angleIncomplete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Updates percentage of the pie chart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param percentage of tasks completed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void setPercentage(float percentage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.targetPercentage \u003d percentage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    class PieAnimator implements Runnable {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        PieChart pc;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        public PieAnimator(PieChart pc) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            this.pc \u003d pc;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        public void run() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                if (pc.targetPercentage \u003d\u003d pc.percentage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        Thread.sleep(100);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                } else if (pc.targetPercentage - pc.percentage \u003e 1 || pc.targetPercentage - pc.percentage \u003c -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    pc.percentage +\u003d ((pc.targetPercentage - pc.percentage) / 5f);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    pc.paint(pc.getGraphics());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    pc.percentage \u003d pc.targetPercentage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    pc.paint(pc.getGraphics());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    Thread.sleep(40);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AugGust": 97
    }
  },
  {
    "path": "src/main/java/gui/TasksCounter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AugGust"
        },
        "content": "//@@author AugGust"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "public class TasksCounter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Initilises a new TaskCounter with given arraylist of model.tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * For counting number of completed model.tasks in given set"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param tasks task set to be counted"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public TasksCounter(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Gets percentage of model.tasks marked \"done\" in given set of model.tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @return float value of percentage marked done"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public float getPercCompleted() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return 0f;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        float totalCompleted \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (tasks.get(i).isDone()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                totalCompleted +\u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return totalCompleted / (float) tasks.size() * 100f;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 3,
      "AugGust": 36
    }
  },
  {
    "path": "src/main/java/gui/UiController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.LogicController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.CommandOutput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class UiController {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static final String horizontalLine \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private LogicController logicController;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private boolean exit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //TODO TEMP array list of tasks, should change to a model object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public UiController(LogicController logicController, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.logicController \u003d logicController;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Initializes and starts the UI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        //TODO remove temp tasks list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        TasksCounter tc \u003d new TasksCounter(logicController.model.getTaskList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        new Window(tc, logicController);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * This method is used to read a line from Scanner in, before sending command to relevant controller"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * This is the current method for a terminal only application, however as we progress to build a gui"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * it should be handled with a text change event listener or something similar"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Can consider changing readCommand method name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param in the instantiated Scanner object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void readCommand(Scanner in) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String fullCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        CommandOutput commandOutput \u003d logicController.execute(fullCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        print(commandOutput.getOutputToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.exit \u003d commandOutput.isExit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * print out Duke logo and welcome message. This is for the old method"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static void welcome() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        print(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Print message onto temrinal ui"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param toPrint string message that needs to be printed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static void print(String toPrint) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        System.out.println(horizontalLine);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        toPrint \u003d \"\\t\" + toPrint;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        for (int i \u003d 0; i \u003c toPrint.length(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            if (toPrint.charAt(i) \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                toPrint \u003d toPrint.substring(0, i + 1) + \"\\t\" + toPrint.substring(i + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        System.out.println(toPrint);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        System.out.println(horizontalLine);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * This method is used to read a line from Scanner in."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param in the instantiated Scanner object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @return the String read"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static String readLine(Scanner in) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 96,
      "yuyanglin28": 3
    }
  },
  {
    "path": "src/main/java/gui/Window.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.AbstractAction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.Action;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.BorderFactory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JFrame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JTextArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.SystemColor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.event.WindowAdapter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.event.WindowEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.Font;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.border.LineBorder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.text.DefaultCaret;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import core.Duke;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.LogicController;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.CommandOutput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import model.Member;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import gui.PieChart;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JScrollPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.ScrollPaneConstants;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JTextField;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.KeyStroke;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.SwingConstants;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import javax.swing.JLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "//@@author AugGust"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AugGust"
        },
        "content": "public class Window {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private boolean isShowingTasks \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private JFrame frame;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private JTextField inputField;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private TasksCounter tasksCounter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private JLabel viewLabel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public static Window instance;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public JTextArea outputArea;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public JTextArea taskViewArea;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private JTextField completedPercField;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    protected LogicController logicController;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Create the Window"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public Window(TasksCounter tc, LogicController logicController) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Window.instance \u003d this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.logicController \u003d logicController;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.tasksCounter \u003d tc;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.showTaskView(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.frame.setVisible(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Initialize the contents of the frame."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame \u003d new JFrame(\"Team Manager\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().setBackground(new Color(120, 168, 219));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().setLayout(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JPanel panel \u003d new JPanel();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel.setBounds(22, 284, 363, 264);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel.setBorder(new LineBorder(new Color(0, 0, 0), 3, true));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel.setBackground(SystemColor.window);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().add(panel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel.setLayout(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JScrollPane scrollPane \u003d new JScrollPane();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        scrollPane.setBorder(BorderFactory.createEmptyBorder());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        scrollPane.setBounds(10, 10, 343, 244);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel.add(scrollPane);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JTextArea outputArea \u003d new JTextArea();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        scrollPane.setViewportView(outputArea);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        outputArea.setText(\"Welcome to Team Manager!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        outputArea.setEditable(false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        outputArea.setFont(new Font(\"Sans Serif\", Font.PLAIN, 15));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        outputArea.setWrapStyleWord(true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        outputArea.setLineWrap(true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        DefaultCaret caret \u003d (DefaultCaret) outputArea.getCaret();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.outputArea \u003d outputArea;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JPanel panel1 \u003d new JPanel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel1.setLayout(null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel1.setBorder(new LineBorder(new Color(0, 0, 0), 3, true));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel1.setBackground(Color.WHITE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel1.setBounds(408, 508, 363, 40);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().add(panel1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField \u003d new JTextField();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.setFont(new Font(\"Constantia\", Font.PLAIN, 15));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.setBounds(10, 10, 343, 19);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel1.add(inputField);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.setColumns(10);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.setBorder(BorderFactory.createEmptyBorder());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.setBounds(100, 100, 800, 600);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.addWindowListener(new WindowAdapter() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            public void windowOpened(WindowEvent e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                inputField.requestFocus();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JPanel panel2 \u003d new JPanel();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel2.setLayout(null);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel2.setBorder(new LineBorder(new Color(0, 0, 0), 3, true));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel2.setBackground(Color.WHITE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel2.setBounds(106, 234, 197, 40);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().add(panel2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField \u003d new JTextField();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setText(\"\" + (int) tasksCounter.getPercCompleted() + \"% of tasks complete\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setHorizontalAlignment(SwingConstants.CENTER);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setFont(new Font(\"Constantia\", Font.PLAIN, 15));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setColumns(10);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setBorder(BorderFactory.createEmptyBorder());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setBounds(10, 10, 177, 19);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel2.add(completedPercField);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JPanel piePanel \u003d new JPanel();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        piePanel.setLocation(106, 24);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        piePanel.setBackground(new Color(120, 168, 219));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        piePanel.setLayout(null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        piePanel.setSize(200, 200);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().add(piePanel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        pieChart \u003d new PieChart(tasksCounter.getPercCompleted());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        pieChart.setBounds(0, 0, 200, 200);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        piePanel.add(pieChart);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JPanel panel3 \u003d new JPanel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel3.setBorder(new LineBorder(new Color(0, 0, 0), 3, true));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel3.setBackground(Color.WHITE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel3.setBounds(408, 87, 363, 399);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().add(panel3);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel3.setLayout(null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        JScrollPane taskScrollPane \u003d new JScrollPane();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        taskScrollPane.setBounds(10, 10, 343, 379);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        taskScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        taskScrollPane.setBorder(BorderFactory.createEmptyBorder());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        panel3.add(taskScrollPane);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        taskViewArea \u003d new JTextArea();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        taskViewArea.setEditable(false);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        taskViewArea.setFont(new Font(\"Dialog\", Font.PLAIN, 15));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        taskViewArea.setLineWrap(true);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        taskViewArea.setWrapStyleWord(true);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        taskScrollPane.setViewportView(taskViewArea);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        viewLabel \u003d new JLabel(\"Tasks\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        viewLabel.setHorizontalAlignment(SwingConstants.CENTER);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        viewLabel.setFont(new Font(\"Constantia\", Font.BOLD, 20));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        viewLabel.setBounds(408, 34, 363, 53);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        frame.getContentPane().add(viewLabel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        InputMemory im \u003d new InputMemory();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Action enterPressed \u003d new AbstractAction() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            public void actionPerformed(ActionEvent e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    executeCommand(inputField.getText());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                } catch (DukeException error) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    setOutputArea(error.getMessage());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                im.addToHistory(inputField.getText());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                inputField.setText(\"\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        };"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.addActionListener(enterPressed);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Action upPressed \u003d new AbstractAction() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            public void actionPerformed(ActionEvent e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                inputField.setText(im.moveUp(inputField.getText()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        };"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        String key \u003d \"UP\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        KeyStroke keyStroke \u003d KeyStroke.getKeyStroke(key);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.getInputMap().put(keyStroke, key);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.getActionMap().put(key, upPressed);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        key \u003d \"DOWN\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        keyStroke \u003d KeyStroke.getKeyStroke(key);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.getInputMap().put(keyStroke, key);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Action downPressed \u003d new AbstractAction() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            public void actionPerformed(ActionEvent e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                inputField.setText(im.moveDown(inputField.getText()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        };"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        inputField.getActionMap().put(key, downPressed);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Updates the percentage displayed on the window"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void updatePercentage() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        completedPercField.setText(\"\" + (int) tasksCounter.getPercCompleted() + \"% of tasks complete\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        pieChart.setPercentage(tasksCounter.getPercCompleted());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Sets output area to desired text"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private void setOutputArea(String outputString) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        outputArea.setText(outputArea.getText() + \"\\n\\n\" + outputString);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Sets the text in the task view area to the provided string"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param outputString String to be displayed"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private void setTaskViewArea(String outputString) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        taskViewArea.setText(outputString);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Formats list of tasks to display on the task view area"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param tasks List of tasks to view"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @return Formatted output"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private String formatTasksView(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            output +\u003d (i + 1) + \". \" + tasks.get(i) + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            ArrayList\u003cString\u003e members \u003d tasks.get(i).getMemberList();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            for (int j \u003d 0; j \u003c members.size(); j++) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                output +\u003d \"           \\u27a5 \" + members.get(j) + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            output +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Formats list of members to display on the task view area"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param members      List of members to view"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param fullTaskList Full list of tasks (assigned or not)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @return Formatted output"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private String formatMembersView(ArrayList\u003cMember\u003e members, ArrayList\u003cTask\u003e fullTaskList) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        ArrayList\u003cString\u003e fullStrTaskList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        for (int i \u003d 0; i \u003c fullTaskList.size(); i++) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            fullStrTaskList.add(fullTaskList.get(i).getName());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        ArrayList\u003cInteger\u003e assignedTasks \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        for (int i \u003d 0; i \u003c members.size(); i++) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            output +\u003d members.get(i).getName() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            ArrayList\u003cString\u003e tasks \u003d members.get(i).getTaskList();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            for (int j \u003d 0; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                output +\u003d \"    \\u27a5 \";"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                int indexOfTask \u003d fullStrTaskList.indexOf(tasks.get(j));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                output +\u003d \"Task \" + (indexOfTask + 1) + \": \" + fullTaskList.get(indexOfTask) + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                if (!assignedTasks.contains(indexOfTask)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    assignedTasks.add(indexOfTask);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (assignedTasks.size() !\u003d fullTaskList.size()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            output +\u003d \"Unassigned Tasks\\n\";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            for (int i \u003d 0; i \u003c fullTaskList.size(); i++) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                if (!assignedTasks.contains(i)) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    output +\u003d \"    \\u27a5 Task \" + (i + 1) + \": \";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    output +\u003d fullTaskList.get(i).toString() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Changes view to Tasks or Members mode"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param isTaskView chooses Task mode is true, members if false"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void showTaskView(boolean isTaskView) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        isShowingTasks \u003d isTaskView;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (isShowingTasks) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            setTaskViewArea(formatTasksView(logicController.model.getTaskList()));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            viewLabel.setText(\"Tasks\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            setTaskViewArea("
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    formatMembersView(logicController.model.getMemberList(), logicController.model.getTaskList()));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            viewLabel.setText(\"Members\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Updates the command text box to show results from commands"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public void executeCommand(String fullCommandText) throws DukeException {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        CommandOutput commandOutput \u003d logicController.execute(fullCommandText);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        setOutputArea(commandOutput.getOutputToUser());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (isShowingTasks) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            setTaskViewArea(formatTasksView(logicController.model.getTaskList()));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            setTaskViewArea("
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    formatMembersView(logicController.model.getMemberList(), logicController.model.getTaskList()));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        updatePercentage();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (commandOutput.isExit()) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 2,
      "AugGust": 333,
      "yuyanglin28": 1
    }
  },
  {
    "path": "src/main/java/logic/LogicController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.CommandOutput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.parser.NewParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class LogicController {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public LogicController(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@ author JustinChia1997"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Runs the necessary command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public CommandOutput execute(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            CommandOutput commandResult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Command command \u003d NewParser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 30,
      "chenyuheng": 4,
      "yuyanglin28": 3,
      "AugGust": 1
    }
  },
  {
    "path": "src/main/java/logic/command/AddMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class AddMemberCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"member\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static final String FEEDBACK_MESSAGE \u003d \"You have created a new member: \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public AddMemberCommand(String name) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        model.addMember(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return new CommandOutput(FEEDBACK_MESSAGE + name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 1,
      "chenyuheng": 20,
      "yuyanglin28": 1
    }
  },
  {
    "path": "src/main/java/logic/command/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import common.LoggerController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static final String FEEDBACK_MESSAGE \u003d \"You have created a new task: \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private String members;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private Date time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public AddTaskCommand(String taskName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void setMembers(String members) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.members \u003d members;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void setTime(Date time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        Task newTask \u003d model.addTask(taskName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        if (this.time !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            newTask.setTime(this.time);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String memberMissingMessage \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        if (members !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            String[] membersString \u003d members.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            for (int i \u003d 0; i \u003c membersString.length; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                if (model.getMemberManager().hasMember(membersString[i])) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                    newTask.addMember(membersString[i]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                    memberMissingMessage +\u003d \"Warning: member \" + membersString[i] + \" do not exist.\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        if (model.hasTask(taskName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            LoggerController.logInfo(AddTaskCommand.class, \"Task \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                    + taskName + \" has been added successfully\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            LoggerController.logDebug(AddTaskCommand.class, \"Task not added\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return new CommandOutput(memberMissingMessage + FEEDBACK_MESSAGE + taskName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 39,
      "chenyuheng": 16,
      "yuyanglin28": 2
    }
  },
  {
    "path": "src/main/java/logic/command/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String BYE_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return new CommandOutput(BYE_MESSAGE,true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 14
    }
  },
  {
    "path": "src/main/java/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "//@@author JustinChia1997"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Executes the command and returns the output message. Every command MUST be passed a model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public abstract CommandOutput execute(Model model) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 21,
      "yuyanglin28": 1
    }
  },
  {
    "path": "src/main/java/logic/command/CommandOutput.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "//@@author JustinChia1997"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class CommandOutput {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private final String responseToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * The project manager should exit."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public CommandOutput(String feedbackToUser, boolean exit) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.responseToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public CommandOutput(String feedbackToUser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this(feedbackToUser, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public String getOutputToUser() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return responseToUser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 44
    }
  },
  {
    "path": "src/main/java/logic/command/DeleteMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class DeleteMemberCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String FAIL_MESSAGE \u003d \"Fail to delete a member\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String SUCCESS_MSSAGE \u003d \"you have removed a member: \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String INVALID_MSSAGE \u003d \" not exists.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private String memberName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public DeleteMemberCommand(String memberName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.memberName \u003d memberName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (model.deleteMember(memberName)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(SUCCESS_MSSAGE + memberName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(memberName + INVALID_MSSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(FAIL_MESSAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 32
    }
  },
  {
    "path": "src/main/java/logic/command/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String SUCCESS_MSSAGE \u003d \"you have removed a task: \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String INVALID_MSSAGE \u003d \"invalid task index\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String FAIL_MSSAGE \u003d \"fail to delete task\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private int taskIndexInList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public DeleteTaskCommand(int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.taskIndexInList \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (taskIndexInList \u003e model.getTaskListSize() || taskIndexInList \u003c 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(INVALID_MSSAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                taskName \u003d model.deleteTask(taskIndexInList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(SUCCESS_MSSAGE + taskName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(FAIL_MSSAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 12,
      "yuyanglin28": 20
    }
  },
  {
    "path": "src/main/java/logic/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import model.TasksManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    int[] indexes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public DoneCommand(int[] indexes) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.indexes \u003d indexes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        TasksManager tasksManager \u003d model.getTasksManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        checkAvailability(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            Task task \u003d tasksManager.getTaskById(indexes[i]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                output +\u003d \"Task \" + task.getName() + \" has already been done.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                output +\u003d \"Noted, marked task \" + task.getName() + \" as done.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return new CommandOutput(output);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //@@author chenyuheng"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * Checks if task is in task list, and is a valid index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void checkAvailability(Model model) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        int taskListLength \u003d model.getTaskList().size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            if (indexes[i] \u003c 0 || indexes[i] \u003e\u003d taskListLength) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                throw new DukeException(\"Index \" + (indexes[i] + 1) + \" out of range.\\n Please try again.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 45,
      "yuyanglin28": 1
    }
  },
  {
    "path": "src/main/java/logic/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String SUCCESS_MSSAGE \u003d \"The tasks below are with keyword: \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String NOT_FOUND_MESSAGE  \u003d \"no such task with keyword: \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String FAIL_MSSAGE \u003d \"fail to do find command\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            String tasks \u003d model.getTasksByKeyword(keyword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (tasks.equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(NOT_FOUND_MESSAGE + keyword);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(SUCCESS_MSSAGE + keyword + tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(FAIL_MSSAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 31
    }
  },
  {
    "path": "src/main/java/logic/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * execute help command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param model no used"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return a string pass to commandOutput, which will be shown on window"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public CommandOutput execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String output \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                \"Available Commands\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"1. add task/member\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"2. find\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"3. done\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"4. delete\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"5. snooze\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                        + \"6. reminder\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"7. remove\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"8. member\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"9. link\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"10. unlink\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"11. list\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"12. schedule\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"13. check\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                        + \"14. bye\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return new CommandOutput(output);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 33,
      "AugGust": 2
    }
  },
  {
    "path": "src/main/java/logic/command/HiCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class HiCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"hi\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * This is a sample command to give a sensing how the new structure works"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public CommandOutput execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return new CommandOutput(\"This is the hello message\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 16,
      "yuyanglin28": 1
    }
  },
  {
    "path": "src/main/java/logic/command/LinkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class LinkCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    int[] tasksIndexes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    String[] membersNames;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public LinkCommand(int[] tasksIndexes, String[] membersNames) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.tasksIndexes \u003d tasksIndexes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.membersNames \u003d membersNames;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author chengyuheng"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        checkAvailability(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksIndexes.length; i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            for (int j \u003d 0; j \u003c membersNames.length; j++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                model.link(tasksIndexes[i], membersNames[j]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                output +\u003d \"Noted, assigned task \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                        + model.getTasksManager().getTaskById(tasksIndexes[i]).getName()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                        + \" to member \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                        + membersNames[j] + \".\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return new CommandOutput(output);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //@@author chenyuheng"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * Checks if task is in task list, and is a valid index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    protected void checkAvailability(Model model) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        int taskListLength \u003d model.getTaskList().size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksIndexes.length; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            if (tasksIndexes[i] \u003c 0 || tasksIndexes[i] \u003e taskListLength - 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                throw new DukeException(\"Index range out of range, please check and try again.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c membersNames.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            if (model.getMemberManager().getMemberByName(membersNames[i]) \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                throw new DukeException(\"Cannot find member \" + membersNames[i] + \", please check and try again\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 2,
      "chenyuheng": 46,
      "yuyanglin28": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/logic/command/ListMembersCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import model.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import gui.Window;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class ListMembersCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"members\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static final String EMPTY_TASKS_LIST \u003d \"There are currently no member in project manager\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public ListMembersCommand(String arguments) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public CommandOutput execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Window.instance.showTaskView(false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return new CommandOutput(convertArrayListToText(model.getMemberList()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Converts arraylist of members to a displayable text format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public String convertArrayListToText(ArrayList\u003cMember\u003e members) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String finalOutput \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        if (members.size() \u003e 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            for (int i \u003d 0; i \u003c members.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                finalOutput +\u003d (i + 1) + \" : \" + \"Name: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                        + members.get(i).getName() + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            finalOutput \u003d EMPTY_TASKS_LIST;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return finalOutput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 18,
      "chenyuheng": 22,
      "AugGust": 3
    }
  },
  {
    "path": "src/main/java/logic/command/ListTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import gui.Window;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class ListTasksCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tasks\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static final String EMPTY_TASKS_LIST \u003d \"There are currently no tasks in project manager\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public ListTasksCommand(String arguments) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public CommandOutput execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        Window.instance.showTaskView(true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return new CommandOutput(convertArrayListToText(model.getTaskList()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //@@author chenyuheng"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * Convert to displayable text format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String convertArrayListToText(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String finalOutput \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                finalOutput +\u003d (task.isDone() ? \"[\\u2713] \" : \"[\\u2715] \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                        + (i + 1) + \": \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                        + task.getName() + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                        + (task.getTime() !\u003d null ? \"Time: \" + task.getTime() + \"\\n\" : \"\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                        + (task.getMemberList().size() !\u003d 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                        ? \"Assigned to: \" + task.getMemberList().toString() + \"\\n\" : \"\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            finalOutput \u003d EMPTY_TASKS_LIST;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return finalOutput;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 20,
      "chenyuheng": 26,
      "AugGust": 3
    }
  },
  {
    "path": "src/main/java/logic/command/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AugGust"
        },
        "content": "//@@author AugGust"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AugGust"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private int beforeInt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    private char beforeMult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Creates new ReminderCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param taskIndex  index of task to be reminded about"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param beforeInt  numeric value of time before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @param beforeMult multiplier of time before, minutes, hours or days"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public ReminderCommand(int taskIndex, int beforeInt, char beforeMult) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.beforeInt \u003d beforeInt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        this.beforeMult \u003d beforeMult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Generates new reminder"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public CommandOutput execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (taskIndex \u003e model.getTaskListSize()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return new CommandOutput(\"Please provide a valid task index\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else if (model.getTasksManager().getTaskById(taskIndex - 1).getTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return new CommandOutput(\"Please set a time for the task first\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            String feedback \u003d \"Alright! I\u0027ll remind you about:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                    + model.getTasksManager().getTaskById(taskIndex - 1) + \"\\n\" + beforeInt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            if (beforeMult \u003d\u003d \u0027m\u0027) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                feedback +\u003d \" minutes \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            } else if (beforeMult \u003d\u003d \u0027h\u0027) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                feedback +\u003d \" hours \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                feedback +\u003d \" days \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            feedback +\u003d \"before it\u0027s due\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            return new CommandOutput(feedback);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AugGust": 49
    }
  },
  {
    "path": "src/main/java/logic/command/RenameMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "//@@ JasonChanWQ"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class RenameMemberCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    private static final String SUCCESS_MESSAGE \u003d \" has been renamed to: \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String INDEX_NOT_IN_MEMBER_lIST_MESSAGE \u003d \"Index is not within the member list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public int memberIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String newName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public RenameMemberCommand(int memberIndex, String newName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.memberIndex \u003d memberIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    //@@ JasonChanWQ"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        if (memberIndex \u003c 1 || memberIndex \u003e model.getMemberListSize()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return new CommandOutput(INDEX_NOT_IN_MEMBER_lIST_MESSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            String oldName \u003d model.getMemberList().get(memberIndex - 1).getName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            model.getMemberList().get(memberIndex - 1).setName(newName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return new CommandOutput(oldName + SUCCESS_MESSAGE + newName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 32
    }
  },
  {
    "path": "src/main/java/logic/command/RenameTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class RenameTaskCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    private static final String SUCCESS_MESSAGE \u003d \"The task has been renamed to: \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String INDEX_NOT_IN_TASKlIST_MESSAGE \u003d \"Index is not within the task list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public int taskIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String newName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public RenameTaskCommand(int taskIndex, String newName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        if (taskIndex \u003c 1 || taskIndex \u003e model.getTaskListSize()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return new CommandOutput(INDEX_NOT_IN_TASKlIST_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            model.getTaskList().get(taskIndex - 1).setName(newName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return new CommandOutput(SUCCESS_MESSAGE + newName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 28
    }
  },
  {
    "path": "src/main/java/logic/command/ScheduleMemberAllCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class ScheduleMemberAllCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String SUCCESS_MSSAGE \u003d \"Schedule all tasks of member: \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String FAIL_MSSAGE \u003d \"fail to schedule all tasks of member: \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String EMPTY_MSSAGE \u003d \"no task for member: \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private String memberName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public ScheduleMemberAllCommand(String memberName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.memberName \u003d memberName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            String tasks \u003d model.scheduleMemberAll(memberName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (tasks.equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(EMPTY_MSSAGE + memberName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(SUCCESS_MSSAGE + memberName + tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(FAIL_MSSAGE + memberName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 33
    }
  },
  {
    "path": "src/main/java/logic/command/ScheduleMemberTodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class ScheduleMemberTodoCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String SUCCESS_MSSAGE \u003d \"Schedule todo tasks of member: \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String FAIL_MSSAGE \u003d \"fail to schedule todo tasks of member: \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String EMPTY_MSSAGE \u003d \"no todo task for member: \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private String memberName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public ScheduleMemberTodoCommand(String memberName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        this.memberName \u003d memberName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            String tasks \u003d model.scheduleMemberTodo(memberName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (tasks.equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(EMPTY_MSSAGE + memberName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(SUCCESS_MSSAGE + memberName + tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(FAIL_MSSAGE + memberName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 32
    }
  },
  {
    "path": "src/main/java/logic/command/ScheduleTeamAllCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class ScheduleTeamAllCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String SUCCESS_MSSAGE \u003d \"Schedule all tasks of the whole team: \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String FAIL_MSSAGE \u003d \"fail to schedule all tasks of the whole team.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String EMPTY_MSSAGE \u003d \"no todo task for the whole team.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            String tasks \u003d model.scheduleTeamAll();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (tasks.equals(\"\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(EMPTY_MSSAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(SUCCESS_MSSAGE + tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(FAIL_MSSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 26
    }
  },
  {
    "path": "src/main/java/logic/command/ScheduleTeamTodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class ScheduleTeamTodoCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String SUCCESS_MSSAGE \u003d \"Schedule todo tasks of the whole team: \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String FAIL_MSSAGE \u003d \"fail to schedule todo tasks of the whole team.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String EMPTY_MSSAGE \u003d \"no task for the whole team.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            String tasks \u003d model.scheduleTeamTodo();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (tasks.equals(\"\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(EMPTY_MSSAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                return new CommandOutput(SUCCESS_MSSAGE + tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(FAIL_MSSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 27
    }
  },
  {
    "path": "src/main/java/logic/command/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "//@@ JasonChanWQ"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    private static final String SUCCESS_MESSAGE \u003d \"The deadline has been changed to: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String INDEX_NOT_IN_TASKlIST_MESSAGE \u003d \"Index is not within the task list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public Date newDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public SnoozeCommand(int taskIndex, Date newDate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.newDate \u003d newDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    //@@ JasonChanWQ"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        if (taskIndex \u003c 1 || taskIndex \u003e model.getTaskListSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return new CommandOutput(INDEX_NOT_IN_TASKlIST_MESSAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            model.getTaskList().get(taskIndex - 1).setTime(newDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return new CommandOutput(SUCCESS_MESSAGE + newDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 32
    }
  },
  {
    "path": "src/main/java/logic/command/UnlinkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class UnlinkCommand extends LinkCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public UnlinkCommand(int[] tasksIndexes, String[] membersNames) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        super(tasksIndexes, membersNames);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author chengyuheng"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public CommandOutput execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.checkAvailability(model);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksIndexes.length; i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            for (int j \u003d 0; j \u003c membersNames.length; j++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                model.unlink(tasksIndexes[i], membersNames[j]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                output +\u003d \"Noted, unlinked task \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                        + model.getTasksManager().getTaskById(tasksIndexes[i]).getName()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                        + \" from member \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                        + membersNames[j] + \".\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return new CommandOutput(output);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 28,
      "-": 1
    }
  },
  {
    "path": "src/main/java/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class AddCommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static final String FORMAT_WRONG_MESSAGE \u003d \"Cannot resolve the model type. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            + \"\\nUsage: add [task/member] [details]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final Pattern BASIC_ADD_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String TASK \u003d \"task\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String MEMBER \u003d \"member\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Parses add commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static Command parseAddCommand(String partialCommand) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final Matcher matcher \u003d BASIC_ADD_COMMAND_FORMAT.matcher(partialCommand.trim());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Message is invalid\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final String addType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        switch (addType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return AddTaskParser.parseAddTask(arguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case MEMBER:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return AddMemberParser.parseAddMember(arguments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Command word not found\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 32,
      "chenyuheng": 7,
      "yuyanglin28": 5
    }
  },
  {
    "path": "src/main/java/logic/parser/AddMemberParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.AddMemberCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class AddMemberParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String MEMBER_NO_NAME_MESSAGE \u003d \"Member name needed. \\nShould be: add member [member name]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //@@author chenyuheng"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * parses arguments of addtask into a multimap"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static AddMemberCommand parseAddMember(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (userInput !\u003d null) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            return new AddMemberCommand(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new DukeException(MEMBER_NO_NAME_MESSAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 12,
      "yuyanglin28": 10
    }
  },
  {
    "path": "src/main/java/logic/parser/AddTaskParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.AddTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class AddTaskParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String FORMAT_WRONG_MESSAGE \u003d \"Cannot resolve the model type. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            + \"\\nUsage: add [task/member] [details]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String TASK_NO_EMPTY_MESSAGE \u003d \"The name of task cannot be empty.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String TIME_PATTERN \u003d \"dd/MM/yyyy hhmm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //@@author chenyuheng"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * parses arguments of addtask into a multimap"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static AddTaskCommand parseAddTask(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        HashMap\u003cString, String\u003e argumentMultimap \u003d ArgumentTokenizer.tokenize(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String name \u003d argumentMultimap.get(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        AddTaskCommand command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (name.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new DukeException(TASK_NO_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            command \u003d new AddTaskCommand(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String timeString \u003d argumentMultimap.get(\"/at\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (timeString !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(TIME_PATTERN);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                Date time \u003d ft.parse(timeString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                command.setTime(time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                throw new DukeException(\"Time format error. Should be: \" + TIME_PATTERN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String members \u003d argumentMultimap.get(\"/to\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (members !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            command.setMembers(members);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 31,
      "yuyanglin28": 17
    }
  },
  {
    "path": "src/main/java/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "//@@author chenyuheng"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static final String[] TOKENS \u003d new String[]{\"/to\", \"/at\", \"/from\"};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * add javadocs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static HashMap\u003cString, String\u003e tokenize(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        ArrayList\u003cInteger\u003e breakpoints \u003d getSortedBreakpoints(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String[] argumentStrings \u003d breakByBreakpoints(userInput, breakpoints);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        HashMap\u003cString, String\u003e arguments \u003d getMultimap(argumentStrings);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return arguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * add javadocs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static ArrayList\u003cInteger\u003e getSortedBreakpoints(String userInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        ArrayList\u003cInteger\u003e breakpoints \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c TOKENS.length; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            if (userInput.contains(TOKENS[i])) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                breakpoints.add(userInput.indexOf(TOKENS[i]));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        breakpoints.sort(new Comparator\u003cInteger\u003e() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            public int compare(Integer o1, Integer o2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                return o1.intValue() - o2.intValue();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return breakpoints;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * add javadocs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static String[] breakByBreakpoints(String s, ArrayList\u003cInteger\u003e breakpoints) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (breakpoints.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            return new String[]{s};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String[] splits \u003d new String[breakpoints.size() + 1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        breakpoints.add(0, 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c breakpoints.size() - 1; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            splits[i] \u003d s.substring(breakpoints.get(i), breakpoints.get(i + 1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        splits[splits.length - 1] \u003d s.substring(breakpoints.get(breakpoints.size() - 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return splits;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * add javadocs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static HashMap\u003cString, String\u003e getMultimap(String[] argumentStrings) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c argumentStrings.length; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            boolean found \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            for (int j \u003d 0; j \u003c TOKENS.length; j++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                if (argumentStrings[i].indexOf(TOKENS[j]) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    String value \u003d argumentStrings[i].substring(TOKENS[j].length() + 1).trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    arguments.put(TOKENS[j], value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            if (!found) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                arguments.put(\"\", argumentStrings[i].trim());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return arguments;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 77
    }
  },
  {
    "path": "src/main/java/logic/parser/ByeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class ByeCommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String BYE_USAGE \u003d \"\u0027bye\u0027 to quit the application\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * bye command parser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param argument should be nothing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return Byecommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Command parseByeCommand(String argument) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (argument.equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(BYE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 25
    }
  },
  {
    "path": "src/main/java/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class DeleteCommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final Pattern BASIC_ADD_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String DELETE_USAGE \u003d \"Usage: delete [task/member] [index/member name]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String TASK \u003d \"task\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String MEMBER \u003d \"member\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * parse delete command, divide to task or member"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param partialCommand argument part of the command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return a delete command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Command parseDeleteCommand(String partialCommand) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        final Matcher matcher \u003d BASIC_ADD_COMMAND_FORMAT.matcher(partialCommand.trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(\"Message is invalid\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String deleteType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        deleteType \u003d deleteType.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        switch (deleteType) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return DeleteTaskParser.parseDeleteTask(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        case MEMBER:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return DeleteMemberParser.parseDeleteMember(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(DELETE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 45
    }
  },
  {
    "path": "src/main/java/logic/parser/DeleteMemberParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.DeleteMemberCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class DeleteMemberParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String MEMBER_NO_NAME_MESSAGE \u003d \"Member name cannot be empty.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * parse delete member command, pass member name to command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param input input of user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return delete member command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Command parseDeleteMember(String input) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (input !\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            String name \u003d input.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return new DeleteMemberCommand(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(MEMBER_NO_NAME_MESSAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 29
    }
  },
  {
    "path": "src/main/java/logic/parser/DeleteTaskParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.DeleteTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class DeleteTaskParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String TASK_INDEX_NO_EMPTY_MESSAGE \u003d \"The index of task cannot be empty.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * parse the delete task command, pass the index (in task list) to command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param argument index of the task (string) to be deleted"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return delete task command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Command parseDeleteTask(String argument) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (argument !\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            int index \u003d Integer.parseInt(argument.trim());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(TASK_INDEX_NO_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 30
    }
  },
  {
    "path": "src/main/java/logic/parser/DoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import logic.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class DoneCommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //@@author chenyuheng"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * add javadoc please"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static DoneCommand parseDoneCommand(String partialCommand) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String[] indexesString \u003d partialCommand.split(\" \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        int[] indexes \u003d new int[indexesString.length];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                int index \u003d Integer.parseInt(indexesString[i]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                indexes[i] \u003d index - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                throw new DukeException(\"Wrong number format, please check.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return new DoneCommand(indexes);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 26,
      "yuyanglin28": 1
    }
  },
  {
    "path": "src/main/java/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class FindCommandParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String FIND_USAGE \u003d \"usage: find [keyword]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * parse find command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param argument keyword"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return findCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Command parseFindCommand(String argument) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (argument.equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(FIND_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            String keyword \u003d argument.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 26
    }
  },
  {
    "path": "src/main/java/logic/parser/HelpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class HelpCommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String HELP_USAGE \u003d \"\u0027help\u0027 to get command help message.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * parse help command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param argument should be nothing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return help command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Command parseHelpCommand(String argument) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (argument.equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(HELP_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 25
    }
  },
  {
    "path": "src/main/java/logic/parser/LinkCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import core.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import logic.command.LinkCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import logic.command.UnlinkCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class LinkCommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * add javadoc please"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static LinkCommand parseLinkCommand(String partialParsedCommand) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        HashMap\u003cString, String\u003e multimap \u003d ArgumentTokenizer.tokenize(partialParsedCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (!multimap.containsKey(\"\") || !multimap.containsKey(\"/to\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Wrong command format. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                    + \"Should be: link [task(s) index(es)] /to [member(s) name(s)]\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                    + \"e.g. link 1 2 3 /to Alice Bob\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String[] indexesString \u003d multimap.get(\"\").split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String[] membersNameString \u003d multimap.get(\"/to\").split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        int[] tasksIndexes \u003d new int[indexesString.length];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksIndexes.length; i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                int index \u003d Integer.parseInt(indexesString[i]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                tasksIndexes[i] \u003d index - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                throw new DukeException(\"Wrong index format, please check and try again.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return new LinkCommand(tasksIndexes, membersNameString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * parse unlink command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param partialParsedCommand the command line without the first word \"unlink\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return a new UnlinkCommand object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @throws DukeException if any parse related exception happen"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static UnlinkCommand parseUnlinkCommand(String partialParsedCommand) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        HashMap\u003cString, String\u003e multimap \u003d ArgumentTokenizer.tokenize(partialParsedCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (!multimap.containsKey(\"\") || !multimap.containsKey(\"/from\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new DukeException(\"Wrong command format. \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    + \"Should be: unlink [task(s) index(es)] /from [member(s) name(s)]\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    + \"e.g. unlink 1 2 3 /from Alice Bob\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String[] indexesString \u003d multimap.get(\"\").split(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String[] membersNameString \u003d multimap.get(\"/from\").split(\" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        int[] tasksIndexes \u003d new int[indexesString.length];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksIndexes.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                int index \u003d Integer.parseInt(indexesString[i]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                tasksIndexes[i] \u003d index - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                throw new DukeException(\"Wrong index format, please check and try again.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return new UnlinkCommand(tasksIndexes, membersNameString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 7,
      "chenyuheng": 53,
      "yuyanglin28": 1
    }
  },
  {
    "path": "src/main/java/logic/parser/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import logic.command.ListMembersCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.ListTasksCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static final String LIST_USAGE \u003d \"Usage: list [tasks/members]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static final Pattern BASIC_LIST_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Parses add commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static Command parseListCommand(String partialCommand) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final Matcher matcher \u003d BASIC_LIST_COMMAND_FORMAT.matcher(partialCommand.trim());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new DukeException(LIST_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final String listType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        switch (listType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case ListTasksCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return new ListTasksCommand(arguments);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        case ListMembersCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            return new ListMembersCommand(arguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new DukeException(LIST_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 31,
      "chenyuheng": 9,
      "yuyanglin28": 1
    }
  },
  {
    "path": "src/main/java/logic/parser/NewParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.parser.schedule.ScheduleCommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class NewParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static final String ADD_COMMAND_WORD \u003d \"ADD\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static final String LIST_COMMAND_WORD \u003d \"LIST\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static final String DELETE_COMMAND_WORD \u003d \"DELETE\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private static final String DONE_COMMAND_WORD \u003d \"DONE\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    private static final String SNOOZE_COMMAND_WORD \u003d \"SNOOZE\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    private static final String RENAME_COMMAND_WORD \u003d \"RENAME\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static final String LINK_COMMAND_WORD \u003d \"LINK\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static final String UNLINK_COMMAND_WORD \u003d \"UNLINK\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String HELP_COMMAND_WORD \u003d \"HELP\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String FIND_COMMAND_WORD \u003d \"FIND\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String BYE_COMMAND_WORD \u003d \"BYE\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static final String SCHEDULE_COMMAND_WORD \u003d \"SCHEDULE\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public static final String REMINDER_COMMAND_WORD \u003d \"REMINDER\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * \u003cp\u003eParse a command line String to a Commands.Command object.\u003c/p\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param fullCommand the input command line String"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @return the new Commands.Command object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @throws DukeException if the format of command cannot be parsed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public static Command parseCommand(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(fullCommand.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Message is invalid\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String arguments \u003d matcher.group(\"arguments\").trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        commandWord \u003d commandWord.trim().toUpperCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String[] dict \u003d {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            \"ADD\", \"LIST\", \"DONE\", \"DELETE\", \"HELP\", \"FIND\", \"BYE\", \"REMINDER\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            \"SNOOZE\", \"SCHEDULE\", \"CHECK\", \"LINK\", \"UNLINK\", \"RENAME\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        commandWord \u003d SpellingErrorCorrector.commandCorrector(dict, commandWord);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case ADD_COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return AddCommandParser.parseAddCommand(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case LIST_COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return ListCommandParser.parseListCommand(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case DONE_COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return DoneCommandParser.parseDoneCommand(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case SNOOZE_COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return SnoozeCommandParser.parseSnoozeCommand(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case RENAME_COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return RenameCommandParser.parseRenameCommand(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case LINK_COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return LinkCommandParser.parseLinkCommand(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case UNLINK_COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return LinkCommandParser.parseUnlinkCommand(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case DELETE_COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return DeleteCommandParser.parseDeleteCommand(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case HELP_COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return HelpCommandParser.parseHelpCommand(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case FIND_COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return FindCommandParser.parseFindCommand(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case BYE_COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return ByeCommandParser.parseByeCommand(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case SCHEDULE_COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return ScheduleCommandParser.parseScheduleCommand(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        case REMINDER_COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return ReminderCommandParser.parseReminder(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Command not found\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 79,
      "chenyuheng": 2,
      "yuyanglin28": 6,
      "jasonchanwq": 2,
      "AugGust": 1
    }
  },
  {
    "path": "src/main/java/logic/parser/ReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AugGust"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import logic.command.AddMemberCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AugGust"
        },
        "content": "import logic.command.ReminderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AugGust"
        },
        "content": "//@@author AugGust"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AugGust"
        },
        "content": "public class ReminderCommandParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * parses arguments of addtask into a multimap"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public static ReminderCommand parseReminder(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        String[] splites \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (splites.length !\u003d 2) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            throwSyntaxError();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        int taskIndex \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        int beforeInt \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            taskIndex \u003d Integer.parseInt(splites[0]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            beforeInt \u003d Integer.parseInt(splites[1].substring(0, splites[1].length() - 1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            throwSyntaxError();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        char beforeMult \u003d splites[1].charAt(splites[1].length() - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        if (beforeMult !\u003d \u0027m\u0027 \u0026\u0026 beforeMult !\u003d \u0027h\u0027 \u0026\u0026 beforeMult !\u003d \u0027d\u0027)    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            throw new DukeException(\"Specify m (minutes), h (hours) or d (days)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        return new ReminderCommand(taskIndex, beforeInt, beforeMult);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * Shows tooltip for correct syntax"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     * @throws DukeException Hint for proper syntax"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AugGust"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    public static void throwSyntaxError() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        throw new DukeException(\"usage: reminder [task index] [time before]\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"*Only for tasks with dates\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AugGust"
        },
        "content": "                + \"Time before: e.g. 5m, 10h, 3d\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AugGust"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AugGust": 45
    }
  },
  {
    "path": "src/main/java/logic/parser/RenameCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import logic.command.RenameMemberCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import logic.command.RenameTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "//@@ JasonChanWQ"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class RenameCommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String RENAME_USAGE \u003d \"usage: rename [task/member] [Index of task/member] /to [New Name]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String INVALID_RENAME_TYPE_MESSAGE \u003d \"Please input task/member to rename!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String INVALID_TASK_INDEX_MESSAGE \u003d \"Not a valid task index!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String INVALID_MEMBER_INDEX_MESSAGE \u003d \"Not a valid member index!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String EMPTY_INDEX_MESSAGE \u003d \"task/member index cannot be empty!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String TO_NOT_FOUND_MESSAGE \u003d \"Please input a /to\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * parse the rename command, check if rename task or member,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * pass the index (in task/member list) and the new name to RenameTaskCommand or Rename MemberCommand accordingly"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @param argument [task/member] [Index of task/member] /to [New Name]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @return RenameTaskCommand or Rename MemberCommand accordingly"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    //@@ author JasonChanWQ"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static Command parseRenameCommand(String argument) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        if (argument.equals(\"\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            throw new DukeException(RENAME_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            String keyword \u003d argument.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            String[]arrOfStr \u003d keyword.split(\" \",2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            boolean isFound \u003d arrOfStr[1].indexOf(\" /to \") !\u003d -1 ? true : false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            if (isFound \u003d\u003d true) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                String[]arrOfStr2 \u003d arrOfStr[1].split(\" /to \",2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                if (arrOfStr[0].equals(\"task\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        int taskIndex \u003d Integer.parseInt(arrOfStr2[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        String newName \u003d arrOfStr2[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        return new RenameTaskCommand(taskIndex, newName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        throw new DukeException(INVALID_TASK_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        throw new DukeException(EMPTY_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                } else if (arrOfStr[0].equals(\"member\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        int memberIndex \u003d Integer.parseInt(arrOfStr2[0]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        String newName \u003d arrOfStr2[1];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        return new RenameMemberCommand(memberIndex, newName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        throw new DukeException(INVALID_MEMBER_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        throw new DukeException(EMPTY_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    throw new DukeException(INVALID_RENAME_TYPE_MESSAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                throw new DukeException(TO_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 71
    }
  },
  {
    "path": "src/main/java/logic/parser/SnoozeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import logic.command.SnoozeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "//@@ JasonChanWQ"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class SnoozeCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String SNOOZE_USAGE \u003d \"usage: snooze [Index of task] /to [New DateTime]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String INVALID_INDEX_MESSAGE \u003d \"Not a valid task index!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String EMPTY_INDEX_MESSAGE \u003d \"task index cannot be empty!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static final String INVALID_DATETIME_MESSAGE \u003d \"Not a valid date time!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * parse the snooze command, pass the index (in task list) and the new date to command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @param argument [index] /to [new date]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @return SnoozeCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    //@@ author JasonChanWQ"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public static Command parseSnoozeCommand(String argument) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        if (argument.equals(\"\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            throw new DukeException(SNOOZE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            String keyword \u003d argument.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            String[]arrOfStr \u003d keyword.split(\" /to \",2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                int taskIndex \u003d Integer.parseInt(arrOfStr[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                Date newDate \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(arrOfStr[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                return new SnoozeCommand(taskIndex, newDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                throw new DukeException(INVALID_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                throw new DukeException(EMPTY_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                throw new DukeException(INVALID_DATETIME_MESSAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 49
    }
  },
  {
    "path": "src/main/java/logic/parser/SpellingErrorCorrector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class SpellingErrorCorrector {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //@@author chenyuheng"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * This method automatically correct typos of command, support the words in the input dict."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param dict The dict from which the command could be detected."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param command The original command word"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return If the method can recognize the word, return the correct(ed) command word;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * if the method cannot recognize the word, return the original word."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static String commandCorrector(String[] dict, String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        double[] similarity \u003d new double[dict.length];"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        double maxSimilarity \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        int maxSimilarityCommandIndex \u003d -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c dict.length; i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            similarity[i] \u003d getSimilarity(dict[i], command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            maxSimilarity \u003d maxSimilarity \u003e similarity[i] ? maxSimilarity : similarity[i];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            maxSimilarityCommandIndex \u003d maxSimilarity \u003e similarity[i] ? maxSimilarityCommandIndex : i;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (maxSimilarity \u003e 0.5) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            return dict[maxSimilarityCommandIndex];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * Get the similarity between two Strings.\u003cbr /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * The similarity has some properties below:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cli\u003eIf similarity \u003d\u003d 1, the two Strings are equal.\u003c/li\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cli\u003eIf similarity \u003c 1, the two Strings have certain difference.\u003c/li\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cli\u003eIf similarity \u003c 0, the two Strings have different lengths.\u003c/li\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param string1 the first String"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param string2 the second String"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return the defined similarity"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static double getSimilarity(String string1, String string2) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        double delta \u003d 1; // lost penalty"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        double alpha \u003d 1; // mismatch penalty"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        double[][] opt \u003d new double[string1.length() + 1][string2.length() + 1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        opt[0][0] \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c string1.length() + 1; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            opt[i][0] \u003d i * delta;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c string2.length() + 1; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            opt[0][i] \u003d i * delta;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int j \u003d 1; j \u003c string2.length() + 1; j++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            for (int i \u003d 1; i \u003c string1.length() + 1; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                double s1 \u003d opt[i - 1][j - 1];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                if (string1.charAt(i - 1) !\u003d string2.charAt(j - 1)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    s1 \u003d alpha + opt[i - 1][j - 1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                double s2 \u003d delta + opt[i - 1][j];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                double s3 \u003d delta + opt[i][j - 1];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                opt[i][j] \u003d Math.min(Math.min(s1, s2), s3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return 2 * (0.5 - opt[string1.length()][string2.length()] / (string1.length() + string2.length()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 64
    }
  },
  {
    "path": "src/main/java/logic/parser/schedule/ScheduleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class ScheduleCommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final Pattern BASIC_ADD_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String TEAM \u003d \"team\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String MEMBER \u003d \"member\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String SCHEDULE_USAGE \u003d \"Usage: schedule [team/member] [all/todo] {member name}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * parse the schedule command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param partialCommand content after schedule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return a schedule related command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Command parseScheduleCommand(String partialCommand) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        final Matcher matcher \u003d BASIC_ADD_COMMAND_FORMAT.matcher(partialCommand.trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(\"Message is invalid\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String scheduleType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        scheduleType \u003d scheduleType.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        switch (scheduleType) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        case TEAM:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return ScheduleTeamParser.parseScheduleTeam(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        case MEMBER:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return ScheduleMemberParser.parseScheduleMember(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(SCHEDULE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 45
    }
  },
  {
    "path": "src/main/java/logic/parser/schedule/ScheduleMemberAllParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.ScheduleMemberAllCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class ScheduleMemberAllParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String SCHEDULE_USAGE \u003d \"Usage: schedule [team/member] [all/todo] {member name}\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * parse schedule member all"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param argument content after all, member name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return ScheduleMemberAllCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Command parseScheduleMemberAll(String argument) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (argument.equals(\"\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(SCHEDULE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            String memberName \u003d argument.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return new ScheduleMemberAllCommand(memberName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 27
    }
  },
  {
    "path": "src/main/java/logic/parser/schedule/ScheduleMemberParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class ScheduleMemberParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final Pattern BASIC_ADD_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String ALL \u003d \"all\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String SCHEDULE_USAGE \u003d \"Usage: schedule [team/member] [all/todo] {member name}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * parse schedule member"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param partialCommand content after member, divide to all or todo type"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return a schedule member related command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Command parseScheduleMember(String partialCommand) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        final Matcher matcher \u003d BASIC_ADD_COMMAND_FORMAT.matcher(partialCommand.trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(\"Message is invalid\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String scheduleType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        scheduleType \u003d scheduleType.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        switch (scheduleType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return ScheduleMemberAllParser.parseScheduleMemberAll(arguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return ScheduleMemberTodoParser.parseScheduleMemberTodo(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(SCHEDULE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 46
    }
  },
  {
    "path": "src/main/java/logic/parser/schedule/ScheduleMemberTodoParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.ScheduleMemberAllCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.ScheduleMemberTodoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class ScheduleMemberTodoParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String SCHEDULE_USAGE \u003d \"Usage: schedule [team/member] [all/todo] {member name}\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * parse schedule member todo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param argument after todo, member name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return ScheduleMemberTodoCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Command parseScheduleMemberTodo(String argument) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (argument.equals(\"\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(SCHEDULE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            String memberName \u003d argument.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return new ScheduleMemberTodoCommand(memberName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 27
    }
  },
  {
    "path": "src/main/java/logic/parser/schedule/ScheduleTeamParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.ScheduleTeamAllCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.command.ScheduleTeamTodoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "public class ScheduleTeamParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String ALL \u003d \"all\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private static final String SCHEDULE_USAGE \u003d \"Usage: schedule [team/member] [all/todo] {member name}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * parse schedule team"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param argument after team, divide to all and todo type"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return ScheduleTeamAllCommand or ScheduleTeamTodoCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public static Command parseScheduleTeam(String argument) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String scheduleType \u003d argument.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        switch (scheduleType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return new ScheduleTeamAllCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return new ScheduleTeamTodoCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            throw new DukeException(SCHEDULE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuyanglin28": 36
    }
  },
  {
    "path": "src/main/java/model/Member.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "//@@author chenyuheng"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class Member {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d \"^[\\\\w-_\\\\.+]*[\\\\w-_\\\\.]\\\\@([\\\\w]+\\\\.)+[\\\\w]+[\\\\w]$\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static final String MESSAGE_WRONG_EMAIL_FORMAT \u003d \"Wromg email format.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private ArrayList\u003cString\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private String biography;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public Member(String name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * add javadoc please"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void addTask(String toAdd) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (!taskList.contains(toAdd)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            taskList.add(toAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * add javadoc please"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void deleteTask(String toDelete) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (taskList !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            taskList.remove(toDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public ArrayList\u003cString\u003e getTaskList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String getBiography() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return biography;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void setBiography(String biography) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.biography \u003d biography;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * set email"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param email email of the member"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @throws DukeException exception"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void setEmail(String email) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (email.matches(EMAIL_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new DukeException(MESSAGE_WRONG_EMAIL_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void setPhone(String phone) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 86,
      "yuyanglin28": 1
    }
  },
  {
    "path": "src/main/java/model/MemberManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "//@@author chenyuheng"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class MemberManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_MEMBER_NAME \u003d \"Duplicated member name.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    ArrayList\u003cMember\u003e memberList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * add javadoc please"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public MemberManager(ArrayList\u003cMember\u003e memberList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (memberList !\u003d null) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            this.memberList \u003d memberList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            this.memberList \u003d new ArrayList\u003cMember\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * Add a new member with a name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param name The name of the new member, case sensitive."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @throws DukeException If duplicated member name is found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void addMember(String name) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (getMemberByName(name) \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            memberList.add(new Member(name));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new DukeException(MESSAGE_DUPLICATED_MEMBER_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * Get the Member object by its name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param name The name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return Return the Member object if found, return null if not found."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public Member getMemberByName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c memberList.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            if (memberList.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                return memberList.get(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * Get the Member object by its id."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param id The id, or the index of the Member ArrayList, which is non-persistent."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *           An id starts with 0."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return Return the Member object if found, return null if index is wrong."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public Member getMemberById(int id) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (id \u003e\u003d 0 \u0026\u0026 id \u003c memberList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            return memberList.get(id);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * Delete a member from the member list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param toDelete the object of the member to be deleted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public boolean deleteMember(Member toDelete) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return memberList.remove(toDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * delete task in member list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param taskName task name to be deleted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void deleteTaskInMembers(String taskName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c memberList.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            Member toCheck \u003d memberList.get(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            toCheck.deleteTask(taskName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * Delete an array of Member objects from the member list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param toDelete The Member objects array to be deleted."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void deleteMembers(Member[] toDelete) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c toDelete.length; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            memberList.remove(toDelete[i]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * Add link(s) from member(s) to task(s). Duplicated link will be cancelled."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param members Array of Member objects to link."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param toAdd   Array of Task objects to link."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void addTask(Member[] members, Task[] toAdd) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c members.length; i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            for (int j \u003d 0; j \u003c toAdd.length; j++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                members[i].addTask(toAdd[j].getName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * Delete link(s) from member(s) to task(s). Non-existing link won\u0027t be deleted."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * This is the reverse method of \u003ccode\u003eaddTask(Member[] members, Task[] toAdd)\u003c/code\u003e method."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param members  Array of Member objects to delete link."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param toDelete Array of Task objects to delete link."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /*public void deleteTask(Member[] members, Task[] toDelete) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c members.length; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            for (int j \u003d 0; j \u003c toDelete.length; j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                members[i].deleteTask(toDelete[j]);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public ArrayList\u003cMember\u003e getMemberList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return memberList;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Checks to see if member exists in the list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public boolean hasMember(String name) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        for (int i \u003d 0; i \u003c memberList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            if (memberList.get(i).getName().equals(name.trim())) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public ArrayList\u003cString\u003e getTaskListOfMember(String memberName) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return getMemberByName(memberName).getTaskList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    //@@author JasonChanWQ"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Returns the size of the memberList"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @return size of memberList"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public int getMemberListSize() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return memberList.size();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 18,
      "chenyuheng": 64,
      "yuyanglin28": 69,
      "jasonchanwq": 9
    }
  },
  {
    "path": "src/main/java/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import core.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dStorage Interface\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    void load();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    void save();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTask Interface\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    ArrayList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    int getTaskListSize();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    TasksManager getTasksManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    Task addTask(String name) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    String deleteTask(int taskIndexInList) throws DukeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    boolean hasTask(String name) throws DukeException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    String getTasksByKeyword(String keyword) throws DukeException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    String scheduleTeamAll() throws DukeException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    String scheduleTeamTodo() throws DukeException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    String scheduleMemberAll(String memberName) throws DukeException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    String scheduleMemberTodo(String memberName) throws DukeException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dMember Interface\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    ArrayList\u003cMember\u003e getMemberList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    int getMemberListSize();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    MemberManager getMemberManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    void addMember(String name) throws DukeException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    boolean deleteMember(String name) throws DukeException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    boolean hasMember(String name) throws DukeException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTask and Member Interface\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    void link(int tasksIndexes, String memberNames);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    void unlink(int tasksIndexes, String memberNames);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 24,
      "chenyuheng": 12,
      "yuyanglin28": 17,
      "jasonchanwq": 2
    }
  },
  {
    "path": "src/main/java/model/ModelController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class ModelController implements Model {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private TasksManager tasksManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private MemberManager memberManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Handles model changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public ModelController() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        //TODO change to loading from storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        tasksManager \u003d new TasksManager(storage.loadTasks());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        memberManager \u003d new MemberManager(storage.loadMembers());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Loads the data from storage into memory"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void load() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Saves the data into a persistent json object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        storage.saveTasks(tasksManager.getTaskList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        storage.saveMembers(memberManager.getMemberList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTask interfaces\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return tasksManager.getTaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return tasksManager.getTaskListSize();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public TasksManager getTasksManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return tasksManager;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Task addTask(String name) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        Task newTask \u003d tasksManager.addTask(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        storage.saveTasks(tasksManager.getTaskList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        storage.loadTasks();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public boolean hasTask(String name) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return tasksManager.hasTask(name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dMember interfaces\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public ArrayList\u003cMember\u003e getMemberList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return memberManager.getMemberList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public int getMemberListSize() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return memberManager.getMemberListSize();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public MemberManager getMemberManager() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return memberManager;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void addMember(String name) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        memberManager.addMember(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        storage.saveMembers(memberManager.getMemberList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public boolean hasMember(String name) throws DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return memberManager.hasMember(name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void link(int taskIndex, String memberName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        tasksManager.getTaskById(taskIndex).addMember(memberName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        //TODO consider uuid for linking"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        memberManager.getMemberByName(memberName).addTask(tasksManager.getTaskById(taskIndex).getName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void unlink(int taskIndex, String memberName) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        tasksManager.getTaskById(taskIndex).deleteMember(memberName);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        memberManager.getMemberByName(memberName).deleteTask(memberName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public boolean deleteMember(String name) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        tasksManager.deleteMemberInTasks(name);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        Member toDelete \u003d memberManager.getMemberByName(name);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        if (memberManager.deleteMember(toDelete)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            storage.saveMembers(memberManager.getMemberList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            storage.saveTasks(tasksManager.getTaskList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String deleteTask(int taskIndexInList) throws DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        Task toDelete \u003d tasksManager.deleteTask(taskIndexInList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String toDeleteName \u003d tasksManager.getNameByTask(toDelete);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        memberManager.deleteTaskInMembers(toDeleteName);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        storage.saveMembers(memberManager.getMemberList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        storage.saveTasks(tasksManager.getTaskList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return toDeleteName;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String getTasksByKeyword(String keyword) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return tasksManager.getTasksByKeyword(keyword);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String scheduleTeamAll() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return tasksManager.scheduleTeamAll();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String scheduleTeamTodo() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return tasksManager.scheduleTeamTodo();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String scheduleMemberAll(String memberName) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cString\u003e tasksName \u003d memberManager.getTaskListOfMember(memberName);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return tasksManager.scheduleAllTasks(tasksName);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String scheduleMemberTodo(String memberName) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cString\u003e tasksName \u003d memberManager.getTaskListOfMember(memberName);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return tasksManager.scheduleTodoTasks(tasksName);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 115,
      "chenyuheng": 2,
      "jasonchanwq": 1,
      "yuyanglin28": 47
    }
  },
  {
    "path": "src/main/java/model/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import model.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "//@@author chenyuheng"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private ArrayList\u003cString\u003e memberList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private Date time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.name \u003d name.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * add javadoc please"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void addMember(String toAdd) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (!memberList.contains(toAdd)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            memberList.add(toAdd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * add javadoc please"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void deleteMember(String toDelete) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        System.out.println(memberList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        memberList.remove(toDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public ArrayList\u003cString\u003e getMemberList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return memberList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public Date getTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void setTime(Date time) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * change task to string to show on window"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return string of task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.name + (time \u003d\u003d null ? \"\" : (\" (at: \" + time + \")\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * Return the status icon."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return the status icon (\"V\" for done and \"x\" for todo) of the task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2715\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 83,
      "yuyanglin28": 1
    }
  },
  {
    "path": "src/main/java/model/TasksManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class TasksManager implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_TASK_NAME \u003d \"Duplicated task name.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * add javadoc please"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public TasksManager(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        if (taskList !\u003d null) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Add a new task with name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param name The name of the new task, case sensitive."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @throws DukeException If duplicated task name if found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Task addTask(String name) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        if (!hasTask(name)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Task newTask \u003d new Task(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            taskList.add(newTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(MESSAGE_DUPLICATED_TASK_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Get the Task object by its id."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param id The id, or the index of the Task ArrayList, which is non-persistent."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *           An id starts with 0."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @return Return the Task object if found, return null if index is wrong."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Task getTaskById(int id) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        if (id \u003e\u003d 0 \u0026\u0026 id \u003c taskList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return taskList.get(id);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Delete a task from the task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param taskIndexInList The task index in tasklist to be deleted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Task deleteTask(int taskIndexInList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return taskList.remove(taskIndexInList - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Add link(s) from task(s) to member(s). Duplicated link will be cancelled."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param tasks Array of Member objects to link."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param toAdd Array of Member object to link."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void addMember(Task[] tasks, String[] toAdd) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            for (int j \u003d 0; j \u003c toAdd.length; j++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                tasks[i].addMember(toAdd[j]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Delete link(s) from task(s) to member(s). Non-existing link won\u0027t be deleted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * This is the reverse method of \u003ccode\u003eaddMember(Task[] tasks, Member[] toAdd)\u003c/code\u003e method."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param tasks arraylist"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param toDelete arraylist"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void deleteMember(Task[] tasks, String[] toDelete) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            for (int j \u003d 0; j \u003c toDelete.length; j++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                tasks[i].deleteMember(toDelete[j]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * delete member (person in charge) in task list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param memberName member name to be deleted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void deleteMemberInTasks(String memberName) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            Task toCheck \u003d taskList.get(i);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            toCheck.deleteMember(memberName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * checks if task is present in task list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public boolean hasTask(String name) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            if (taskList.get(i).getName().equals(name.trim())) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Finds Task from task list. returns null if no match was found"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @param name arraylist"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * @return Task"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Task getTaskByName(String name) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            if (taskList.get(i).getName().equals(name.trim())) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                return taskList.get(i);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public String getNameByTask(Task task) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return task.getName();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * get the tasks contain keyword"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param keyword keyword to be searched"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return a string shows the task list contain keyword"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String getTasksByKeyword(String keyword) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (taskList.get(i).getName().contains(keyword)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                result +\u003d \"\\n\" + taskList.get(i);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * schedule all task list"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return a string shows the scheduled task list"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String scheduleTeamAll() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e taskListCopy \u003d (ArrayList\u003cTask\u003e)taskList.clone();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return showScheduleOfTaskList(taskListCopy);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * schedule todo task list"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return a string shows the scheduled todo task list"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String scheduleTeamTodo() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e taskListCopy \u003d (ArrayList\u003cTask\u003e)taskList.clone();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e todoTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        todoTasks \u003d pickTodo(taskListCopy);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return showScheduleOfTaskList(todoTasks);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * schedule tasks supplied by task name"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param tasksName tasks to be scheduled"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return  a string shows the scheduled task list"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String scheduleAllTasks(ArrayList\u003cString\u003e tasksName) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksName.size(); i++) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            allTasks.add(getTaskByName(tasksName.get(i)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return showScheduleOfTaskList(allTasks);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    //@@author yuyanglin28"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * schedule todo tasks supplied by task name"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @param tasksName tasks to be scheduled (contain finished tasks)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     * @return a string shows the scheduled todo task list"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public String scheduleTodoTasks(ArrayList\u003cString\u003e tasksName) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksName.size(); i++) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            allTasks.add(getTaskByName(tasksName.get(i)));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e todoTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        todoTasks \u003d pickTodo(allTasks);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return showScheduleOfTaskList(todoTasks);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private ArrayList\u003cTask\u003e sortByTime(ArrayList\u003cTask\u003e toSort) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        int size \u003d toSort.size();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            Date earliest \u003d new Date(Long.MAX_VALUE);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            int earliestIndex \u003d -1;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            for (int j \u003d 0; j \u003c toSort.size(); j++) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                Task temp \u003d toSort.get(j);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                if (temp.getTime().before(earliest)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    earliest \u003d temp.getTime();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                    earliestIndex \u003d j;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            sorted.add(toSort.get(earliestIndex));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            toSort.remove(earliestIndex);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return sorted;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private ArrayList\u003cTask\u003e pickTodo(ArrayList\u003cTask\u003e toFilter) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e filtered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c toFilter.size(); i++) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            if (toFilter.get(i).isDone() \u003d\u003d false) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "                filtered.add(toFilter.get(i));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return filtered;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    private String showScheduleOfTaskList(ArrayList\u003cTask\u003e toSorted) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        tasks \u003d sortByTime(toSorted);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            result +\u003d \"\\n\" + tasks.get(i);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 136,
      "chenyuheng": 1,
      "yuyanglin28": 127
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Member;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " * deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //TODO consider abstracting"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //TODO temporary storage file path"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private String taskFilePath \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private String memberFilePath \u003d \"data/members.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * file that store the data"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private File taskDataFile;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private File memberDataFile;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * input stream to get the file input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private InputStream is;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * Creates storage object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        GsonBuilder builder \u003d new GsonBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        builder.setPrettyPrinting();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        gson \u003d builder.create();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        //@@author chenyuheng"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        taskDataFile \u003d new File(taskFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        memberDataFile \u003d new File(memberFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        //@@author AugGust"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        //Generate folders and files if does not exist"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        taskDataFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        memberDataFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            taskDataFile.createNewFile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            memberDataFile.createNewFile();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AugGust"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AugGust"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AugGust"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AugGust"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //@@author chenyuheng"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * saves the tasks into persistent storage"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public boolean saveTasks(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String toSave \u003d convertTaskToJson(taskList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(taskDataFile));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            bw.write(toSave);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    //@@author chenyuheng"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * loads task from persistent storage"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTasks() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            is \u003d new FileInputStream(taskDataFile);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new InputStreamReader(is));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            String fullJson \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                fullJson +\u003d line;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            is.close();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            tasks \u003d convertJsonToTask(fullJson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * saves members list into persistent storage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public boolean saveMembers(ArrayList\u003cMember\u003e memberList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String toSave \u003d convertMemberToJson(memberList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(memberDataFile));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            bw.write(toSave);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * loads members list to persistent storage"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public ArrayList\u003cMember\u003e loadMembers() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        ArrayList\u003cMember\u003e members \u003d new ArrayList\u003cMember\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            is \u003d new FileInputStream(memberDataFile);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new InputStreamReader(is));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            String fullJson \u003d \"\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "                fullJson +\u003d line;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            is.close();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            members \u003d convertJsonToMember(fullJson);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            return members;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return members;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Helper functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * converts the arraylist of tasks to json"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private String convertTaskToJson(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String json \u003d gson.toJson(taskList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return json;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * converts json object of task to java object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private ArrayList\u003cTask\u003e convertJsonToTask(String json) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d gson.fromJson(json, new TypeToken\u003cList\u003cTask\u003e\u003e() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }.getType());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * converts the arraylist of members to json"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private String convertMemberToJson(ArrayList\u003cMember\u003e memberList) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String json \u003d gson.toJson(memberList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return json;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    //@@author JustinChia1997"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * converts json object of member to java object"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    private ArrayList\u003cMember\u003e convertJsonToMember(String json) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        ArrayList\u003cMember\u003e memberList \u003d gson.fromJson(json, new TypeToken\u003cList\u003cMember\u003e\u003e() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }.getType());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        return memberList;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 132,
      "chenyuheng": 45,
      "yuyanglin28": 3,
      "AugGust": 13
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/logic/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void normalTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String tc1 \u003d \"add task task 1 /at 13/11/2019 1900\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        HashMap\u003cString, String\u003e tr1 \u003d ArgumentTokenizer.tokenize(tc1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        assertEquals(\"add task task 1\", tr1.get(\"\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        assertEquals(\"13/11/2019 1900\", tr1.get(\"/at\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        assertEquals(null, tr1.get(\"/to\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 19
    }
  },
  {
    "path": "src/test/java/tasks/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void checkDescription() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String description \u003d \"test method for deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String at \u003d \"15/12/2019 1130\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Date tempDate \u003d ft.parse(at);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Deadline temp \u003d new Deadline(description, tempDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            assertEquals(description, temp.getDescription());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Invalid command format\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void checkAt() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String description \u003d \"This is a test method for deadline\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String at \u003d \"10/12/2019 1130\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Date tempDate \u003d ft.parse(at);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Deadline temp \u003d new Deadline(description, tempDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            assertEquals(tempDate, temp.getTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 41,
      "yuyanglin28": 5
    }
  },
  {
    "path": "src/test/java/tasks/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void checkDescription() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String description \u003d \"This is a test Event\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String at \u003d \"10/12/2019 1130\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Date tempDate \u003d ft.parse(at);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Event temp \u003d new Event(description, tempDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            assertEquals(description, temp.getDescription());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void checkAt() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String description \u003d \"This is a test Event\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String at \u003d \"10/12/2019 1130\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Date tempDate \u003d ft.parse(at);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Event temp \u003d new Event(description, tempDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            assertEquals(tempDate, temp.getAt());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 40,
      "yuyanglin28": 5
    }
  },
  {
    "path": "src/test/java/utils/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "import logic.parser.NewParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    public void dateTest() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        String testDate \u003d \"25/10/2019 1030\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            Date tempz \u003d ft.parse(testDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "            assertEquals(tempz, NewParser.parseDate(testDate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "            throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void similarityTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        // equal test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            String randomString \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                int randomInt \u003d (int) (Math.random() * 96) + 30;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                char randomChar \u003d (char) randomInt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                randomString +\u003d randomChar;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                if (randomInt \u003c 40) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            System.out.println(\"randomString is: \" + randomString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            assertEquals(1, Parser.getSimilarity(randomString, randomString));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        // mismatch test under same length"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            String randomString1 \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            String randomString2 \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                int randomInt1 \u003d (int) (Math.random() * 96) + 30;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                int randomInt2 \u003d (int) (Math.random() * 96) + 30;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                char randomChar1 \u003d (char) randomInt1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                char randomChar2 \u003d (char) randomInt2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                if (Math.random() \u003e 0.3 \u0026\u0026 (!randomString1.equals(randomString2))) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    randomString2 +\u003d randomChar1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    randomString2 +\u003d randomChar2;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                randomString1 +\u003d randomChar1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                if (randomInt1 \u003c 40) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            double similarity \u003d Parser.getSimilarity(randomString1, randomString2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            System.out.println(\"randomStrings are: \" + randomString1 + \", \" + randomString2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            System.out.println(\"The similarity is: \" + similarity);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            assertTrue(similarity \u003c 1 \u0026\u0026 similarity \u003e\u003d 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuyanglin28"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinChia1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinChia1997": 22,
      "chenyuheng": 43,
      "yuyanglin28": 7
    }
  }
]
