[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile(\"org.junit.jupiter:junit-jupiter-api:5.4.2\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/dolla/Dolla.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import parser.MainParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * \u003ch1\u003eduke.Dolla\u003c/h1\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * duke.Dolla is a chat-bot styled todo_list manager."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * @author  Aik Peng"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * @since   2019-07-26"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class Dolla {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private String mode \u003d \"dolla\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Creates an instance of Dolla using a data loaded from /data/dolla.txt"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public Dolla() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //tasks \u003d new TaskList(Storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Runs the main program of duke.Dolla"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @throws Exception when exceptional condition happens"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void run() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //Reminder reminderObject \u003d new Reminder(); //reminder pop up"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //reminderObject.execute(tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"hi\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Scanner input \u003d new Scanner(System.in); // TODO: Add to Ui or MainParser instead?"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        while (isExit \u003d\u003d false) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            if (input.hasNextLine()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                String inputLine \u003d input.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                if (inputLine.equals(\"bye\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    MainParser.exit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    Command c \u003d MainParser.handleInput(mode, inputLine);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    c.execute();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    //Storage.save(tasks.get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void main(String[] args) throws Exception { // Exception needs to be handled?"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        new Dolla().run();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 48,
      "Weng-Kexin": 8,
      "yetong1895": 1,
      "-": 2
    }
  },
  {
    "path": "src/main/java/dolla/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class Reminder extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    protected LocalDate today;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        ArrayList\u003cTask\u003e tasksDueSoon \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            Task currTask \u003d tasks.getFromList(i); //get the task from the list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            LocalDate get \u003d currTask.getDate().toLocalDate(); //get the time of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            LocalDate check \u003d today.plusDays(2);//remind the user 2 days before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            if (check.compareTo(get) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                tasksDueSoon.add(currTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        tasksDueSoon.sort(Comparator.comparing(Task::getDate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        msg.add(\"REMINDER!!! COMING SOON TASKS:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksDueSoon.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            msg.add((i + 1) + \".\"  + tasksDueSoon.get(i).getTask());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tatayu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 5,
      "tatayu": 28,
      "Weng-Kexin": 1,
      "yetong1895": 2
    }
  },
  {
    "path": "src/main/java/dolla/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Recurring;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.DoAfter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.FixDuration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import parser.MainParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": " * duke.Storage handles the saving and loading of data from ./data/duke.txt,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": " * as well as creating a new save file if it does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Returns a duke.task.TaskList containing tasks from a save file (if available, else create one),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * else returns an empty duke.task.TaskList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     This method first tries to read from ./data/duke.txt. For every line"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     in the file, this method checks the type of task stored, and then converts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     them into a task accordingly and stores into a duke.task.TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If ./data/duke.txt is not found, an empty duke.task.TaskList will be returned."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If an error occurs while reading from ./data/duke.txt, exit duke."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return duke.task.TaskList containing data (if any) from ./data/duke.txt."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.showWelcome();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                \"Hello! I\u0027m duke.Dolla! I help keep track of your tasks!\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"What can I do for you?\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            FileReader inFile \u003d new FileReader(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            BufferedReader inStream \u003d new BufferedReader(inFile);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Your save data has been loaded :)\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            String inLine;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            while ((inLine \u003d inStream.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                String[] inArray \u003d inLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                String type \u003d inArray[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Task newTask \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    newTask \u003d new ToDo(inArray[2]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    newTask \u003d new Event(inArray[2], Time.readDateTime(inArray[3])); //TODO: Update readTime"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    newTask \u003d new Deadline(inArray[2], Time.readDateTime(inArray[3]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else if (type.equals(\"R\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    newTask \u003d new Recurring(inArray[2],inArray[3]);//task description and day of the week."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else if (type.equals(\"A\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    newTask \u003d new DoAfter(inArray[2],inArray[3]);//task description and the day to do after"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else if (type.equals(\"W\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                    newTask \u003d new FixDuration(inArray[2], inArray[3]); //task description and time duration"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                if (inArray[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    newTask.markAsDone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                list.add(newTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Looks like it\u0027s your first time, let me create a save file for you :)\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            createFolder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (IOException e) { // exception handling"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            System.out.println(\"*** there was an error reading duke.txt ***\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            MainParser.exit(); // TODO: Find out what is supposed to happen here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method takes and writes the information of the tasks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *  within the specified ArrayList and into a file ./data/duke.txt."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *  \u003cp\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *      If an error occurs while writing to the file, the method stops running."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *  \u003c/p\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param list An Arraylist containing the tasks to be saved."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void save(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try (FileWriter file \u003d new FileWriter(\"./data/duke.txt\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            for (Task currTask : list) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                String fileContent \u003d currTask.formatSave();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                file.write(fileContent);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                file.write(System.lineSeparator());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            System.out.println(\"***Error writing to duke.txt***\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Create save file called data in root folder."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static  void createFolder() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        File f \u003d new File(\"data\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            boolean result \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                f.mkdir();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                result \u003d true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } catch (SecurityException e) { //security exception?"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 92,
      "Weng-Kexin": 19,
      "tatayu": 3,
      "yetong1895": 21
    }
  },
  {
    "path": "src/main/java/dolla/Time.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.Time is a class that handles all time related methods."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a LocalDateTime variable converted from the specified String timeStr that"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * was in the format \u0027dd/MM/yyyy HHmm\u0027."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param timeStr String to be converted into DateTimeFormatter type."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return A LocalDateTime variable that the computer can understand as time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static LocalDateTime readDateTime(String timeStr) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        LocalDateTime time \u003d LocalDateTime.parse(timeStr, formatter);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Returns a LocalDateTime variable converted from the specified String timeStr that"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * was in the format \u0027dd/MM/yyyy\u0027."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param timeStr String to be converted into DateTimeFormatter type."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return A LocalDateTime variable that the computer can understand as time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static LocalDate readDate(String timeStr) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        LocalDate time \u003d LocalDate.parse(timeStr, formatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * converts the time from LocalDateTime to string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param time in LocalDateTime format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return timeStr in \"dd/MM/yyyy HHmm\" format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static String dateTimeToString(LocalDateTime time) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String timeStr \u003d time.format(formatter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return timeStr;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 40,
      "Weng-Kexin": 7
    }
  },
  {
    "path": "src/main/java/dolla/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.Ui is a class that handles all interactions to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static String line \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method prints the strings of text from \u0027msg\u0027 with the proper format. Each element"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * from \u0027msg\u0027 is a line of text to be printed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param msg ArrayList of strings containing the messages to be printed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printMsg(ArrayList\u003cString\u003e msg) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        for (String outputMsg : msg) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            System.out.println(\"\\t\" + outputMsg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * This method prints the strings of text from \u0027s\u0027 with the proper format. Each element"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * from \u0027s\u0027 is a line of text to be printed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param s containing the messages to be printed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printMsg(String... s) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        final StringBuilder messageAccumulator \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        for (String str: s) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            messageAccumulator.append(str);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\t\" + messageAccumulator);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method prints the details of the specified task and specified duke.task.TaskList size."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method is typically called when a task is created, so that the user can"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * check the details of the created task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param currTask duke.task.Task to be printed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param listSize Size of the duke.task.TaskList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void echoAdd(Task currTask, int listSize) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"Got it. I\u0027ve added this task: \","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"  \" + currTask.getTask(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"Now you have \" + listSize + \" task(s) in the list.\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        printMsg(msg);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method prints the details of the specified entry."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method is typically called when an entry is entered, so that the user can"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * check the details of the created entry."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param currEntry Entry to be printed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void echoAddEntry(Entry currEntry) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\tGot it. I\u0027ve added this entry: \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\t\"+currEntry.getEntryText());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints an error message when date in not in the format \u0027DD/MM/YYYY HHmm\u0027."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printDateTimeFormatError() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"Please use the format \u0027DD/MM/YYYY HHmm\u0027!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints an error message when date in not in the format \u0027DD/MM/YYYY\u0027."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printDateFormatError() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tPlease use the format \u0027DD/MM/YYYY\u0027!\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints an error message when fixed duration entered is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public static void printFixDurationTaskError() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tSorry, please enter a valid fixed duration task.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will print the error message when the user enter a invalid recurring event."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void printRecurringTaskError() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tSorry, please enter a valid recurring event.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method will print the error message when the user enter a invalid day of the week."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printInvalidDayInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tSorry, please enter a valid day of the week.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method will print the error message when the user enter a invalid do after event."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printInvalidDoAfterInput() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tPlease enter a valid do after\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method will print the error message when the user enter a time that conflicts with a task"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * that\u0027s in the task list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printTimeConflictError(Task conflictingTask) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tI\u0027m sorry, an error has occurred!\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tThe time you have entered conflicts with the following task: \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\t  \" + conflictingTask.getTask());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"Try looking for another time. :)\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Prints the snoozed task with new date after successfully snoozing."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param snoozedTask task that was snoozed"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printSnoozedTask(Task snoozedTask) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tNoted. I have snoozed this task:\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\t\" + snoozedTask.getTaskDescription() + \" \" + snoozedTask.getDateStr());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Prints an error message for no date in task."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printNoDateToSnoozeError(Task taskToSnooze) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tOOPS! \" + taskToSnooze + \" do not have a date to snooze!\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Prints a default error message."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printErrorMsg() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tOOPS! An error has occurred.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints error message when taskNum is not associated to a task."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param taskNum the task number that is not associated with a task."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printNoTaskAssocError(int taskNum) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\t\" + taskNum + \" is not associated to any task number.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tUse \u0027list\u0027 to check the tasks that are here first!\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints error message when string parsed is not an integer."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param str to be parsed to an integer"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printInvalidNumberError(String str) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\t\" + str + \" is not a number. Please use a number instead!\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Prints error message when the new date to snooze until is before the old date."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printOldDateIsAfterError() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tOOPS! The new date given should be after the previous date!\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints error message when command given is invalid."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void printInvalidCommandError() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"\\tOOPS! The command is invalid. Please enter a valid command\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printInvalidEntryType() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\tPlease specify the type of entry you want to add: income or expense.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printInvalidEntryFormatError() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\tplease follow the format \" +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"\u0027add income(/expense) [AMOUNT] [DESCRIPTION] /on [DATE] {/tag [TAG]}\u0027\" +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 90,
      "Weng-Kexin": 120,
      "tatayu": 4,
      "yetong1895": 23
    }
  },
  {
    "path": "src/main/java/dolla/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.command.AddCommand is a subclass of Command that acts as a skeleton"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * for all other commands that involve adding tasks to the duke.task.TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Represents all the information given after the command in the input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Needs to be split and placed into proper variables later on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String taskDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected LocalDateTime time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String dateTrigger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String missingDescriptionString \u003d \"Please specify the task you want to add!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public AddCommand(String taskDescription) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns true if the method runs without running into any error."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     This method splits and correctly assigns the task description and time from the given input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the incorrect format is given in the input, the corresponding alert will be printed, and"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     the method will then return false."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return true if method runs successfully."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @see AddDeadlineCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @see AddEventCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public boolean splitDescTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String[] data \u003d taskDescription.split(dateTrigger + \" \"); // data[0] os description, data[1] is the time"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            time \u003d Time.readDateTime(data[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            taskDescription \u003d data[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Ui.printMsg(\"Please add \u0027\" + dateTrigger + \" \u003cdate\u003e\u0027 after your task to specify the event date.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }  catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printDateTimeFormatError();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns true if the method runs without running into any error."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     This method checks if any other task in the specified TaskList conflicts with the given time."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the incorrect format is given in the input, the corresponding alert will be printed, and"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     the method will then return false."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return true if method runs successfully."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @see AddDeadlineCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @see AddEventCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public boolean detectAnomalies(TaskList tasks, LocalDateTime time) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Task currTask \u003d tasks.getFromList(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            if (currTask.getDate().compareTo(time) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printTimeConflictError(tasks.getFromList(i));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 77,
      "Weng-Kexin": 3,
      "yetong1895": 2
    }
  },
  {
    "path": "src/main/java/dolla/command/AddDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.command.AddDeadlineCommand is a command used to add a deadline task into the duke.task.TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class AddDeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Add deadline command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param taskDescription the task description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public AddDeadlineCommand(String taskDescription) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(taskDescription); // taskDescription includes the task info and date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        time \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        dateTrigger \u003d \"/by\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Adds a deadline task into the specified duke.task.TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     The method first splits the input data into the task description and time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     Using the newly acquired data, a new duke.task.Deadline duke.task.Task is created and then stored into"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     the specified duke.task.TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the method encounters an error when trying to split the input data, the method"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     returns without doing anything."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        if (!splitDescTime()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//            return; // If error occurs, stop the method!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        if (!detectAnomalies(tasks, time)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//            return; // If error occurs, stop the method!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        Task newTask \u003d new Deadline(taskDescription, time);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        tasks.add(newTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        Ui.echoAdd(newTask, tasks.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 38,
      "Weng-Kexin": 11
    }
  },
  {
    "path": "src/main/java/dolla/command/AddDoAfterTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.DoAfter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * The type Add do after task command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class AddDoAfterTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new ddd do after task command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param taskDescription the task description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public AddDoAfterTaskCommand(String taskDescription) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super(taskDescription);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will split the user input into task description and the event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param tasks duke.task.TaskList containing all the tasks stored."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            position \u003d taskDescription.indexOf(\"/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            event \u003d taskDescription.substring(position + 10);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            Task newTask \u003d new DoAfter(taskDescription.substring(0, position - 1), event);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            Ui.echoAdd(newTask, tasks.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Ui.printInvalidDoAfterInput();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 4,
      "Weng-Kexin": 11,
      "yetong1895": 24
    }
  },
  {
    "path": "src/main/java/dolla/command/AddEntryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Entry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class AddEntryCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public AddEntryCommand(String type, double amount, String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Entry newEntry \u003d new Entry(type, amount, description, date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.echoAddEntry(newEntry);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 25,
      "Weng-Kexin": 2
    }
  },
  {
    "path": "src/main/java/dolla/command/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.command.AddEventCommand is a command used to add an event task into the duke.task.TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Add event command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param taskDescription the task description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public AddEventCommand(String taskDescription) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(taskDescription); // taskDescription includes the task info and date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        time \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        dateTrigger \u003d \"/at\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Adds an event task into the specified duke.task.TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     The method first splits the input data into the task description and time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     Using the newly acquired data, a new duke.task.Event duke.task.Task is created and then stored into"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     the specified duke.task.TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the method encounters an error when trying to split the input data, the method"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     returns without doing anything."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param tasks The duke.task.TaskList where the event task is to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (!splitDescTime()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return; // If error occurs, stop the method!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (!detectAnomalies(tasks, time)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return; // If error occurs, stop the method!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Task newTask \u003d new Event(taskDescription, time);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.echoAdd(newTask, tasks.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 35,
      "Weng-Kexin": 7,
      "yetong1895": 6
    }
  },
  {
    "path": "src/main/java/dolla/command/AddFixDurationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.FixDuration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class AddFixDurationCommand extends AddCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddFixDurationCommand(String taskDescription) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(taskDescription);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will split the string into the task description and the duration of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks duke.task.TaskList containing all the tasks stored."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception e when user input is invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            position \u003d taskDescription.indexOf(\"/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            duration \u003d taskDescription.substring(position + 8);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Task newTask \u003d new FixDuration(taskDescription.substring(0, position - 1), duration);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.echoAdd(newTask, tasks.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printFixDurationTaskError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 4,
      "Weng-Kexin": 2,
      "tatayu": 1,
      "yetong1895": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/dolla/command/AddRecurringTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Recurring;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class AddRecurringTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String dayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Time timeObj \u003d new Time();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddRecurringTaskCommand(String taskDescription) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(taskDescription);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will split the string into the task description and the day of the week."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks duke.task.TaskList containing all the tasks stored."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception e when user input is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            position \u003d taskDescription.indexOf(\"/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            dayOfWeek \u003d taskDescription.substring(position + 7);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            if (dayOfWeek.equals(\"monday\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    || dayOfWeek.equals(\"tuesday\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    || dayOfWeek.equals(\"wednesday\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    || dayOfWeek.equals(\"thursday\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    || dayOfWeek.equals(\"friday\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    || dayOfWeek.equals(\"saturday\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    || dayOfWeek.equals(\"sunday\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                Task newTask \u003d new Recurring(taskDescription.substring(0, position - 1), dayOfWeek);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                Ui.echoAdd(newTask, tasks.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                Ui.printInvalidDayInput();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printRecurringTaskError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 5,
      "Weng-Kexin": 2,
      "yetong1895": 11,
      "-": 27
    }
  },
  {
    "path": "src/main/java/dolla/command/AddTodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * AddToDoCommand is a command used to add a todo task into the duke.task.TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class AddTodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public AddTodoCommand(String taskDescription) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(taskDescription);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Adds a todo task into the specified duke.task.TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the task description is missing, return without doing anything."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        if (taskDescription.length() \u003d\u003d 0) { // TODO: Exception handling?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//            Ui.printMsg(missingDescriptionString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//            return;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        Task newTask \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        tasks.add(newTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        Ui.echoAdd(newTask, tasks.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 29,
      "Weng-Kexin": 1
    }
  },
  {
    "path": "src/main/java/dolla/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * Command is an abstract class which all types of command will inherit from."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method is called to read/write the specified duke.task.TaskList after every user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @throws Exception handle exception"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public abstract void execute() throws Exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns an integer variable from the specified string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     Returns 0 if the specified string is not of a number."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     Mainly used for using the specified string for calculations in the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     IE. Accessing arrays."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param str String (of number) to be converted into integer type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return Integer type of the specified string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public int stringToInt(String str) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        int newInt \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            newInt \u003d Integer.parseInt(str);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Ui.printInvalidNumberError(str);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return newInt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void extractDesc(String inputLine) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 35,
      "Weng-Kexin": 4,
      "yetong1895": 1
    }
  },
  {
    "path": "src/main/java/dolla/command/CompleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.command.CompleteCommand is a type of command used to change the variable \u0027isDone\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * in given particular task in the task list to true."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class CompleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String taskNumStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Creates an instance of duke.command.CompleteCommand with the specified task number."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param taskNumStr The number of the task in task list to be marked as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public CompleteCommand(String taskNumStr) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.taskNumStr \u003d taskNumStr;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * If the \u0027isDone\u0027 variable of the task in \u0027tasks\u0027 corresponding to \u0027taskNumStr\u0027 is false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * change to true and print out confirmation message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If \u0027taskNumStr\u0027 does not correspond to any of the task numbers in \u0027tasks\u0027, print an"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     error message and return without changing \u0027tasks\u0027."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the \u0027isDone\u0027 variable of the task is already true, print a message to alert the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param tasks The task list to be accessed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @throws Exception handle exception"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(TaskList tasks) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        int taskNumInt \u003d stringToInt(taskNumStr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (taskNumInt \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return; // don\u0027t do anything if task number is invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Task currTask;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            currTask \u003d tasks.getFromList(taskNumInt - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Ui.printNoTaskAssocError(taskNumInt);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            throw new Exception(\"duke.task.Task number not in list\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (currTask.getIsDone() \u003d\u003d true) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"duke.task.Task \" + taskNumInt + \" is already completed! :)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            currTask.markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"  \" + currTask.getTask());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 56,
      "Weng-Kexin": 3,
      "yetong1895": 4
    }
  },
  {
    "path": "src/main/java/dolla/command/ErrorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.command.ErrorCommand is a type of command that is generated if a proper command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * could not be produced. IE. as a result of invalid inputs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class ErrorCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return; // Don\u0027t do anything"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 12,
      "Weng-Kexin": 4
    }
  },
  {
    "path": "src/main/java/dolla/command/FindStringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * FindStringCommand is a Command used to find tasks corresponding to the user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class FindStringCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String inputLine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String commandName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public FindStringCommand(String inputLine) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.inputLine \u003d inputLine;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.commandName \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Find tasks corresponding to the user input from the specified TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     The method first retrieves the String to search for from \u0027inputLine\u0027."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     The method then looks through all the tasks in the specified TaskList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     and checks if the recently retrieved string is a substring of any of"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     the tasks. Any matches to the task are stored in an ArrayList that gets"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     printed subsequently."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the user did not input any strings to search for, an error will be printed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     and the method will return without doing anything."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param tasks The TaskList containing the tasks to be searched."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String searchStr \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            searchStr \u003d inputLine.substring(commandName.length() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Please use the format \u0027find \u003cstring\u003e\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printMsg(msg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        // Find tasks that match the searchStr and add into itemsFound"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e itemsFound \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        for (Task currTask : tasks.get()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            String taskStr \u003d currTask.getTask();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            if (taskStr.indexOf(searchStr) !\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                itemsFound.add(taskStr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (itemsFound.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"There are no matching tasks in your list :(\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            for (int i \u003d 0; i \u003c itemsFound.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                msg.add((i + 1) + \".\"  + itemsFound.get(i));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 70,
      "Weng-Kexin": 2
    }
  },
  {
    "path": "src/main/java/dolla/command/RemoveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * RemoveCommand is a Command used to remove a Task from the TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String taskNumStr;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public RemoveCommand(String taskNumStr) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.taskNumStr \u003d taskNumStr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Removes a task from the specified TaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     The method first converts taskNumStr into an int. It will then check if a task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     corresponding to that number exists in the specified TaskList and subsequently"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     remove that task if so."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If taskNumStr is not an int, the method will return without doing anything."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If taskNumInt does not correspond to any task in the specified TaskList, an"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     alert is printed to the user, and the method will return."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param tasks The TaskList where the task corresponding to taskNum is to removed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        int taskNumInt \u003d stringToInt(taskNumStr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (taskNumInt \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return; // don\u0027t do anything if task number is invalid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            tasks.getFromList(taskNumInt - 1); // Check if the task exists first"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"  \" + tasks.getFromList(taskNumInt - 1).getTask());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            tasks.removeFromList(taskNumInt - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Ui.printNoTaskAssocError(taskNumInt);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 47,
      "Weng-Kexin": 3,
      "yetong1895": 4
    }
  },
  {
    "path": "src/main/java/dolla/command/ShowListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.command.ShowListCommand is a command used to display all the tasks stored in the duke.task.TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class ShowListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Creates and prints out the tasks from the specified duke.task.TaskList in a readable format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param tasks duke.task.TaskList to have its tasks printed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        msg.add(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Task currTask \u003d tasks.getFromList(i);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add((i + 1) + \".\"  + currTask.getTask());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 26,
      "Weng-Kexin": 2
    }
  },
  {
    "path": "src/main/java/dolla/command/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * A command to snooze tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected String taskNumStr;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected String newDateStr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Snooze command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param taskNumStr the task num str"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param newDateStr the new date str"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public SnoozeCommand(String taskNumStr, String newDateStr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.taskNumStr \u003d taskNumStr;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.newDateStr \u003d newDateStr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public void execute(TaskList tasks) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        int taskNumInt \u003d stringToInt(taskNumStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        LocalDateTime date \u003d Time.readDateTime(newDateStr); // Default date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Task taskToSnooze \u003d tasks.getFromList(taskNumInt - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            char type \u003d taskToSnooze.getTaskType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            if (type \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                Ui.printNoDateToSnoozeError(taskToSnooze);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } else if (type \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                Task newTask \u003d new Deadline(taskToSnooze.getTaskDescription(), date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                if (newDateIsAfter(taskToSnooze, newTask)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    tasks.replaceTask(taskNumInt - 1, newTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    Ui.printSnoozedTask(newTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    Ui.printOldDateIsAfterError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } else if (type \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                Task newTask \u003d new Event(taskToSnooze.getTaskDescription(), date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                if (newDateIsAfter(taskToSnooze, newTask)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    tasks.replaceTask(taskNumInt - 1, newTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    Ui.printSnoozedTask(newTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    Ui.printOldDateIsAfterError();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                Ui.printErrorMsg();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Ui.printNoTaskAssocError(taskNumInt);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Checks if the new date given is after the old date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param oldTask task with the old date"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param newTask task with the new date"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return true if the new date is after the old date, else false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public boolean newDateIsAfter(Task oldTask, Task newTask) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        LocalDateTime oldDate \u003d oldTask.getDate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        LocalDateTime newDate \u003d newTask.getDate();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (oldDate.isBefore(newDate)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 7,
      "Weng-Kexin": 72
    }
  },
  {
    "path": "src/main/java/dolla/command/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * The type View schedule command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected LocalDate viewDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String dateStr;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new View schedule command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param dateStr the date string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewScheduleCommand(String dateStr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (dateStr.equals(\"today\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            viewDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            this.viewDate \u003d Time.readDate(dateStr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateStr \u003d dateStr;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasksOnGivenDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            Task currTask \u003d tasks.getFromList(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (currTask.getDate().toLocalDate().compareTo(viewDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                tasksOnGivenDate.add(currTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tasksOnGivenDate.sort(Comparator.comparing(Task::getDate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        msg.add(\"Here is the schedule for \" + dateStr + \":\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksOnGivenDate.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add((i + 1) + \".\"  + tasksOnGivenDate.get(i).getTask());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 6,
      "Weng-Kexin": 10,
      "-": 35
    }
  },
  {
    "path": "src/main/java/dolla/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.task.Deadline is a type of duke.task.Task that stores the task description and due date of said task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Creates an instance with specified task description and due date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param description String of what the task entails."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param date duke.Time data of the day the task is due."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Deadline(String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        type \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a string of when the task is due in the format \u0027(by 11/11/1111 0000)\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * for printing purposes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return string of when the task is due in the format \u0027(by 11/11/1111 0000)\u0027."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String byStr \u003d timeToString(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"(by: \" + byStr + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a string of when the task is due in the format \u0027 | 11/11/1111 0000\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * for saving purposes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return a string of when the task is due in the format \u0027 | 11/11/1111 0000\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String formatDateSave() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String byStr \u003d timeToString(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \" | \" + byStr;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 42
    }
  },
  {
    "path": "src/main/java/dolla/task/DoAfter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will set the type of a do after task to A and set the description and event as"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * the input parameters."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param description is the description of the string"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param event is the event that the user want to do his/her activity after."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public DoAfter(String description, String event) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        type \u003d \u0027A\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will return the string showing the do after and the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return a string containing do after and the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return \"(do after: \" + event + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will return the save format of the event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return a string containg the save format to do after."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String formatDateSave() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return \" | \" + event;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 1,
      "yetong1895": 34
    }
  },
  {
    "path": "src/main/java/dolla/task/Entry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Entry {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected char sign; // \u0027+\u0027 for income, \u0027-\u0027 for expense"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected double amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected LocalDateTime date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Entry(String type, double amount, String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.sign \u003d (type.equals(\"income\") ? \u0027+\u0027 : \u0027-\u0027);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getEntryText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"[\" + type + \"] \" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"[\" + amountToMoney() + \"] \" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"[\" + description + \"] \" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"[/on \" + Time.dateTimeToString(date) + \"]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String amountToMoney() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"$\" + amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 33
    }
  },
  {
    "path": "src/main/java/dolla/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.task.Deadline is a type of duke.task.Task that stores the task description and due date of said task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Creates an instance with specified task description and due date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param description String of what the task entails."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param date duke.Time data of the day the task is due."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Event(String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        type \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a string of when the task is due in the format \u0027(at 11/11/1111 0000)\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * for printing purposes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return string of when the task is due in the format \u0027(at 11/11/1111 0000)\u0027."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String atStr \u003d timeToString(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"(at: \" + atStr + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a string of when the task is due in the format \u0027 | 11/11/1111 0000\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * for saving purposes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return a string of when the task is due in the format \u0027 | 11/11/1111 0000\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String formatDateSave() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String atStr \u003d timeToString(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \" | \" + atStr;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 42
    }
  },
  {
    "path": "src/main/java/dolla/task/FixDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tatayu"
        },
        "content": "public class FixDuration extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will set the type of a fix duration task to w and set the description and duration in this"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * class as the input parameters."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param description is the description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param duration is the period of time that the user want to fix."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public FixDuration(String description, String duration) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        type \u003d \u0027W\u0027;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will return the duration of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return a string containing \"within\" and the duration of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return \"(within \" + duration + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public String formatDateSave() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return \" | \" + duration;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tatayu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 1,
      "tatayu": 21,
      "yetong1895": 9
    }
  },
  {
    "path": "src/main/java/dolla/task/Recurring.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class Recurring extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will set the type of a recurring task to R and set the description and day in this class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * as the input parameters."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param description is the description of the task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param day is the day of the week that the user want the recurring to happen."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public Recurring(String description, String day) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d \u0027R\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method will return the string which day the recurring event is."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string containing every and the day of the week that the recurring occur on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"(every: \" + day + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will a return a string in save format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return a string containg the save format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String formatDateSave() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return \" | \" + day;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 1,
      "yetong1895": 10,
      "-": 24
    }
  },
  {
    "path": "src/main/java/dolla/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected char type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected LocalDateTime date \u003d Time.readDateTime(\"01/01/0001 0000\"); // Default date"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return (isDone ? \"O\" : \"X\"); // returns O or X"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * converts the time from LocalDateTime to string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param time in LocalDateTime format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return timeStr in \"dd/MM/yyyy HHmm\" format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String timeToString(LocalDateTime time) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String timeStr \u003d time.format(formatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return timeStr;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"[\" + type + \"][\" + getStatusIcon() + \"] \" + description + getDateStr();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String formatDateSave() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String formatSave() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return type + \" | \" + (isDone ? 1 : 0) + \" | \" + description + formatDateSave();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public char getTaskType() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 57,
      "Weng-Kexin": 7,
      "yetong1895": 6
    }
  },
  {
    "path": "src/main/java/dolla/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e importTaskList) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.list \u003d importTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public ArrayList\u003cTask\u003e get() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        list.add(newTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public Task getFromList(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void removeFromList(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void replaceTask(int index, Task newTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        list.set(index, newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 19,
      "Weng-Kexin": 1,
      "yetong1895": 15
    }
  },
  {
    "path": "src/main/java/dolla/task/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.task.ToDo is a type of duke.task.Task that only stores the task description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Creates an instance with specified task description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param description String of what the task entails."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        type \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 16
    }
  },
  {
    "path": "src/main/java/parser/DollaParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddEntryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.ErrorCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class DollaParser extends Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public DollaParser(String inputLine) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(inputLine);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Command handleInput(String inputLine) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String[] inputArray \u003d inputLine.split(\" \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String commandToRun \u003d inputArray[0];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (commandToRun.equals(\"add\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            String entryType \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            double amount \u003d 0.0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                entryType \u003d verifyType(inputArray[1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                amount \u003d stringToDouble(inputArray[2]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                splitDescTime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printInvalidEntryFormatError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new ErrorCommand(); // If error occurs, stop the method!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return new AddEntryCommand(entryType, amount, description, date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//            switch(commandToRun) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//                case \"income\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//                case \"expense\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//                    return new AddExpenseCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//                default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//                    return new ErrorCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printInvalidCommandError();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return new ErrorCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private String verifyType(String s) throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (s.equals(\"income\") || s.equals(\"expense\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printInvalidEntryType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            throw new Exception(\"invalid type\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 53,
      "Weng-Kexin": 4
    }
  },
  {
    "path": "src/main/java/parser/MainParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.CompleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.RemoveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.ShowListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.FindStringCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.ViewScheduleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.SnoozeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.ErrorCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddTodoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddDoAfterTaskCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddFixDurationCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddRecurringTaskCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * MainParser checks the user input and creates a command corresponding to the user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class MainParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a command corresponding to the user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     This method checks the first word of the \u0027inputLine\u0027 and returns the case"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     accordingly."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the first word is not \u0027list\u0027, \u0027done\u0027, \u0027remove\u0027 or \u0027find\u0027, addToList() will"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     run instead."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If a number is not provided in a done or remove command, an error will be printed,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     and an ErrorCommand will be returned."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param mode The mode Dolla is currently on."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return a command corresponding to the user input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static Command handleInput(String mode, String inputLine) { // TODO: Rename to something else"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "//        String inputLine \u003d input.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String[] inputArray \u003d inputLine.split(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String command \u003d inputArray[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            //return new ExitCommand(); // TODO"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else if (command.equals(\"dolla\") || command.equals(\"entries\") ||"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        command.equals(\"limits\") || command.equals(\"debts\") ||"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        command.equals(\"shortcuts\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            //return new SwitchModeCommand(); // TODO"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"dolla\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            DollaParser dollaParser \u003d new DollaParser(inputLine);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            //System.out.println(\"Running DollaParser...\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return dollaParser.handleInput(inputLine);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printInvalidCommandError();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return new ErrorCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String[] inputArray \u003d inputLine.split(\" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String command \u003d inputArray[0];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return new ShowListCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new CompleteCommand(inputArray[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Arrays.asList(\"Please use the format \u0027done \u003cnumber\u003e\u0027!\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printMsg(msg);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"remove\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new RemoveCommand(inputArray[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                        \"Please use the format \u0027remove \u003cnumber\u003e\u0027!\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printMsg(msg);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return new FindStringCommand(inputLine);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new ViewScheduleCommand(inputArray[1]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                        \"Please use the format \u0027view today\u0027 or \u0027view \u003cdate\u003e\u0027!\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printMsg(msg);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printDateFormatError();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"snooze\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                String dateTimeArray \u003d inputArray[2] + \" \" + inputArray[3];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new SnoozeCommand(inputArray[1], dateTimeArray);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printMsg(\"Please use the format \u0027snooze \u003ctask number\u003e \u003cnew date\u003e \u003cnew time\u003e\u0027!\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printDateFormatError();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return addToList(command, inputLine);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns an add command corresponding to the specified command, otherwise alert the user"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * that the command is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param command The command to be created,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param inputLine The entire line input from the user."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return Add command corresponding to the specified command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static Command addToList(String command, String inputLine) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String taskDescription;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Command commandToRun \u003d new ErrorCommand();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            taskDescription \u003d inputLine.substring(command.length() + 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                commandToRun \u003d new AddTodoCommand(taskDescription);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                commandToRun \u003d new AddEventCommand(taskDescription);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                commandToRun \u003d new AddDeadlineCommand(taskDescription);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            case \"duration\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                commandToRun \u003d new AddFixDurationCommand(taskDescription);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            case \"recurring\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                commandToRun \u003d new AddRecurringTaskCommand(taskDescription);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            case \"after\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                commandToRun \u003d new AddDoAfterTaskCommand(taskDescription);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printInvalidCommandError();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    \"Invalid command given!\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printMsg(msg);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return commandToRun;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method will exit the entire program."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"Bye. Hope to see you again soon!\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //duke.Storage.save(tasks); // Don\u0027t need to save since any previous commands are already saved"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 171,
      "Weng-Kexin": 20
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected LocalDateTime date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String inputLine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Parser(String inputLine) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.inputLine \u003d inputLine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public abstract Command handleInput(String inputLine);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns true if the method runs without running into any error."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     This method splits and correctly assigns the task description and time from the given input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the incorrect format is given in the input, the corresponding alert will be printed, and"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     the method will then return false."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return true if method runs successfully."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @see AddDeadlineCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @see AddEventCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void splitDescTime() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String[] data \u003d inputLine.split(\" /on \"); // data[0] os description, data[1] is the time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String dateString \u003d (data[1].split(\"/tag\"))[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            date \u003d Time.readDateTime(dateString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            description \u003d data[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printMsg(\"Please add \u0027/at \u003cdate\u003e\u0027 after your task to specify the entry date.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            throw new Exception(\"missing date\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }  catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printDateTimeFormatError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            throw new Exception(\"invalid date\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a double variable from the specified string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     Returns 0 if the specified string is not of a number."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     Mainly used for using the specified string for calculations in the command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     IE. Accessing arrays."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param str String (of number) to be converted into integer type."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return Integer type of the specified string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public double stringToDouble(String str) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        double newDouble \u003d 0.0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            newDouble \u003d Double.parseDouble(str);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printInvalidNumberError(str);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return newDouble;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 69,
      "Weng-Kexin": 4
    }
  },
  {
    "path": "src/test/java/AddTodoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// TODO: Find out how to do testing for void methods"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddTodoCommandTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute_missingDescription() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //assertEquals(void, new AddTodoCommand(\"\").execute(new TaskList(null)));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 5,
      "-": 4
    }
  },
  {
    "path": "src/test/java/CompleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.CompleteCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CompleteCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_indexInBounds_success() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Task sampleTodo \u003d new ToDo(\"Sample Task\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(sampleTodo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        new CompleteCommand(\"1\").execute(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, tasks.getFromList(0).getIsDone());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_indexOutOfBounds_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new CompleteCommand(\"1\").execute(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"Task number not in list\", e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 3,
      "Weng-Kexin": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/DollaTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class DollaTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 8,
      "Weng-Kexin": 1,
      "-": 1
    }
  }
]
