[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile(\"org.junit.jupiter:junit-jupiter-api:5.4.2\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/dolla/Dolla.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.EntryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.LogList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.parser.MainParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import static dolla.Storage.load;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * \u003ch1\u003eduke.Dolla\u003c/h1\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * duke.Dolla is a chat-bot styled todo_list manager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * @author  Aik Peng"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * @since   2019-07-26"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class Dolla {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    //private TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private DollaData dollaData \u003d new DollaData();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    //Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Creates an instance of Dolla using a data loaded from /data/dolla.txt"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public Dolla() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //tasks \u003d new TaskList(Storage.load());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        load(); //load from save"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Runs the main program of duke.Dolla"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @throws Exception when exceptional condition happens"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void run() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //Reminder reminderObject \u003d new Reminder(); //reminder pop up"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //reminderObject.execute(tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"hi\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        Reminder reminder \u003d new Reminder(\"debt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        reminder.showReminder(dollaData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Scanner input \u003d new Scanner(System.in); // TODO: Add to Ui or MainParser instead?"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        while (isExit \u003d\u003d false) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            if (input.hasNextLine()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                String inputLine \u003d input.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                if (inputLine.equals(\"bye\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    MainParser.exit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    Command c \u003d MainParser.handleInput(dollaData.getMode(), inputLine);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    c.execute(dollaData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void main(String[] args) throws Exception { // Exception needs to be handled?"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        new Dolla().run();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 45,
      "Weng-Kexin": 10,
      "tatayu": 2,
      "yetong1895": 7,
      "-": 2
    }
  },
  {
    "path": "src/main/java/dolla/DollaData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.DebtList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.EntryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.LimitList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.LogList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.Log;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import static dolla.Storage.getDebtsFromSave;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import static dolla.Storage.getEntriesFromSave;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import static dolla.Storage.getLimitsFromSave;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * The type Dolla data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class DollaData {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private String mode \u003d \"dolla\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private EntryList entryList; // TODO: Find out alternatives to using a public variable"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private DebtList debtList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private LimitList limitList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private String prevMode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private int modifyIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Dolla data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public DollaData() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        //this.entryList \u003d new EntryList(new ArrayList\u003cLog\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.entryList \u003d new EntryList(getEntriesFromSave()); //Import from save file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.limitList \u003d new LimitList(getLimitsFromSave()); //Import from save file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.debtList \u003d new DebtList(getDebtsFromSave()); //Import from save file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns the relevant LogList (ie. EntryList) according to the specified mode."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param mode The mode pertaining to the LogList to be retrieved."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return The LogList according to the specified mode."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public LogList getLogList(String mode) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        if (mode.equals(\"entry\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return entryList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (mode.equals(\"debt\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            return debtList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (mode.equals(\"limit\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return limitList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return null; // placeholder so that Dolla can compile"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Adds a new Log (ie. Entry) into the relevant LogList (ie. EntryList) according to the specified mode."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param mode   The mode pertaining to the LogList to be retrieved."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param newLog The new Log to be added into the relevant LogList."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void addToLogList(String mode, Log newLog) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        if (mode.equals(\"entry\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            entryList.add(newLog);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (mode.equals(\"debt\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            debtList.add(newLog);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (mode.equals(\"limit\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            limitList.add(newLog);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Add to prev position."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param mode         the mode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param newLog       the new log"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param prevPosition the prev position"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void addToPrevPosition(String mode, Log newLog, int prevPosition) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (mode.equals(\"entry\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            entryList.insertPrevPosition(prevPosition,newLog);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (mode.equals(\"debt\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            debtList.insertPrevPosition(prevPosition,newLog);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (mode.equals(\"limit\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            limitList.insertPrevPosition(prevPosition,newLog);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Remove from log list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param mode  the mode"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param index the index"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void removeFromLogList(String mode, int index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (mode.equals(\"entry\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            entryList.removeFromList(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (mode.equals(\"debt\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            debtList.removeFromList(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (mode.equals(\"limit\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            limitList.removeFromList(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Modify log list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param newLog the new log"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void modifyLogList(Log newLog) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (prevMode.equals(\"entry\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            entryList.removeFromList(modifyIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            entryList.addWithIndex(modifyIndex, newLog);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Gets mode."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return the mode"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getMode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Update mode."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param newMode the new mode"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void updateMode(String newMode) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        mode \u003d newMode;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prep for modify."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param prevMode the prev mode"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param index    the index"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void prepForModify(String prevMode, int index) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.prevMode \u003d prevMode;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        modifyIndex \u003d index;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Gets modify index."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return the modify index"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public int getModifyIndex() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return modifyIndex;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Remove limit."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param type     the type of limit to remove"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param duration the duration of the limit to remove"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public void removeLimit(String type, String duration) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        //remove limit from list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 48,
      "Weng-Kexin": 64,
      "tatayu": 8,
      "yetong1895": 42
    }
  },
  {
    "path": "src/main/java/dolla/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.task.LogList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * Class handles Reminder-related methods."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tatayu"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    protected LocalDate today;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private String mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Reminder."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param mode the mode"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public Reminder(String mode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.mode \u003d \"debt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Show reminder."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param dollaData the dolla data"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public void showReminder(DollaData dollaData) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        LogList logList \u003d new LogList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        logList \u003d dollaData.getLogList(mode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        printReminder(today, logList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Print reminder."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param today   the today"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param logList the log list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public void printReminder(LocalDate today, LogList logList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(\"\\tREMINDER!!!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        int listNum \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        for (int i \u003d 0; i \u003c logList.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            LocalDate temp \u003d logList.get().get(i).getDate(); //get the time for that log"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            LocalDate check \u003d today.plusDays(2); //remind the user 2 days before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            if (check.compareTo(temp) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                listNum +\u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                System.out.println(\"\\t\" + listNum + \". \" + logList.get().get(i).getLogText());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        if (listNum \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            Ui.printNoReminderMsg();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tatayu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 2,
      "tatayu": 36,
      "Weng-Kexin": 20
    }
  },
  {
    "path": "src/main/java/dolla/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.parser.MainParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Debt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Entry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Limit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Log;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": " * duke.Storage handles the saving and loading of data from ./data/duke.txt,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * as well as creating a new save file if it does not exist."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected static ArrayList\u003cLog\u003e entries \u003d new ArrayList\u003cLog\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected static ArrayList\u003cLog\u003e limits \u003d new ArrayList\u003cLog\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected static ArrayList\u003cLog\u003e debts \u003d new ArrayList\u003cLog\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected static ArrayList\u003cLog\u003e shortcuts \u003d new ArrayList\u003cLog\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private static double stringToDouble(String str) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        double newDouble \u003d 0.0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            newDouble \u003d Double.parseDouble(str);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            Ui.printInvalidNumberError(str);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return newDouble;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Returns a duke.task.TaskList containing tasks from a save file (if available, else create one),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * else returns an empty duke.task.TaskList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     This method first tries to read from ./data/duke.txt. For every line"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     in the file, this method checks the type of task stored, and then converts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     them into a task accordingly and stores into a duke.task.TaskList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If ./data/duke.txt is not found, an empty duke.task.TaskList will be returned."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If an error occurs while reading from ./data/duke.txt, exit duke."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void load() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.showWelcome();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                \"Hello! I\u0027m Dolla! I help keep track of your finance!\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"What can I do for you?\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            FileReader inFile \u003d new FileReader(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            BufferedReader inStream \u003d new BufferedReader(inFile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Your save data has been loaded :)\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            String inLine;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            while ((inLine \u003d inStream.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                String[] inArray \u003d inLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                int numOfElements \u003d inArray.length;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                String type \u003d inArray[0];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                Log newLog \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                //System.out.println(inArray[0] + \" \u003d\u003d\u003d----\"+inArray[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                switch (type) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                case \"I\": //check if there is a tag"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    if (numOfElements \u003d\u003d 4) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        newLog \u003d new Entry(\"income\", stringToDouble(inArray[1]), inArray[2],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                                Time.readDate(inArray[3])); //income [AMOUNT] [DESCRIPTION] /on [DATE]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    else if (numOfElements \u003d\u003d 5) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        newLog \u003d new income(inArray[1],inArray[2],Time.readDate(inArray[3]),inArray[4]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        //income [AMOUNT] [DESCRIPTION] /on [DATE] /tag [TAG]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                case \"E\": //check if there is a tag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    if (numOfElements \u003d\u003d 4) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        newLog \u003d new Entry(\"expense\", stringToDouble(inArray[1]), inArray[2],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                                Time.readDate(inArray[3])); //expense [AMOUNT] [DESCRIPTION] /on [DATE]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    else if (numOfElements \u003d\u003d 5) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        newLog \u003d new expense(inArray[1],inArray[2],Time.readDate(inArray[3]),inArray[4]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        //expense [AMOUNT] [DESCRIPTION] /on [DATE] /tag [TAG]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                case \"RI\"://no start date, check if there is a tag"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    if(numOfElements \u003d\u003d 4) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        newLog \u003d new recurringIncome(inArray[1],inArray[2],Time.readDate(inArray[3]));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        //recurringIncome [AMOUNT] [DESCRIPTION] /on [DATE]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    } else if(numOfElements \u003d\u003d 5) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        newLog \u003d new recurringIncome(inArray[1],inArray[2],Time.readDate(inArray[3]),inArray[4]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        //recurringIncome [AMOUNT] [DESCRIPTION] /on [DATE] /tag [TAG]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                case \"RE\"://no start date, check if there is a tag"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    if(numOfElements \u003d\u003d 4) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        newLog \u003d new recurringExpanse(inArray[1],inArray[2],Time.readDate(inArray[3]));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        //recurringExpense [AMOUNT] [DESCRIPTION] /on [DATE]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    } else if (numOfElements \u003d\u003d 5) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        newLog \u003d new recurringExpense(inArray[1],inArray[2],Time.readDate(inArray[3]),inArray[4]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        //recurringExpense [AMOUNT] [DESCRIPTION] /on [DATE] /tag [TAG]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                case \"BU\": //must include 3 additional word, every,for and tag"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    //if (inArray[3].equals(\"every\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    newLog \u003d new Limit(\"budget\",stringToDouble(inArray[1]), inArray[2]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    /*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    else if (inArray[3].equals(\"for\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        newLog \u003d new budgetFor(inArray[1],Time.readDate(inArray[2]));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    } else if (inArray[3].equals(\"tag\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                        newLog \u003d new budgetTag(inArray[1],inArray[2]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                case \"S\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    newLog \u003d new Limit(\"saving\", stringToDouble(inArray[1]), inArray[2]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                case \"O\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    newLog \u003d new Debt(\"owe\", inArray[1], stringToDouble(inArray[2]), inArray[3],"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                            Time.readDate(inArray[4]));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                case\"B\":"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    newLog \u003d new Debt(\"borrow\", inArray[1], stringToDouble(inArray[2]), inArray[3],"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                            Time.readDate(inArray[4]));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                //case\"shortcut\": //special case for shortcut,only one string"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    //newLog \u003d new shortcut(inArray[1]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    //break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    System.out.println(\"save file corrupted\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (type.equals(\"I\") || type.equals((\"E\")) || type.equals(\"RI\") || type.equals(\"RE\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    entries.add(newLog);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else if (type.equals(\"BU\") || type.equals(\"S\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    limits.add(newLog);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else if (type.equals(\"O\") || type.equals(\"B\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    debts.add(newLog);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else if (type.equals(\"shortcut\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    shortcuts.add(newLog);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                save();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Looks like it\u0027s your first time, let me create a save file for you :)\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            createFolder();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (IOException e) { // exception handling"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            System.out.println(\"*** there was an error reading duke.txt ***\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            MainParser.exit(); // TODO: Find out what is supposed to happen here"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        //return list;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static ArrayList\u003cLog\u003e getEntriesFromSave() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static ArrayList\u003cLog\u003e getLimitsFromSave() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return limits;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static ArrayList\u003cLog\u003e getDebtsFromSave() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return debts;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static ArrayList\u003cLog\u003e getShortcutsFromSave() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return shortcuts;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void setEntries(ArrayList\u003cLog\u003e entries) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Storage.entries \u003d entries;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void setLimits(ArrayList\u003cLog\u003e limits) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Storage.limits \u003d limits;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void setDebts(ArrayList\u003cLog\u003e debts) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Storage.debts \u003d debts;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void setShortcuts(ArrayList\u003cLog\u003e shortcuts) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Storage.shortcuts \u003d shortcuts;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * //TODO: do javadoc."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void save() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        try (FileWriter file \u003d new FileWriter(\"./data/duke.txt\")) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            for (Log currEntries : entries) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                String fileContent \u003d currEntries.formatSave();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                file.write(fileContent);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                file.write(System.lineSeparator());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            for (Log currLimits : limits) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                String fileContent \u003d currLimits.formatSave();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                file.write(fileContent);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                file.write(System.lineSeparator());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            for (Log currDebts : debts) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                String fileContent \u003d currDebts.formatSave();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                file.write(fileContent);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                file.write(System.lineSeparator());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            for (Log currShortcuts : shortcuts) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                String fileContent \u003d currShortcuts.formatSave();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                file.write(fileContent);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                file.write(System.lineSeparator());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            System.out.println(\"***Error writing to duke.txt***\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void save(Log saveList) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        try (FileWriter file \u003d new FileWriter(\"./data/duke.txt\",true)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            String fileContent \u003d saveList.formatSave();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            System.out.println(fileContent); ///////////////////////"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            file.write(fileContent);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            file.write(System.lineSeparator());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            System.out.println(\"***Error writing to duke.txt***\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Create save file called data in root folder."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static  void createFolder() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        File f \u003d new File(\"data\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            boolean result \u003d false;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                f.mkdir();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                result \u003d true;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } catch (SecurityException e) { //security exception?"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 48,
      "Weng-Kexin": 86,
      "tatayu": 1,
      "yetong1895": 140
    }
  },
  {
    "path": "src/main/java/dolla/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * This class handles tag related inputs."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected String inputLine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private String[] inputArray;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private int tagIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static final String PREFIX_TAG \u003d \"/tag\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Tag."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param inputLine the input line"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public Tag(String inputLine) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.inputLine \u003d inputLine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.inputArray \u003d inputLine.split(SPACE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.tagName \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.tagIndex \u003d - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Formats state as text for viewing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Checks if inputArray has tag and changes tagIndex to the index of the tag name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return true if inputArray contains \"/tag\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private Boolean hasTag() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Boolean hasTag \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        int arraySize \u003d inputArray.length;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (arraySize \u003e 1 \u0026\u0026 inputArray[arraySize - 2].equalsIgnoreCase((PREFIX_TAG))) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            tagIndex \u003d arraySize - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            hasTag \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return hasTag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private void findTag() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        tagName \u003d inputArray[tagIndex];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Parse tag."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public void parseTag() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (hasTag()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            findTag();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            //todo: store tag properly instead of printing it out."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            System.out.println(\"TAG IS \" + getTagName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Gets tag name."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return the tag name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 71
    }
  },
  {
    "path": "src/main/java/dolla/Time.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.Time is a class that handles all time related methods."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a LocalDateTime variable converted from the specified String timeStr that"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * was in the format \u0027dd/MM/yyyy HHmm\u0027."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param timeStr String to be converted into DateTimeFormatter type."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return A LocalDateTime variable that the computer can understand as time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static LocalDateTime readDateTime(String timeStr) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        LocalDateTime time \u003d LocalDateTime.parse(timeStr, formatter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Returns a LocalDateTime variable converted from the specified String timeStr that"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * was in the format \u0027dd/MM/yyyy\u0027."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param timeStr String to be converted into DateTimeFormatter type."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return A LocalDateTime variable that the computer can understand as time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static LocalDate readDate(String timeStr) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        LocalDate time \u003d LocalDate.parse(timeStr, formatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     * Converts the date from LocalDate to string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     * @param date in LocalDate format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     * @return dateStr in \"dd/MM/yyyy\" format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public static String dateToString(LocalDate date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        String dateStr \u003d date.format(formatter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return dateStr;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * converts the time from LocalDateTime to string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param time in LocalDateTime format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return timeStr in \"dd/MM/yyyy HHmm\" format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static String dateTimeToString(LocalDateTime time) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String timeStr \u003d time.format(formatter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return timeStr;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 40,
      "tatayu": 12,
      "Weng-Kexin": 7
    }
  },
  {
    "path": "src/main/java/dolla/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.Debt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.Entry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.LogList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.Ui is a class that handles all interactions to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public abstract class Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private static String logo \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            \" ____    _   _  _   _       \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    + \"|  _  \\\\/ _ \\\\| || | /  \\\\      \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    + \"| | | | | | | || |/ /\\\\ \\\\  \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    + \"| |_| | |_| | || |  __  | \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    + \"|____/ \\\\ _ /|_||_|_|  |_|       \\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * The constant line."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static String line \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Show welcome."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method prints the strings of text from \u0027msg\u0027 with the proper format. Each element"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * from \u0027msg\u0027 is a line of text to be printed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param msg ArrayList of strings containing the messages to be printed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printMsg(ArrayList\u003cString\u003e msg) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        for (String outputMsg : msg) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            System.out.println(\"\\t\" + outputMsg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * This method prints the strings of text from \u0027s\u0027 with the proper format. Each element"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * from \u0027s\u0027 is a line of text to be printed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param s containing the messages to be printed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printMsg(String... s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        final StringBuilder messageAccumulator \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        for (String str : s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            messageAccumulator.append(str);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\t\" + messageAccumulator);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method prints the details of the specified task and specified duke.task.TaskList size."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method is typically called when a task is created, so that the user can"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * check the details of the created task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param currTask duke.task.Task to be printed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param listSize Size of the duke.task.TaskList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void echoAdd(Task currTask, int listSize) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"Got it. I\u0027ve added this task: \","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"  \" + currTask.getTask(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                \"Now you have \" + listSize + \" task(s) in the list.\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        printMsg(msg);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * This method prints the details of the specified entry and is typically called when an entry is entered,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * so that the user can check the details of the created entry."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param currEntry Entry to be printed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void echoAddEntry(Entry currEntry) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\tGot it. I\u0027ve added this entry: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\t\" + currEntry.getLogText());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Echo add debt."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param currDebt the curr debt"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public static void echoAddDebt(Debt currDebt) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(\"\\tGot it. I\u0027ve added this debt: \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(\"\\t\" + currDebt.getLogText());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Echo remove."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param log the log"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void echoRemove(String log) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this log: \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(log);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints an error message when date in not in the format \u0027DD/MM/YYYY HHmm\u0027."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printDateTimeFormatError() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"Please use the format \u0027DD/MM/YYYY HHmm\u0027!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints an error message when date in not in the format \u0027DD/MM/YYYY\u0027."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printDateFormatError() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tPlease use the format \u0027DD/MM/YYYY\u0027!\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints an error message when fixed duration entered is invalid."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public static void printFixDurationTaskError() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tSorry, please enter a valid fixed duration task.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will print the error message when the user enter a invalid recurring event."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void printRecurringTaskError() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tSorry, please enter a valid recurring event.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method will print the error message when the user enter a invalid day of the week."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printInvalidDayInput() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tSorry, please enter a valid day of the week.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method will print the error message when the user enter a invalid do after event."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printInvalidDoAfterInput() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tPlease enter a valid do after\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method will print the error message when the user enter a time that conflicts with a task"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * that\u0027s in the task list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param conflictingTask the conflicting task"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printTimeConflictError(Task conflictingTask) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tI\u0027m sorry, an error has occurred!\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tThe time you have entered conflicts with the following task: \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\t  \" + conflictingTask.getTask());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"Try looking for another time. :)\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Prints the snoozed task with new date after successfully snoozing."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param snoozedTask task that was snoozed"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printSnoozedTask(Task snoozedTask) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tNoted. I have snoozed this task:\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\t\" + snoozedTask.getTaskDescription() + \" \" + snoozedTask.getDateStr());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Prints an error message for no date in task."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param taskToSnooze the task to snooze"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printNoDateToSnoozeError(Task taskToSnooze) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tOOPS! \" + taskToSnooze + \" do not have a date to snooze!\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Prints a default error message."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printErrorMsg() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tOOPS! An error has occurred.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Prints error message when LogNum is not associated to a task."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param index The Log number that does not exist in the specific list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param mode  The mode where the list is to be accessed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printNoLogAssocError(int index, String mode) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\t\" + mode + \" number \" + index + 1 + \" doesn\u0027t seem to exist in my records!\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\tTry looking through the list of \" + mode + \"again.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints error message when string parsed is not an integer."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param str to be parsed to an integer"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printInvalidNumberError(String str) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\t\" + str + \" is not a number. Please use a number instead!\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Prints error message when the new date to snooze until is before the old date."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void printOldDateIsAfterError() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tOOPS! The new date given should be after the previous date!\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints error message when command given is invalid."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void printInvalidCommandError() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"\\tOOPS! The command is invalid. Please enter a valid command\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Prints error message when the user did not properly specify the type of entry to add."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printInvalidEntryType() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\tPlease specify the type of entry you want to add: income or expense.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Prints error message when user tries to add income/expense, but inputs the wrong format."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printInvalidEntryFormatError() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\tplease follow the format \""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                + \"\u0027add income(/expense) [AMOUNT] [DESCRIPTION] /on [DATE] {/tag [TAG]}\u0027\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                + \"\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Print invalid debt format error."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public static void printInvalidDebtFormatError() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(\"\\tplease follow the format\""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                + \"\u0027owe(/borrow) [NAME] [AMOUNT] [DESCRIPTION]\u0027\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Prints Dolla\u0027s new mode after being updated."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param newMode The new mode to be switched."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printModeUpdated(String newMode) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\tMode changed to \" + newMode + \"!\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Prints error message when user wants to list down items in the specific list but it\u0027s empty."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param mode The mode that is used when the \u0027list\u0027 is input"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printEmptyListError(String mode) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\tYou haven\u0027t added any \" + mode + \" yet!\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    //public static void printList(String mode, LogList entryList) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Prints out a list depending on the mode where \u0027list\u0027 is called."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param mode    The mode that is used when \u0027list\u0027 is input."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param logList The LogList containing the data of the list to be printed."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printList(String mode, LogList logList) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\tHere are the \" + mode + \" that you have added:\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        for (int i \u003d 0; i \u003c logList.size(); i++) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            int listNum \u003d i + 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            System.out.println(\"\\t\" + listNum + \". \" + logList.get().get(i).getLogText());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Print search desc."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param mode          the mode"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param logList       the log list"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param searchContent the search content"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public static void printSearchDesc(String mode, LogList logList, String searchContent) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(\"\\tHere are the matching results found in \" + mode);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        int listNum \u003d 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        for (int i \u003d 0; i \u003c logList.size(); i++) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            String temp \u003d logList.get().get(i).getDescription();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            if (temp.contains(searchContent)) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                listNum +\u003d 1;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                System.out.println(\"\\t\" + listNum + \". \" + logList.get().get(i).getLogText());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Print search name."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param mode          the mode"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param logList       the log list"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param searchContent the search content"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public static void printSearchName(String mode, LogList logList, String searchContent) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(\"\\tHere are the matching results found in \" + mode);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        int listNum \u003d 0;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        for (int i \u003d 0; i \u003c logList.size(); i++) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            String tempt \u003d logList.get().get(i).getName();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            if (tempt.contains(searchContent)) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                listNum +\u003d 1;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                System.out.println(\"\\t\" + listNum + \". \" + logList.get().get(i).getLogText());"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Print search date."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param mode          the mode"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param logList       the log list"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param searchContent the search content"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public static void printSearchDate(String mode, LogList logList, String searchContent) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(\"\\tHere are the matching results found in \" + mode);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        int listNum \u003d 0;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        for (int i \u003d 0; i \u003c logList.size(); i++) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            String temp \u003d Time.dateToString(logList.get().get(i).getDate());"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            if (temp.contains(searchContent)) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                listNum +\u003d 1;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                System.out.println(\"\\t\" + listNum + \". \" + logList.get().get(i).getLogText());"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Print sorted list."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param list the list to be printed"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param type the type of input of the list"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void printSortedList(ArrayList\u003cLog\u003e list, String type) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (type.equals(\"date\")) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            System.out.println(\"sorting date.........\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (type.equals(\"description\")) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            System.out.println(\"sorting description.........\");"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (type.equals(\"name\")) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            System.out.println(\"sorting name.........\");"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            int listNum \u003d i + 1;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            System.out.println(\"\\t\" + listNum + \". \" + list.get(i).getLogText());"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Print invalid modify format error."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printInvalidModifyFormatError() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\tplease follow the format \""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                + \"\u0027modify [LIST NUM]\""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                + \"\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Print initial modify msg."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void printInitialModifyMsg() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        System.out.println(\"\\tWhat would you want to change this entry to?\");"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Print no reminder msg."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public static void printNoReminderMsg() {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(\"\\tThere are no reminders :)\");"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 136,
      "Weng-Kexin": 180,
      "tatayu": 80,
      "yetong1895": 53
    }
  },
  {
    "path": "src/main/java/dolla/action/Redo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "package dolla.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * The type Redo. //TODO: edit javadoc"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class Redo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private static int redoFlag \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private static String redoInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private static Stack\u003cString\u003e redoCommand \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private static String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Sets redo flag."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param redoFlag the redo flag"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void setRedoFlag(int redoFlag) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Redo.redoFlag \u003d redoFlag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Sets redo input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param redoInput the redo input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void setRedoInput(String redoInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Redo.redoInput \u003d redoInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        redoCommand.push(Redo.redoInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Process redo string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String processRedo() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        userInput \u003d redoCommand.pop();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        //Undo.addUndoCommand(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Check flag."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void checkFlag() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (redoFlag \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            redoCommand.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 26,
      "yetong1895": 26
    }
  },
  {
    "path": "src/main/java/dolla/action/Repeat.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "package dolla.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class Repeat {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 1,
      "yetong1895": 3
    }
  },
  {
    "path": "src/main/java/dolla/action/Undo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * The type Undo. //todo: edit javadoc"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class Undo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static String userInput; //user inputs"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static String command; //add, remove etc"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static String undoInput; //reverse logic inputs"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static String redoInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static String mode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static int prevPosition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static Stack\u003cString\u003e undoEntryCommand \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static Stack\u003cString\u003e undoDebtCommand \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private static Stack\u003cString\u003e undoLimitCommand \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public Undo(String userInput, String command, boolean isFromRedo) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Undo.userInput \u003d userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Undo.command \u003d command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Remove command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param mode  the mode"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param index the index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void removeCommand(String mode, int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Undo.mode \u003d mode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Undo.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        remove();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Add command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param mode         the mode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param userInput    the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param prevPosition the prev position"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void addCommand(String mode, String userInput, int prevPosition) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Undo.mode \u003d mode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Undo.userInput \u003d userInput;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Undo.prevPosition \u003d prevPosition;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        add();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Remove."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void remove() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        undoInput \u003d \"remove \" + index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (mode.equals(\"entry\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            undoEntryCommand.push(undoInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if (mode.equals(\"debt\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            undoDebtCommand.push(undoInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            undoLimitCommand.push(undoInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Add."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void add() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (mode.equals(\"entry\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            undoInput \u003d prevPosition + \" \" + \"add \" + userInput;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            undoEntryCommand.push(undoInput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if (mode.equals(\"debt\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            undoInput \u003d prevPosition + \" \" + userInput;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            undoDebtCommand.push(undoInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            undoInput \u003d prevPosition + \" \" + \"set \" + userInput;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            undoLimitCommand.push(undoInput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Process command string."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param mode the mode"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static String processCommand(String mode) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (mode.equals(\"entry\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            undoInput \u003d undoEntryCommand.pop();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if (mode.equals(\"debt\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            undoInput \u003d undoDebtCommand.pop();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            undoInput \u003d undoDebtCommand.pop();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        //String parser[] \u003d undoInput.split(\" \",3);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        //Redo.setRedoFlag(1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return undoInput;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static String processUndo() { //if user input an Undo command"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        //if size \u003e 0"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        undoInput \u003d undoCommand.pop();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        String parser[] \u003d undoInput.split(\" \",3);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Redo.setRedoFlag(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if(parser[0].equals(\"add\") || parser[0].equals(\"set\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            redoInput \u003d \"remove \" + undoInput.substring(5);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if(parser[0].equals(\"borrow\") || parser[0].equals(\"owe\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            redoInput \u003d \"remove \" + undoInput;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if(parser[0].equals(\"remove\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            if(parser[1].equals(\"borrow\") || parser[1].equals(\"owe\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                redoInput \u003d undoInput.substring(8);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } else if(parser[1].equals(\"saving\") || parser[1].equals(\"budget\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                redoInput \u003d \"set \" + undoInput.substring(8);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                redoInput \u003d \"add \" + undoInput.substring(8);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Redo.setRedoInput(redoInput);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return undoInput;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 133
    }
  },
  {
    "path": "src/main/java/dolla/command/AddActionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.action.Undo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.parser.DebtsParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.parser.EntryParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.parser.MainParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class AddActionCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int prevPosition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public AddActionCommand(String mode, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * //TODO: add javadoc."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void undoCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        userInput \u003d Undo.processCommand(mode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        String[] parser \u003d userInput.split(\" \",2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (parser[0].equals(\"remove\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            userInput \u003d parser[0] + \" \" + parser[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            prevPosition \u003d Integer.parseInt(parser[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            userInput \u003d parser[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    //process Redo"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void execute(DollaData dollaData) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (command.equals(\"undo\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            undoCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (command.equals(\"redo\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            //Redo"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (mode.equals(\"debt\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            DebtsParser.setPrePosition(prevPosition);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (mode.equals(\"entry\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            EntryParser.setPrePosition(prevPosition);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Command c \u003d MainParser.handleInput(mode, userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        c.execute(dollaData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 12,
      "yetong1895": 39
    }
  },
  {
    "path": "src/main/java/dolla/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.command.AddCommand is a subclass of Command that acts as a skeleton"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * for all other commands that involve adding tasks to the duke.task.TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Represents all the information given after the command in the input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Needs to be split and placed into proper variables later on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String taskDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected LocalDateTime time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String dateTrigger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String missingDescriptionString \u003d \"Please specify the task you want to add!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public AddCommand(String taskDescription) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns true if the method runs without running into any error."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     This method splits and correctly assigns the task description and time from the given input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the incorrect format is given in the input, the corresponding alert will be printed, and"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     the method will then return false."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return true if method runs successfully."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @see AddDeadlineCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @see AddEventCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public boolean splitDescTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String[] data \u003d taskDescription.split(dateTrigger + \" \"); // data[0] os description, data[1] is the time"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            time \u003d Time.readDateTime(data[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            taskDescription \u003d data[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Ui.printMsg(\"Please add \u0027\" + dateTrigger + \" \u003cdate\u003e\u0027 after your task to specify the event date.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }  catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printDateTimeFormatError();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns true if the method runs without running into any error."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     This method checks if any other task in the specified TaskList conflicts with the given time."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the incorrect format is given in the input, the corresponding alert will be printed, and"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     the method will then return false."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return true if method runs successfully."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @see AddDeadlineCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @see AddEventCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public boolean detectAnomalies(TaskList tasks, LocalDateTime time) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Task currTask \u003d tasks.getFromList(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            if (currTask.getDate().compareTo(time) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printTimeConflictError(tasks.getFromList(i));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 77,
      "Weng-Kexin": 3,
      "yetong1895": 2
    }
  },
  {
    "path": "src/main/java/dolla/command/AddDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.command.AddDeadlineCommand is a command used to add a deadline task into the duke.task.TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class AddDeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Add deadline command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param taskDescription the task description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public AddDeadlineCommand(String taskDescription) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(taskDescription); // taskDescription includes the task info and date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        time \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        dateTrigger \u003d \"/by\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Adds a deadline task into the specified duke.task.TaskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     The method first splits the input data into the task description and time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     Using the newly acquired data, a new duke.task.Deadline duke.task.Task is created and then stored into"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     the specified duke.task.TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the method encounters an error when trying to split the input data, the method"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     returns without doing anything."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (!splitDescTime()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return; // If error occurs, stop the method!"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (!detectAnomalies(tasks, time)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return; // If error occurs, stop the method!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Task newTask \u003d new Deadline(taskDescription, time);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.echoAdd(newTask, tasks.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 42,
      "Weng-Kexin": 5
    }
  },
  {
    "path": "src/main/java/dolla/command/AddDebtsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tatayu"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.action.Undo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.task.Debt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "//todo: edit javadoc"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tatayu"
        },
        "content": "public class AddDebtsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int prevPosition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates AddDebtsCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param type type of debt"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param name name of debtor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param amount amount of debt"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param description description of debt"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param date date of debt"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param prePosition -1 by default"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public AddDebtsCommand(String type, String name, double amount,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                           String description, LocalDate date, int prePosition) { //prePosition is -1 by default"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.prevPosition \u003d prePosition;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public void execute(DollaData dollaData) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        Debt newDebt \u003d new Debt(type, name, amount, description, date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (prevPosition !\u003d -1) { //an Undo input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            dollaData.addToPrevPosition(\"debt\", newDebt, prevPosition);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            prevPosition \u003d -1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else { //normal input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            dollaData.addToLogList(\"debt\", newDebt);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            index \u003d dollaData.getLogList(\"debt\").size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Undo.removeCommand(\"debt\",index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        Ui.echoAddDebt(newDebt);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tatayu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tatayu": 32,
      "Weng-Kexin": 14,
      "yetong1895": 6
    }
  },
  {
    "path": "src/main/java/dolla/command/AddDoAfterTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.DoAfter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * The type Add do after task command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class AddDoAfterTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new ddd do after task command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param taskDescription the task description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public AddDoAfterTaskCommand(String taskDescription) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super(taskDescription);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will split the user input into task description and the event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param tasks duke.task.TaskList containing all the tasks stored."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            position \u003d taskDescription.indexOf(\"/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            event \u003d taskDescription.substring(position + 10);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            Task newTask \u003d new DoAfter(taskDescription.substring(0, position - 1), event);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            Ui.echoAdd(newTask, tasks.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Ui.printInvalidDoAfterInput();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 4,
      "Weng-Kexin": 11,
      "yetong1895": 24
    }
  },
  {
    "path": "src/main/java/dolla/command/AddEntryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.action.Undo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Entry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * AddEntryCommand is used to create a new Entry entity."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class AddEntryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int prevPosition;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Creates an instance of AddEntryCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param type Income or Expense."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param amount Amount of money that is earned/spent."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param description Details pertaining to the entry."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param date Date of income/expense."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public AddEntryCommand(String type, double amount, String description, LocalDate date, int prevPosition) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.prevPosition \u003d prevPosition;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(DollaData dollaData) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Entry newEntry \u003d new Entry(type, amount, description, date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (prevPosition !\u003d -1) { //an Undo input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            dollaData.addToPrevPosition(\"entry\", newEntry, prevPosition);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            prevPosition \u003d -1; //reset to -1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else { //normal input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            dollaData.addToLogList(\"entry\", newEntry);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            index \u003d dollaData.getLogList(\"entry\").size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Undo.removeCommand(\"entry\",index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.echoAddEntry(newEntry);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 35,
      "Weng-Kexin": 3,
      "tatayu": 4,
      "yetong1895": 8
    }
  },
  {
    "path": "src/main/java/dolla/command/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.command.AddEventCommand is a command used to add an event task into the duke.task.TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Add event command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param taskDescription the task description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public AddEventCommand(String taskDescription) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(taskDescription); // taskDescription includes the task info and date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        time \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        dateTrigger \u003d \"/at\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Adds an event task into the specified duke.task.TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     The method first splits the input data into the task description and time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     Using the newly acquired data, a new duke.task.Event duke.task.Task is created and then stored into"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     the specified duke.task.TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the method encounters an error when trying to split the input data, the method"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     returns without doing anything."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param tasks The duke.task.TaskList where the event task is to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (!splitDescTime()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return; // If error occurs, stop the method!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (!detectAnomalies(tasks, time)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return; // If error occurs, stop the method!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Task newTask \u003d new Event(taskDescription, time);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.echoAdd(newTask, tasks.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 35,
      "Weng-Kexin": 7,
      "yetong1895": 6
    }
  },
  {
    "path": "src/main/java/dolla/command/AddFixDurationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.FixDuration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class AddFixDurationCommand extends AddCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddFixDurationCommand(String taskDescription) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(taskDescription);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will split the string into the task description and the duration of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks duke.task.TaskList containing all the tasks stored."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception e when user input is invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            position \u003d taskDescription.indexOf(\"/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            duration \u003d taskDescription.substring(position + 8);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Task newTask \u003d new FixDuration(taskDescription.substring(0, position - 1), duration);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.echoAdd(newTask, tasks.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printFixDurationTaskError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 4,
      "Weng-Kexin": 2,
      "tatayu": 1,
      "yetong1895": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/dolla/command/AddLimitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.Limit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.ui.LimitUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * AddLimitCommand is used to create a new Limit entity."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class AddLimitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new AddLimitCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param type type of limit"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param amount amount of limit"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param duration duration of limit"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public AddLimitCommand(String type, double amount, String duration) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public void execute(DollaData dollaData) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Limit newLimit \u003d new Limit(type, amount, duration);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        dollaData.addToLogList(\"limit\", newLimit);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        //todo: need to add budget and show and deduct money every time there is an expense entry"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        LimitUi.echoAddLimit(newLimit);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 35
    }
  },
  {
    "path": "src/main/java/dolla/command/AddRecurringTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Recurring;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class AddRecurringTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String dayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Time timeObj \u003d new Time();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddRecurringTaskCommand(String taskDescription) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(taskDescription);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will split the string into the task description and the day of the week."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks duke.task.TaskList containing all the tasks stored."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception e when user input is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            position \u003d taskDescription.indexOf(\"/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            dayOfWeek \u003d taskDescription.substring(position + 7);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            if (dayOfWeek.equals(\"monday\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    || dayOfWeek.equals(\"tuesday\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    || dayOfWeek.equals(\"wednesday\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    || dayOfWeek.equals(\"thursday\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    || dayOfWeek.equals(\"friday\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    || dayOfWeek.equals(\"saturday\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    || dayOfWeek.equals(\"sunday\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                Task newTask \u003d new Recurring(taskDescription.substring(0, position - 1), dayOfWeek);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                Ui.echoAdd(newTask, tasks.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                Ui.printInvalidDayInput();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printRecurringTaskError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 5,
      "Weng-Kexin": 2,
      "yetong1895": 11,
      "-": 27
    }
  },
  {
    "path": "src/main/java/dolla/command/AddTodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * AddToDoCommand is a command used to add a todo task into the duke.task.TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class AddTodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public AddTodoCommand(String taskDescription) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(taskDescription);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Adds a todo task into the specified duke.task.TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the task description is missing, return without doing anything."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (taskDescription.length() \u003d\u003d 0) { // TODO: Exception handling?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printMsg(missingDescriptionString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Task newTask \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.echoAdd(newTask, tasks.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 32
    }
  },
  {
    "path": "src/main/java/dolla/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * Command is an abstract class which all types of command will inherit from."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * This method is called execute the titular command after every user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @throws Exception handle exception"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public abstract void execute(DollaData dollaData) throws Exception;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns an integer variable from the specified string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     Returns 0 if the specified string is not of a number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     Mainly used for using the specified string for calculations in the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     IE. Accessing arrays."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param str String (of number) to be converted into integer type."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return Integer type of the specified string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public int stringToInt(String str) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        int newInt \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            newInt \u003d Integer.parseInt(str);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Ui.printInvalidNumberError(str);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return newInt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void extractDesc(String inputLine) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 38,
      "Weng-Kexin": 4,
      "yetong1895": 2
    }
  },
  {
    "path": "src/main/java/dolla/command/CompleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.command.CompleteCommand is a type of command used to change the variable \u0027isDone\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * in given particular task in the task list to true."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class CompleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String taskNumStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Creates an instance of duke.command.CompleteCommand with the specified task number."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param taskNumStr The number of the task in task list to be marked as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public CompleteCommand(String taskNumStr) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.taskNumStr \u003d taskNumStr;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * If the \u0027isDone\u0027 variable of the task in \u0027tasks\u0027 corresponding to \u0027taskNumStr\u0027 is false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * change to true and print out confirmation message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If \u0027taskNumStr\u0027 does not correspond to any of the task numbers in \u0027tasks\u0027, print an"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     error message and return without changing \u0027tasks\u0027."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the \u0027isDone\u0027 variable of the task is already true, print a message to alert the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param tasks The task list to be accessed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @throws Exception handle exception"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(TaskList tasks) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        int taskNumInt \u003d stringToInt(taskNumStr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (taskNumInt \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return; // don\u0027t do anything if task number is invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Task currTask;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            currTask \u003d tasks.getFromList(taskNumInt - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            //Ui.printNoLogAssocError(taskNumInt);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            throw new Exception(\"duke.task.Task number not in list\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (currTask.getIsDone() \u003d\u003d true) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"duke.task.Task \" + taskNumInt + \" is already completed! :)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            currTask.markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"  \" + currTask.getTask());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 57,
      "Weng-Kexin": 2,
      "yetong1895": 4
    }
  },
  {
    "path": "src/main/java/dolla/command/ErrorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.command.ErrorCommand is a type of command that is generated if a proper command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * could not be produced. IE. as a result of invalid inputs."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class ErrorCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(DollaData dollaData) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return; // Don\u0027t do anything"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 15
    }
  },
  {
    "path": "src/main/java/dolla/command/FindStringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * FindStringCommand is a Command used to find tasks corresponding to the user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class FindStringCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String inputLine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String commandName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public FindStringCommand(String inputLine) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.inputLine \u003d inputLine;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.commandName \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Find tasks corresponding to the user input from the specified TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     The method first retrieves the String to search for from \u0027inputLine\u0027."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     The method then looks through all the tasks in the specified TaskList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     and checks if the recently retrieved string is a substring of any of"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     the tasks. Any matches to the task are stored in an ArrayList that gets"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     printed subsequently."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the user did not input any strings to search for, an error will be printed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     and the method will return without doing anything."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param tasks The TaskList containing the tasks to be searched."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String searchStr \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            searchStr \u003d inputLine.substring(commandName.length() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Please use the format \u0027find \u003cstring\u003e\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printMsg(msg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        // Find tasks that match the searchStr and add into itemsFound"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e itemsFound \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        for (Task currTask : tasks.get()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            String taskStr \u003d currTask.getTask();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            if (taskStr.indexOf(searchStr) !\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                itemsFound.add(taskStr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (itemsFound.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"There are no matching tasks in your list :(\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            for (int i \u003d 0; i \u003c itemsFound.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                msg.add((i + 1) + \".\"  + itemsFound.get(i));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 70,
      "Weng-Kexin": 2
    }
  },
  {
    "path": "src/main/java/dolla/command/InitialModifyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.LogList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class InitialModifyCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public InitialModifyCommand(String indexStr) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.index \u003d Integer.parseInt(indexStr) - 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(DollaData dollaData) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String currMode \u003d dollaData.getMode();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (isIndexInList(dollaData.getLogList(currMode)) \u003d\u003d true) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printInitialModifyMsg();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            dollaData.updateMode(\"modify \" + currMode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            dollaData.prepForModify(currMode, index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printNoLogAssocError(index, currMode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private boolean isIndexInList(LogList logList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (index \u003e\u003d logList.size()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 35
    }
  },
  {
    "path": "src/main/java/dolla/command/ModifyEntryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Entry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class ModifyEntryCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new ModifyEntryCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param type type of modification"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param amount amount to modify"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param description description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param date date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public ModifyEntryCommand(String type, double amount, String description, LocalDate date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(DollaData dollaData) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Entry newEntry \u003d new Entry(type, amount, description, date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        dollaData.modifyLogList(newEntry);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.echoAddEntry(newEntry);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        dollaData.updateMode(\"entry\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 28,
      "tatayu": 3,
      "Weng-Kexin": 7
    }
  },
  {
    "path": "src/main/java/dolla/command/RemoveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.action.Undo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.LogList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * RemoveCommand is a Command used to remove a Task from the TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected String logNumStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected String mode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public RemoveCommand(String mode, String logNumStr) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.logNumStr \u003d logNumStr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Removes a task from the specified TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     The method first converts taskNumStr into an int. It will then check if a task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     corresponding to that number exists in the specified TaskList and subsequently"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     remove that task if so."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If taskNumStr is not an int, the method will return without doing anything."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If taskNumInt does not correspond to any task in the specified TaskList, an"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     alert is printed to the user, and the method will return."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param dollaData dollaData"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void execute(DollaData dollaData) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        int logNumInt \u003d stringToInt(logNumStr) - 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        LogList logList \u003d new LogList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        logList \u003d dollaData.getLogList(mode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        boolean isListEmpty \u003d (logList.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (logNumInt \u003c 0 || isListEmpty) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return; // TODO: return error command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Undo.addCommand(mode,logList.get().get(logNumInt).getUserInput(),logNumInt);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Ui.echoRemove(logList.get().get(logNumInt).getLogText());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        dollaData.removeFromLogList(mode,logNumInt);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            tasks.getFromList(taskNumInt - 1); // Check if the task exists first"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"  \" + tasks.getFromList(taskNumInt - 1).getTask());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            tasks.removeFromList(taskNumInt - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            //Ui.printNoTaskAssocError(taskNumInt);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 40,
      "Weng-Kexin": 5,
      "yetong1895": 26
    }
  },
  {
    "path": "src/main/java/dolla/command/RemoveLimitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.Limit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.ui.LimitUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class RemoveLimitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public RemoveLimitCommand(String type, String duration) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * This method is called execute the titular command after every user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param dollaData dollaData"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @throws Exception handle exception"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public void execute(DollaData dollaData) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        dollaData.removeLimit(type, duration);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        LimitUi.echoRemoveLimit(type, duration);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 28
    }
  },
  {
    "path": "src/main/java/dolla/command/SearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tatayu"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.task.LogList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tatayu"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private String mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private String component;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private String searchContent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new SearchCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param mode mode Dolla is in"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param component component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param searchContent search content"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public SearchCommand(String mode, String component, String searchContent) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.searchContent \u003d searchContent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.component \u003d component;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public void execute(DollaData dollaData) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        LogList logList \u003d new LogList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        case \"entry\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            logList \u003d dollaData.getLogList(mode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        case \"debt\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            logList \u003d dollaData.getLogList(mode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        case \"limit\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            logList \u003d dollaData.getLogList(mode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        boolean listIsEmpty \u003d (logList.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (listIsEmpty) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            Ui.printEmptyListError(mode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (mode.equals(\"entry\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            if (component.equals(\"description\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                Ui.printSearchDesc(mode, logList, searchContent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            } else if (component.equals(\"date\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                Ui.printSearchDate(mode, logList, searchContent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (mode.equals(\"debt\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            if (component.equals(\"description\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                Ui.printSearchDesc(mode, logList, searchContent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            } else if (component.equals(\"name\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                Ui.printSearchName(mode, logList, searchContent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            } else if (component.equals(\"date\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                Ui.printSearchDate(mode, logList, searchContent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (mode.equals(\"limit\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            if (component.equals(\"description\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                Ui.printSearchDesc(mode, logList, searchContent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            } else if (component.equals(\"date\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                Ui.printSearchDate(mode, logList, searchContent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tatayu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tatayu": 62,
      "Weng-Kexin": 9
    }
  },
  {
    "path": "src/main/java/dolla/command/ShowListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.LogList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * Display all the tasks stored in the relevant LogList depending on mode."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class ShowListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private String mode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public ShowListCommand(String mode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Prints out the logs from the specified LogList in dollaData."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param dollaData Data to be manipulated."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(DollaData dollaData) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        LogList logList \u003d new LogList(new ArrayList\u003cLog\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        LogList entryList \u003d new EntryList(new ArrayList\u003cEntry\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        case \"entries\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            logList \u003d dollaData.entryList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            entryList \u003d dollaData.entryList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            entryList \u003d dollaData.getLogList(mode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        LogList logList \u003d new LogList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        switch (mode) { //TODO: is this needed?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        case \"entry\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            logList \u003d dollaData.getLogList(mode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        case \"debt\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            logList \u003d dollaData.getLogList(mode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        case \"limit\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            logList \u003d dollaData.getLogList(mode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            break; // TODO: What to do here?"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        boolean listIsEmpty \u003d (logList.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (listIsEmpty) { // TODO: Place this in proper place"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printEmptyListError(mode);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        //} else if (mode.equals(\"entries\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            //Ui.printList(mode, entryList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (mode.equals(\"entry\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            Ui.printList(mode, logList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (mode.equals(\"debt\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printList(mode, logList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            //System.out.println(logList.get().size());//test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if (mode.equals(\"limit\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Ui.printList(mode,logList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 40,
      "Weng-Kexin": 18,
      "tatayu": 8,
      "yetong1895": 8
    }
  },
  {
    "path": "src/main/java/dolla/command/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * A command to snooze tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected String taskNumStr;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected String newDateStr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Snooze command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param taskNumStr the task num str"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param newDateStr the new date str"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public SnoozeCommand(String taskNumStr, String newDateStr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.taskNumStr \u003d taskNumStr;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.newDateStr \u003d newDateStr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param tasks TODO: [placeholder]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @throws Exception TODO: [placeholder]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public void execute(TaskList tasks) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        int taskNumInt \u003d stringToInt(taskNumStr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        LocalDateTime date \u003d Time.readDateTime(newDateStr); // Default date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Task taskToSnooze \u003d tasks.getFromList(taskNumInt - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            char type \u003d taskToSnooze.getTaskType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            if (type \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                Ui.printNoDateToSnoozeError(taskToSnooze);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } else if (type \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                Task newTask \u003d new Deadline(taskToSnooze.getTaskDescription(), date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                if (newDateIsAfter(taskToSnooze, newTask)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    tasks.replaceTask(taskNumInt - 1, newTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    Ui.printSnoozedTask(newTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    Ui.printOldDateIsAfterError();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } else if (type \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                Task newTask \u003d new Event(taskToSnooze.getTaskDescription(), date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                if (newDateIsAfter(taskToSnooze, newTask)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    tasks.replaceTask(taskNumInt - 1, newTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    Ui.printSnoozedTask(newTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    Ui.printOldDateIsAfterError();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                Ui.printErrorMsg();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            //Ui.printNoTaskAssocError(taskNumInt);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Checks if the new date given is after the old date."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param oldTask task with the old date"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param newTask task with the new date"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return true if the new date is after the old date, else false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public boolean newDateIsAfter(Task oldTask, Task newTask) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        LocalDateTime oldDate \u003d oldTask.getDate();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        LocalDateTime newDate \u003d newTask.getDate();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (oldDate.isBefore(newDate)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 16,
      "Weng-Kexin": 69
    }
  },
  {
    "path": "src/main/java/dolla/command/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.LogList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.sort.SortDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.sort.SortDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.sort.SortName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String mode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public SortCommand(String mode, String type) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void execute(DollaData dollaData) throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        LogList logList \u003d new LogList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        case \"entry\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            logList \u003d dollaData.getLogList(mode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        case \"debt\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            logList \u003d dollaData.getLogList(mode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            break; // TODO: What to do here?"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        boolean isListEmpty \u003d (logList.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (isListEmpty) { // TODO: Place this in proper place"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            Ui.printEmptyListError(mode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            if (mode.equals(\"entry\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (type.equals(\"date\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    new SortDate(logList.get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else if (type.equals(\"description\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    new SortDescription(logList.get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    Ui.printInvalidCommandError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else if (mode.equals(\"debt\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (type.equals(\"description\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    new SortDescription(logList.get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else if (type.equals(\"name\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    new SortName(logList.get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    Ui.printInvalidCommandError();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 61
    }
  },
  {
    "path": "src/main/java/dolla/command/SwitchModeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.DollaData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class SwitchModeCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    private String newMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public SwitchModeCommand(String newMode) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.newMode \u003d newMode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute(DollaData dollaData) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        dollaData.updateMode(newMode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printModeUpdated(dollaData.getMode());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 18
    }
  },
  {
    "path": "src/main/java/dolla/command/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * The type View schedule command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected LocalDate viewDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String dateStr;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new View schedule command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param dateStr the date string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewScheduleCommand(String dateStr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (dateStr.equals(\"today\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            viewDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            this.viewDate \u003d Time.readDate(dateStr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateStr \u003d dateStr;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * TODO: [placeholder]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param tasks TODO: [placeholder]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasksOnGivenDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            Task currTask \u003d tasks.getFromList(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (currTask.getDate().toLocalDate().compareTo(viewDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                tasksOnGivenDate.add(currTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tasksOnGivenDate.sort(Comparator.comparing(Task::getDate));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        msg.add(\"Here is the schedule for \" + dateStr + \":\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksOnGivenDate.size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            msg.add((i + 1) + \".\"  + tasksOnGivenDate.get(i).getTask());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 12,
      "Weng-Kexin": 8,
      "-": 35
    }
  },
  {
    "path": "src/main/java/dolla/parser/DebtsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddActionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.ShowListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.ErrorCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddDebtsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.SortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.SearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.RemoveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tatayu"
        },
        "content": "public class DebtsParser extends Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private static int prevPosition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private static int undoFlag \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public DebtsParser(String inputLine) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        super(inputLine);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public Command handleInput(String mode, String inputLine) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        if (commandToRun.equals(\"debts\")) { //show debt list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            return new ShowListCommand(mode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (commandToRun.equals(\"owe\") || commandToRun.equals(\"borrow\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            String type \u003d commandToRun;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            String name \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            double amount \u003d 0.0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            LocalDate date \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                name \u003d inputArray[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                amount \u003d stringToDouble(inputArray[2]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                String[] desc \u003d inputLine.split(inputArray[2] + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                String[] dateString \u003d desc[1].split(\" /due \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                description \u003d dateString[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                date \u003d Time.readDate(dateString[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                Ui.printInvalidDebtFormatError();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            if (undoFlag \u003d\u003d 1) { //Undo input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                undoFlag \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                return new AddDebtsCommand(type, name, amount, description, date, prevPosition);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else { //normal input, prePosition is -1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                return new AddDebtsCommand(type, name, amount, description, date, -1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (commandToRun.equals(\"search\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            String component \u003d inputArray[1];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            String content \u003d inputArray[2];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            return new SearchCommand(mode, component, content);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (commandToRun.equals(\"sort\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return new SortCommand(mode, inputArray[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (commandToRun.equals(\"remove\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return new RemoveCommand(mode, inputArray[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if (commandToRun.equals(\"redo\") || commandToRun.equals(\"undo\") || commandToRun.equals(\"Repeat\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return new AddActionCommand(mode, commandToRun);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            return invalidCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void setPrePosition(int prePosition) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        DebtsParser.prevPosition \u003d prePosition;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        undoFlag \u003d 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tatayu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 1,
      "tatayu": 44,
      "Weng-Kexin": 11,
      "yetong1895": 15
    }
  },
  {
    "path": "src/main/java/dolla/parser/DollaParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.command.AddDebtsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.command.AddEntryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.command.ErrorCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class DollaParser extends Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public DollaParser(String inputLine) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(inputLine);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Command handleInput(String mode, String inputLine) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (commandToRun.equals(\"add\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            if (verifyAddCommand() \u003d\u003d true) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                String entryType \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                double amount \u003d 0.0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                entryType \u003d inputArray[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                amount \u003d stringToDouble(inputArray[2]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                description \u003d inputArray[3];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                splitDescTime();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printInvalidEntryFormatError();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new AddEntryCommand(entryType, amount, description, date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                String[] data \u003d inputLine.split(\" /on \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                String[] desc \u003d data[0].split(inputArray[2] + \" \"); //separate out the description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                description \u003d desc[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                return new AddEntryCommand(inputArray[1], stringToDouble(inputArray[2]), description, date, -1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                // TODO: ^ Check which is the proper way to write oop"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            switch(commandToRun) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                case \"income\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                case \"expense\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    return new AddExpenseCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    return new ErrorCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (commandToRun.equals(\"owe\") || commandToRun.equals(\"borrow\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            String type \u003d commandToRun;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            String name \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            double amount \u003d 0.0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            LocalDate date \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                name \u003d inputArray[1];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                amount \u003d stringToDouble(inputArray[2]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                String[] desc \u003d inputLine.split(inputArray[2] + \" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                String[] dateString \u003d desc[1].split(\" /due \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                description \u003d dateString[0];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                date \u003d Time.readDate(dateString[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                Ui.printInvalidDebtFormatError();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            return new AddDebtsCommand(type, name, amount, description, date, -1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return invalidCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 48,
      "tatayu": 30,
      "Weng-Kexin": 1,
      "yetong1895": 1
    }
  },
  {
    "path": "src/main/java/dolla/parser/EntryParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddEntryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddActionCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.ShowListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.ErrorCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.InitialModifyCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.SearchCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.RemoveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tatayu"
        },
        "content": "public class EntryParser extends Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private static int prevPosition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private static int undoFlag \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public EntryParser(String inputLine) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(inputLine);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Command handleInput(String mode, String inputLine) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        if (commandToRun.equals(\"entries\")) { //show entry list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return new ShowListCommand(mode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (commandToRun.equals(\"add\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            if (verifyAddCommand() \u003d\u003d true) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                String[] data \u003d inputLine.split(\" /on \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                String[] desc \u003d data[0].split(inputArray[2] + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                description \u003d desc[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                if (undoFlag \u003d\u003d 1) { //Undo input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    undoFlag \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    return new AddEntryCommand(inputArray[1], stringToDouble(inputArray[2]),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                            description, date, prevPosition);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else { //normal input, prePosition is -1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                    return new AddEntryCommand(inputArray[1], stringToDouble(inputArray[2]),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                            description, date, -1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else if (commandToRun.equals(\"modify\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            if (verifyModifyCommand() \u003d\u003d true) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new InitialModifyCommand(inputArray[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (commandToRun.equals(\"sort\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            return new SortCommand(mode, inputArray[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        } else if (commandToRun.equals(\"search\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            String component \u003d inputArray[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            String content \u003d inputArray[2];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            return new SearchCommand(mode, component, content);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (commandToRun.equals(\"remove\")) { //TODO: indexoutofbound exception"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return new RemoveCommand(mode, inputArray[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if (commandToRun.equals(\"redo\") || commandToRun.equals(\"undo\") || commandToRun.equals(\"Repeat\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return new AddActionCommand(mode, commandToRun);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return invalidCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static void setPrePosition(int prePosition) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        EntryParser.prevPosition \u003d prePosition;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        undoFlag \u003d 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tatayu"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "omupenguin": 24,
      "Weng-Kexin": 15,
      "tatayu": 16,
      "yetong1895": 14
    }
  },
  {
    "path": "src/main/java/dolla/parser/LimitParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.AddLimitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.ShowListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.ErrorCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.RemoveLimitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.ui.LimitUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * This class handles all limit related parsing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class LimitParser extends Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public LimitParser(String inputLine) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        super(inputLine);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String LIMIT_COMMAND_LIST \u003d \"limits\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String LIMIT_COMMAND_SET \u003d \"set\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String LIMIT_COMMAND_REMOVE \u003d \"remove\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String LIMIT_TYPE_S \u003d \"saving\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String LIMIT_TYPE_B \u003d \"budget\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String LIMIT_DURATION_D \u003d \"daily\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String LIMIT_DURATION_W \u003d \"weekly\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String LIMIT_DURATION_M \u003d \"monthly\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public Command handleInput(String mode, String inputLine) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (commandToRun.equalsIgnoreCase(LIMIT_COMMAND_LIST)) { //show limit list todo:resolve bug"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            return new ShowListCommand(mode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if (commandToRun.equalsIgnoreCase(LIMIT_COMMAND_SET)) { //add limit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            String limitType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            double amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            String duration;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            int typeIndex \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            int durationIndex \u003d 3;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                limitType \u003d typeFinder(typeIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                amount \u003d amountFinder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                duration \u003d durationFinder(durationIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                LimitUi.invalidSetCommandPrinter();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                LimitUi.invalidAmountPrinter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                LimitUi.printErrorMsg();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            return new AddLimitCommand(limitType, amount, duration);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if (commandToRun.equalsIgnoreCase(LIMIT_COMMAND_REMOVE)) { //REMOVE DAILY BUDGET etc"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            String limitType;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            String duration;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            int typeIndex \u003d 2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            int durationIndex \u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                //todo: check if limit exists before removing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                limitType \u003d typeFinder(typeIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                duration \u003d durationFinder(durationIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                LimitUi.invalidRemoveCommandPrinter();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                return new ErrorCommand(); //todo: change to \"limit does not exist\" etc"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                LimitUi.printErrorMsg();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            return new RemoveLimitCommand(limitType, duration);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Method finds the type of limit being mentioned."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return SAVING or BUDGET"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private String typeFinder(int index) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        String limitType \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        String inputType;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        inputType \u003d inputArray[index];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (inputType.equalsIgnoreCase(LIMIT_TYPE_S)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            limitType \u003d LIMIT_TYPE_S;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if (inputType.equalsIgnoreCase(LIMIT_TYPE_B)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            limitType \u003d LIMIT_TYPE_B;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return limitType;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private double amountFinder() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        double amount \u003d stringToDouble(inputArray[2]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    private String durationFinder(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        String limitDuration \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        String inputDuration;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        inputDuration \u003d inputArray[index];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (inputDuration.equalsIgnoreCase((LIMIT_DURATION_D))) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            limitDuration \u003d LIMIT_DURATION_D;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if (inputDuration.equalsIgnoreCase((LIMIT_DURATION_W))) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            limitDuration \u003d LIMIT_DURATION_W;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if (inputDuration.equalsIgnoreCase((LIMIT_DURATION_M))) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            limitDuration \u003d LIMIT_DURATION_M;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return limitDuration;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 2,
      "Weng-Kexin": 108
    }
  },
  {
    "path": "src/main/java/dolla/parser/MainParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tatayu"
        },
        "content": "//import dolla.command.;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.command.ErrorCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.command.SwitchModeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * MainParser checks the current mode and user input to create the relevant command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class MainParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private static String[] prevCommand \u003d {\"dolla\",\"1\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String MODE_DOLLA \u003d \"dolla\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String MODE_ENTRY \u003d \"entry\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String MODE_LIMIT \u003d \"limit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String MODE_DEBT \u003d \"debt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String MODE_SHORTCUT \u003d \"shortcut\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String COMMAND_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a command corresponding to the user input by directing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * the input to the relevant dolla.parser."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param mode The mode Dolla is currently on."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return a command corresponding to the user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static Command handleInput(String mode, String inputLine) { // TODO: Rename to something else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //String inputLine \u003d input.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        String[] inputArray \u003d inputLine.split(SPACE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String command \u003d inputArray[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        boolean isSwitchMode \u003d command.equalsIgnoreCase(MODE_DOLLA) || command.equals(MODE_ENTRY)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                || command.equals(MODE_LIMIT) || command.equals(MODE_DEBT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                || command.equals(MODE_SHORTCUT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (command.equals(COMMAND_BYE)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            //return new ExitCommand(); // TODO"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else if (isSwitchMode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return new SwitchModeCommand(command); // TODO"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (prevCommand[0].equals(\"undo\") \u0026\u0026 prevCommand[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            prevCommand[1] \u003d \"2\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if (prevCommand[0].equals(\"undo\") \u0026\u0026 prevCommand[1].equals(\"2\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            prevCommand[0] \u003d command;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            prevCommand[1] \u003d \"1\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else { //not from Redo"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            prevCommand[0] \u003d command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            prevCommand[1] \u003d \"1\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if(prevCommand[0].equals(\"Redo\") \u0026\u0026 prevCommand[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            prevCommand[1] \u003d \"2\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else if(prevCommand[0].equals(\"Redo\") || prevCommand[1].equals(\"2\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            prevCommand[0] \u003d command;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            prevCommand[1] \u003d \"1\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Tag tag \u003d new Tag(inputLine);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        tag.parseTag();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        case MODE_DOLLA:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            DollaParser dollaParser \u003d new DollaParser(inputLine);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            //System.out.println(\"Running DollaParser...\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return dollaParser.handleInput(mode, inputLine);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        case MODE_ENTRY:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            EntryParser entryParser \u003d new EntryParser(inputLine);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return entryParser.handleInput(mode, inputLine);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        case MODE_DEBT:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            DebtsParser debtsParser \u003d new DebtsParser(inputLine);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            return debtsParser.handleInput(mode, inputLine);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        case MODE_LIMIT:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            LimitParser limitParser \u003d new LimitParser(inputLine);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return limitParser.handleInput(mode, inputLine);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        case \"modify entry\": //is this a mode? (asking cause im not sure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            ModifyParser modifyParser \u003d new ModifyParser(inputLine);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return modifyParser.handleInput(mode, inputLine);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printInvalidCommandError();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return new ErrorCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String[] inputArray \u003d inputLine.split(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String command \u003d inputArray[0];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return new ShowListCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new CompleteCommand(inputArray[1]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Arrays.asList(\"Please use the format \u0027done \u003cnumber\u003e\u0027!\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printMsg(msg);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"remove\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new RemoveCommand(inputArray[1]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                        \"Please use the format \u0027remove \u003cnumber\u003e\u0027!\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printMsg(msg);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return new FindStringCommand(inputLine);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new ViewScheduleCommand(inputArray[1]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                        \"Please use the format \u0027view today\u0027 or \u0027view \u003cdate\u003e\u0027!\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printMsg(msg);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printDateFormatError();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        case \"snooze\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                String dateTimeArray \u003d inputArray[2] + \" \" + inputArray[3];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new SnoozeCommand(inputArray[1], dateTimeArray);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printMsg(\"Please use the format \u0027snooze \u003ctask number\u003e \u003cnew date\u003e \u003cnew time\u003e\u0027!\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printDateFormatError();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return addToList(command, inputLine);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns an add command corresponding to the specified command, otherwise alert the user"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * that the command is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param command The command to be created,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param inputLine The entire line input from the user."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return Add command corresponding to the specified command."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static Command addToList(String command, String inputLine) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String taskDescription;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Command commandToRun \u003d new ErrorCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            taskDescription \u003d inputLine.substring(command.length() + 1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                commandToRun \u003d new AddTodoCommand(taskDescription);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                commandToRun \u003d new AddEventCommand(taskDescription);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                commandToRun \u003d new AddDeadlineCommand(taskDescription);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            case \"duration\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                commandToRun \u003d new AddFixDurationCommand(taskDescription);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            case \"recurring\":"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                commandToRun \u003d new AddRecurringTaskCommand(taskDescription);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            case \"after\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                commandToRun \u003d new AddDoAfterTaskCommand(taskDescription);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                Ui.printInvalidCommandError();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            ArrayList\u003cString\u003e msg \u003d new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                    \"Invalid command given!\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printMsg(msg);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return commandToRun;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * This method will exit the entire program after printing a goodbye message."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        String msg \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printMsg(msg);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //duke.Storage.save(tasks); // Don\u0027t need to save since any previous commands are already saved"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 156,
      "Weng-Kexin": 35,
      "tatayu": 6,
      "yetong1895": 11
    }
  },
  {
    "path": "src/main/java/dolla/parser/ModifyParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.command.ErrorCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.command.ModifyEntryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class ModifyParser extends Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public ModifyParser(String inputLine) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(inputLine);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Command handleInput(String mode, String inputLine) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String modeToModify \u003d mode.split(\" \")[1];"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (modeToModify.equals(\"entry\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            if (verifyAddCommand() \u003d\u003d true) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new ModifyEntryCommand(inputArray[1], stringToDouble(inputArray[2]), inputArray[3], date);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                return new ErrorCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return new ErrorCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 26
    }
  },
  {
    "path": "src/main/java/dolla/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.command.AddEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.command.ErrorCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String inputLine;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String[] inputArray;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String commandToRun;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new parser."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param inputLine inputLine"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Parser(String inputLine) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.inputLine \u003d inputLine;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.inputArray \u003d inputLine.split(SPACE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.commandToRun \u003d inputArray[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public abstract Command handleInput(String mode, String inputLine);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns true if the method runs without running into any error."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     This method splits and correctly assigns the task description and time from the given input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     If the incorrect format is given in the input, the corresponding alert will be printed, and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     the method will then return false."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @see AddDeadlineCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @see AddEventCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void splitDescTime() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String[] data \u003d inputLine.split(\" /on \"); // data[0] os description, data[1] is the time"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String dateString \u003d (data[1].split(\"/tag\"))[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tatayu"
        },
        "content": "            date \u003d Time.readDate(dateString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printMsg(\"Please add \u0027/at \u003cdate\u003e\u0027 after your task to specify the entry date.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            throw new Exception(\"missing date\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }  catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printDateTimeFormatError();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            throw new Exception(\"invalid date\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a double variable from the specified string."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     Returns 0 if the specified string is not of a number."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     Mainly used for using the specified string for calculations in the command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     *     IE. Accessing arrays."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param str String (of number) to be converted into integer type."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return Integer type of the specified string."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public double stringToDouble(String str) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        double newDouble \u003d 0.0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            newDouble \u003d Double.parseDouble(str);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printInvalidNumberError(str);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return newDouble;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Command invalidCommand() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Ui.printInvalidCommandError();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return new ErrorCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Checks if the first word after \u0027add\u0027 is either \u0027income\u0027 or \u0027expense\u0027."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param s String to be analysed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return Either \u0027expense\u0027 or \u0027income\u0027 if either are passed in."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @throws Exception ???"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public static String verifyAddType(String s) throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        if (s.equals(\"income\") || s.equals(\"expense\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printInvalidEntryType();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            throw new Exception(\"invalid type\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns true if no error occurs while creating the required variables for \u0027addEntryCommand\u0027."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Also splits description and time components in the process."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return true if no error occurs."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public boolean verifyAddCommand() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            verifyAddType(inputArray[1]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            stringToDouble(inputArray[2]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            splitDescTime();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printInvalidEntryFormatError();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return false; // If error occurs, stop the method!"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Verifies modify command. //todo: edit javadoc"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public boolean verifyModifyCommand() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Integer.parseInt(inputArray[1]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            // TODO: Add support for modifying specific categories"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            Ui.printInvalidModifyFormatError();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 122,
      "tatayu": 3,
      "Weng-Kexin": 12
    }
  },
  {
    "path": "src/main/java/dolla/sort/ListComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "package dolla.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class ListComparator {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    static Comparator\u003cLog\u003e dateComparator() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return new Comparator\u003cLog\u003e() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            public int compare(Log o1, Log o2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                return o1.getDate().compareTo(o2.getDate());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    static Comparator\u003cLog\u003e descComparator() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return new Comparator\u003cLog\u003e() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            public int compare(Log o1, Log o2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                return o1.getDescription().compareTo(o2.getDescription());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    static Comparator\u003cLog\u003e nameComparator() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return new Comparator\u003cLog\u003e() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            public int compare(Log o1, Log o2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                return o1.getName().compareTo(o2.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 3,
      "yetong1895": 32
    }
  },
  {
    "path": "src/main/java/dolla/sort/Sort.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "package dolla.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class Sort {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    ArrayList\u003cLog\u003e list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public Sort(ArrayList\u003cLog\u003e list) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 13
    }
  },
  {
    "path": "src/main/java/dolla/sort/SortDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "package dolla.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Log;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * The type Sort date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class SortDate extends Sort {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Sort date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param list the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public SortDate(ArrayList\u003cLog\u003e list) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super(list);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Collections.sort(list, ListComparator.dateComparator());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Ui.printSortedList(list,\"date\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 9,
      "yetong1895": 15
    }
  },
  {
    "path": "src/main/java/dolla/sort/SortDescription.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "package dolla.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Log;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * The type Sort description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class SortDescription extends Sort {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Sort description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param list the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public SortDescription(ArrayList\u003cLog\u003e list) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super(list);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Collections.sort(list,ListComparator.descComparator());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Ui.printSortedList(list,\"description\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 9,
      "yetong1895": 15
    }
  },
  {
    "path": "src/main/java/dolla/sort/SortName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "package dolla.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Log;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * The type Sort name."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class SortName extends Sort {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Sort name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param list the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public SortName(ArrayList\u003cLog\u003e list) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super(list);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        Collections.sort(list,ListComparator.nameComparator());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Ui.printSortedList(list,\"name\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 9,
      "yetong1895": 15
    }
  },
  {
    "path": "src/main/java/dolla/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.task.Deadline is a type of duke.task.Task that stores the task description and due date of said task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Creates an instance with specified task description and due date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param description String of what the task entails."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param date duke.Time data of the day the task is due."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Deadline(String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        type \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a string of when the task is due in the format \u0027(by 11/11/1111 0000)\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * for printing purposes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return string of when the task is due in the format \u0027(by 11/11/1111 0000)\u0027."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String byStr \u003d timeToString(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"(by: \" + byStr + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a string of when the task is due in the format \u0027 | 11/11/1111 0000\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * for saving purposes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return a string of when the task is due in the format \u0027 | 11/11/1111 0000\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String formatDateSave() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String byStr \u003d timeToString(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \" | \" + byStr;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 42
    }
  },
  {
    "path": "src/main/java/dolla/task/Debt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tatayu"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Log;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tatayu"
        },
        "content": "public class Debt extends Log {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    protected double amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    protected String saveType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Instantiates a new Debt."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param type        the type"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param name        the name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param amount      the amount"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param description the description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param date        the date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public Debt(String type, String name, double amount, String description, LocalDate date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.userInput \u003d type + \" \" + name + \" \" + amount + \" \" + description + \" \" + \"/due \" + Time.dateToString(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public String getLogText() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return \"[\" + type + \"] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                + \"[\" + name + \"] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                + \"[\" + amountToMoney() + \"] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                + \"[\" + description + \"] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                + \"[/due \" + Time.dateToString(date) + \"]\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public String amountToMoney() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return \"$\" + amount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Returns a string with information about the entry to be saved."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return String with information of entry in save format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public String formatSave() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        saveType \u003d type.equals(\"owe\") ? \"O\" : \"B\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return saveType + \" | \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                + name + \" | \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                + amount + \" | \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                + description + \" | \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                + Time.dateToString(date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tatayu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tatayu": 58,
      "Weng-Kexin": 9,
      "yetong1895": 11
    }
  },
  {
    "path": "src/main/java/dolla/task/DebtList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tatayu"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Log;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tatayu"
        },
        "content": "public class DebtList extends LogList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public DebtList(ArrayList\u003cLog\u003e importDebtList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        super(importDebtList);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void add(Log newLog) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super.add(newLog);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Storage.setDebts(get()); //save"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void insertPrevPosition(int prevPosition, Log newLog) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super.insertPrevPosition(prevPosition, newLog);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void removeFromList(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super.removeFromList(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Storage.setDebts(get()); //save"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tatayu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tatayu": 11,
      "yetong1895": 19
    }
  },
  {
    "path": "src/main/java/dolla/task/DoAfter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will set the type of a do after task to A and set the description and event as"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * the input parameters."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param description is the description of the string"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param event is the event that the user want to do his/her activity after."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public DoAfter(String description, String event) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        type \u003d \u0027A\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will return the string showing the do after and the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return a string containing do after and the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return \"(do after: \" + event + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will return the save format of the event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return a string containg the save format to do after."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String formatDateSave() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return \" | \" + event;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 1,
      "yetong1895": 34
    }
  },
  {
    "path": "src/main/java/dolla/task/Entry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * Entry is a Class that stores an instance of the user\u0027s expense or income."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Entry extends Log {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected char sign; // \u0027+\u0027 for income, \u0027-\u0027 for expense"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected String saveType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected double amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Creates an instance of Entry."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param type Income or Expense."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param amount Amount of money that is earned/spent."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param description Details pertaining to the entry."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param date Date of income/expense."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public Entry(String type, double amount, String description, LocalDate date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.sign \u003d (type.equals(\"income\") ? \u0027+\u0027 : \u0027-\u0027);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.userInput \u003d type + \" \" + amount + \" \" + description + \" \" + \"/on \" + Time.dateToString(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String amountToMoney() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return \"$\" + amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a string to with information about the entry to be displayed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return String with information of entry."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getLogText() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"[\" + type + \"] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                + \"[\" + amountToMoney() + \"] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "                + \"[\" + description + \"] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                + \"[/on \" + Time.dateToString(date) + \"]\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Returns a string with information about the entry to be saved."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return String with information of entry in saving format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String formatSave() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        saveType \u003d type.equals(\"income\") ? \"I\" : \"E\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return  saveType + \" | \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                + amount + \" | \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                + description + \" | \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tatayu"
        },
        "content": "                + Time.dateToString(date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 42,
      "tatayu": 10,
      "yetong1895": 22
    }
  },
  {
    "path": "src/main/java/dolla/task/EntryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * Holds all the entries that have been added to Dolla."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class EntryList extends LogList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public EntryList(ArrayList\u003cLog\u003e importEntryList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(importEntryList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void add(Log newLog) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super.add(newLog);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Storage.setEntries(get()); //save"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void insertPrevPosition(int prevPosition, Log newLog) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super.insertPrevPosition(prevPosition, newLog);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void removeFromList(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super.removeFromList(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Storage.setEntries(get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 13,
      "yetong1895": 18
    }
  },
  {
    "path": "src/main/java/dolla/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.task.Deadline is a type of duke.task.Task that stores the task description and due date of said task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Creates an instance with specified task description and due date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param description String of what the task entails."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param date duke.Time data of the day the task is due."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Event(String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        type \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a string of when the task is due in the format \u0027(at 11/11/1111 0000)\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * for printing purposes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return string of when the task is due in the format \u0027(at 11/11/1111 0000)\u0027."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String atStr \u003d timeToString(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"(at: \" + atStr + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Returns a string of when the task is due in the format \u0027 | 11/11/1111 0000\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * for saving purposes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @return a string of when the task is due in the format \u0027 | 11/11/1111 0000\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String formatDateSave() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String atStr \u003d timeToString(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \" | \" + atStr;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 42
    }
  },
  {
    "path": "src/main/java/dolla/task/FixDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tatayu"
        },
        "content": "public class FixDuration extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will set the type of a fix duration task to w and set the description and duration in this"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * class as the input parameters."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param description is the description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param duration is the period of time that the user want to fix."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public FixDuration(String description, String duration) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        type \u003d \u0027W\u0027;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will return the duration of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return a string containing \"within\" and the duration of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tatayu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return \"(within \" + duration + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public String formatDateSave() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return \" | \" + duration;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tatayu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 1,
      "tatayu": 21,
      "yetong1895": 9
    }
  },
  {
    "path": "src/main/java/dolla/task/Limit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * Limit is a class that stores all limit related methods (savings and budgets)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class Limit extends Log {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected double amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    protected String duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected String saveType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    String[] limitType \u003d {\"saving\", \"budget\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Creates an instance of Limit."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param type Budget or Saving."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param amount Amount of money to be limited."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param duration Duration of the limit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public Limit(String type, double amount, String duration) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Returns a string to with information about the limit to be displayed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return String with information of limit."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public String getLogText() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return \"[\" + type + \"] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                + \"[\" + amountToMoney() + \"] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                + \"[\" + duration + \"]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tatayu"
        },
        "content": "        return null; //to be modified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tatayu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Method to add a new limit."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param limit limit to be added to the limitList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param limitList list in which limit is to be added to."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public void addLimit(Limit limit, LimitList limitList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        if (limit.type.equals(this.limitType[0]) || limit.type.equals(this.limitType[1])) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            //dosmth"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            //check if limit exists in limitlist"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Ui.printErrorMsg();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public void editCurrLimit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        //edit budget after adding in expenses or income"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String formatSave() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        saveType \u003d type.equals(\"saving\") ? \"S\" : \"BU\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return  saveType + \" | \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                + amount + \" | \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                + duration;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public String amountToMoney() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return \"$\" + amount;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public String getDuration() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 70,
      "tatayu": 5,
      "yetong1895": 8
    }
  },
  {
    "path": "src/main/java/dolla/task/LimitList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Log;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " * A class that contains methods regarding the Limit List."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class LimitList extends LogList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public LimitList(ArrayList\u003cLog\u003e importLimitList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        super(importLimitList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public boolean limitFinder(ArrayList\u003cLimit\u003e list, Limit limit) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        boolean limitIsFound \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            Limit currLimit \u003d list.get(i);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            if (limit.duration \u003d\u003d currLimit.duration \u0026\u0026 limit.type \u003d\u003d currLimit.type) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "                limitIsFound \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        return limitIsFound;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    //ADD TO LIST"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public void addToBudget() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void add(Log newLog) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super.add(newLog);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Storage.setLimits(get()); //save"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void removeFromList(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super.removeFromList(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Storage.setLimits(get()); //save"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    //EDIT LIST"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Weng-Kexin": 35,
      "yetong1895": 13
    }
  },
  {
    "path": "src/main/java/dolla/task/Log.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tatayu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * A class that is inherited from all forms of logging, ie. Entry and Debt,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * so that we can perform polymorphism."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public abstract class Log {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public abstract String getLogText();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public abstract String formatSave();//currently assuming no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tatayu"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 9,
      "tatayu": 3,
      "yetong1895": 23
    }
  },
  {
    "path": "src/main/java/dolla/task/LogList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.task.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import dolla.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class LogList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected ArrayList\u003cLog\u003e list;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public LogList(ArrayList\u003cLog\u003e importEntryList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.list \u003d importEntryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //this.list \u003d new ArrayList\u003cLog\u003e(); // TODO: UPDATE!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public ArrayList\u003cLog\u003e get() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void add(Log newLog) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        list.add(newLog);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void insertPrevPosition(int prevPosition, Log newLog) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        list.add(prevPosition, newLog);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Log getFromList(int index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void removeFromList(int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void addWithIndex(int modifyIndex, Log newLog) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        list.add(modifyIndex, newLog);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 34,
      "yetong1895": 9
    }
  },
  {
    "path": "src/main/java/dolla/task/Recurring.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class Recurring extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will set the type of a recurring task to R and set the description and day in this class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * as the input parameters."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param description is the description of the task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param day is the day of the week that the user want the recurring to happen."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public Recurring(String description, String day) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d \u0027R\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method will return the string which day the recurring event is."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string containing every and the day of the week that the recurring occur on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"(every: \" + day + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will a return a string in save format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return a string containg the save format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String formatDateSave() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return \" | \" + day;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 1,
      "yetong1895": 10,
      "-": 24
    }
  },
  {
    "path": "src/main/java/dolla/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected char type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected LocalDateTime date \u003d Time.readDateTime(\"01/01/0001 0000\"); // Default date"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return (isDone ? \"O\" : \"X\"); // returns O or X"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * converts the time from LocalDateTime to string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param time in LocalDateTime format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @return timeStr in \"dd/MM/yyyy HHmm\" format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String timeToString(LocalDateTime time) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        String timeStr \u003d time.format(formatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return timeStr;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"[\" + type + \"][\" + getStatusIcon() + \"] \" + description + getDateStr();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String formatDateSave() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public String formatSave() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return type + \" | \" + (isDone ? 1 : 0) + \" | \" + description + formatDateSave();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public char getTaskType() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 57,
      "Weng-Kexin": 7,
      "yetong1895": 6
    }
  },
  {
    "path": "src/main/java/dolla/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    protected ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e importTaskList) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        this.list \u003d importTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public ArrayList\u003cTask\u003e get() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        list.add(newTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public Task getFromList(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void removeFromList(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void replaceTask(int index, Task newTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        list.set(index, newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 19,
      "Weng-Kexin": 1,
      "yetong1895": 15
    }
  },
  {
    "path": "src/main/java/dolla/task/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "package dolla.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * duke.task.ToDo is a type of duke.task.Task that only stores the task description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * Creates an instance with specified task description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     * @param description String of what the task entails."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        type \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 16
    }
  },
  {
    "path": "src/main/java/dolla/ui/LimitUi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "package dolla.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.task.Limit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": " * LimitUi is a class that handles all limit related user interactions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class LimitUi extends Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Echo add limit."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param currLimit the curr limit"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void echoAddLimit(Limit currLimit) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tGot it. I\u0027ve added this limit: \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\t\" + currLimit.getLogText());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints remove limit message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param type     the type of limit"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * @param duration the duration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void echoRemoveLimit(String type, String duration) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tGot it. I\u0027ve removed this Limit: \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\t\" + duration + \" \" + type); //todo: change to the limit that is removed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Prints invalid amount message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void invalidAmountPrinter() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tOOPS! Please input the amount correctly!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Invalid set command printer."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void invalidSetCommandPrinter() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tOOPS! Please follow the format \u0027set [limitType] [AMOUNT] [DURATION]\u0027\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     * Invalid remove command printer."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    public static void invalidRemoveCommandPrinter() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(\"\\tOOPS! Please follow the format \u0027remove [DURATION] [limitType]\u0027\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 1,
      "Weng-Kexin": 61
    }
  },
  {
    "path": "src/test/java/AddTodoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "// TODO: Find out how to do testing for void methods"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class AddTodoCommandTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute_missingDescription() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        //assertEquals(void, new AddTodoCommand(\"\").execute(new TaskList(null)));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 9
    }
  },
  {
    "path": "src/test/java/CompleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "import dolla.command.CompleteCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import dolla.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "public class CompleteCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute_indexInBounds_success() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        Task sampleTodo \u003d new ToDo(\"Sample Task\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        tasks.add(sampleTodo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        new CompleteCommand(\"1\").execute(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        assertEquals(true, tasks.getFromList(0).getIsDone());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void execute_indexOutOfBounds_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            TaskList tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            new CompleteCommand(\"1\").execute(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "            assertEquals(\"Task number not in list\", e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 33,
      "Weng-Kexin": 1
    }
  },
  {
    "path": "src/test/java/DollaTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "omupenguin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Weng-Kexin"
        },
        "content": "public class DollaTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "omupenguin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "omupenguin": 8,
      "Weng-Kexin": 1,
      "-": 1
    }
  }
]
