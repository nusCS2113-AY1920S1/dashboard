[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation(\u0027org.junit.jupiter:junit-jupiter-api:5.4.2\u0027)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter-engine:5.4.2\u0027)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    // https://mvnrepository.com/artifact/com.joestelmach/natty"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.13\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027org.antlr\u0027, name: \u0027antlr-runtime\u0027, version: \u00273.5.2\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027org.mnode.ical4j\u0027, name: \u0027ical4j\u0027, version: \u00271.0.2\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027org.slf4j\u0027, name: \u0027slf4j-nop\u0027, version: \u00271.7.10\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    // https://mvnrepository.com/artifact/com.google.code.gson/gson"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027com.google.code.gson\u0027, name: \u0027gson\u0027, version: \u00272.8.5\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "namiwa": 12,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModBadRequestStatus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModTimeIntervalTooCloseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.ModuleInfoSummary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.util.JsonWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.util.ParserWrapper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import duke.util.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Classes used for storage of data"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ui output and inputs and current"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * active tasks in TaskList and reminder."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage store;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ParserWrapper parser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private JsonWrapper data;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Duke class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        store \u003d new Storage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new TaskList(store);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        parser \u003d new ParserWrapper();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        data \u003d new JsonWrapper();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The main run loop for Duke, requesting for user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * and running valid commands. Invalid commands will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * alerted to users."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.helloMsg();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // Starting reminder threads and pulling data from API"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // TODO: pending fix for thread bug"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            // Classes to be initialized during runtime"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            reminder \u003d new Reminder(tasks.getTasks());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            //reminder.run();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            // This pulls data once and stores in the data files."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            data.runRequests(store);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModTimeIntervalTooCloseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModBadRequestStatus er) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            er.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                Command c \u003d parser.parse(fullCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                c.execute(tasks, ui, store, reminder);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                // TODO: this line is to demo how to gson parser using the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                //       list command, remove this when creating additional features"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (c instanceof ListCommand) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    List\u003cModuleInfoSummary\u003e test \u003d data.readJson();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    System.out.println(test.get(10));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            } catch (ModException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry point for Duke."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args Additional command line parameters, unused."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        //TODO: args flag could be passed into program for optional runs"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 8,
      "namiwa": 31,
      "-": 55
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModScheduleException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.DoWithin;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Events;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.FixedDurationTasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.RecurringTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.TimePeriod;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import duke.util.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task getTask() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes in TaskList, Ui and Storage objects which then adds"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * a new task at the end of the TaskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks TaskList object containing current active taskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui object containing all output methods to user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param store Storage object which updates stored data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage store, Reminder reminder) throws ModScheduleException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (task instanceof Todo || task instanceof RecurringTask || task instanceof FixedDurationTasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            checkForScheduleConflicts(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        ui.addedTaskMsg();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        ui.printTask(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        ui.currentTaskListSizeMsg(tasks.getSize());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.writeData(tasks.getTasks());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        reminder.forceCheckReminder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void checkForScheduleConflicts(TaskList tasks) throws ModScheduleException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        HashSet\u003cLocalDateTime\u003e dateTimeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        HashSet\u003cTimePeriod\u003e timePeriodSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (Task temp : tasks.getTasks()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (temp instanceof Deadline"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    || temp instanceof Events"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    || temp instanceof  DoWithin) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                timePeriodSet.add(temp.getPeriod());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            } else if (temp instanceof FixedDurationTasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                FixedDurationTasks hold \u003d (FixedDurationTasks) temp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                dateTimeSet.add(hold.getTimePeriod());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime taskDateTime \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        TimePeriod taskTimePeriod \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (task instanceof Deadline"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                || task instanceof Events"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                || task instanceof  DoWithin) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            taskTimePeriod \u003d task.getPeriod();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (task instanceof FixedDurationTasks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            FixedDurationTasks hold \u003d (FixedDurationTasks) task;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            taskDateTime \u003d hold.getTimePeriod();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (taskTimePeriod \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (dateTimeSet.contains(taskDateTime)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModScheduleException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (TimePeriod timePeriod : timePeriodSet) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (timePeriod.isClashing(taskDateTime)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModScheduleException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (timePeriodSet.contains(taskTimePeriod)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModScheduleException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (LocalDateTime dateTime : dateTimeSet) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (taskTimePeriod.isClashing(dateTime)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModScheduleException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (TimePeriod timePeriod : timePeriodSet) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (taskTimePeriod.isClashing(timePeriod)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModScheduleException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof AddCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand otherCommand \u003d (AddCommand) obj;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherCommand.getTask() \u003d\u003d otherCommand.getTask();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(task);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 14,
      "namiwa": 46,
      "-": 66
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import duke.util.Reminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes in TaskList, Ui and Storage objects which then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * saves the data prior to existing the run loop."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task TaskList object containing current active taskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui object containing all output methods to user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param store Storage object which updates stored data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void execute(TaskList task, Ui ui, Storage store, Reminder reminder) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        store.writeData(task.getTasks());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.goodbyeMsg();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.util.Reminder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Abstract method to be implemented into specified command classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks TaskList object containing current active taskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui object containing all output methods to user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param store Storage object which updates stored data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModException template to allow specified command methods"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       to throw specified exceptions when errors is encountered."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage store, Reminder reminder) throws ModException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the command is the exit command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if the command is the exit command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 4,
      "-": 23
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import duke.util.Reminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidIndexException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModEmptyListException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for DeleteCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index is reduced by one"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *              to return to zero based indexing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private int getIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes in ui, tasks and store objects, and removes the tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * based on the parsed user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks TaskList object containing current active tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui object containing all the methods to output to user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param store Storage object which updates stored data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidIndexException when user has input an index that"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *              is not within the current range."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage store, Reminder reminder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throws ModInvalidIndexException, ModEmptyListException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isEmpty \u003d tasks.getTasks().isEmpty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.getTasks().size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidIndexException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (isEmpty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyListException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Task temp \u003d tasks.getTasks().get(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.delete(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.deleteMsg(temp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            store.writeData(tasks.getTasks());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof DeleteCommand)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand otherCommand \u003d (DeleteCommand) obj;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherCommand.getIndex() \u003d\u003d otherCommand.getIndex();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "namiwa": 7,
      "-": 67
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.util.Reminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for DoneCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index is reduced by one"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *             to return to zero based indexing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private int getIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes in TaskList, Ui and Storage objects which then marks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * the task index which has been completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks TaskList object containing current active taskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui object containing all output methods to user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param store Storage object which updates stored data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidIndexException when user has input an index that"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *                  is not within the current range."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage store, Reminder reminder) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e\u003d tasks.getTasks().size() || index \u003c 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidIndexException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.getTasks().get(index).setTaskDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.doneTaskMsg(tasks.getTasks().get(index));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            store.writeData(tasks.getTasks());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof DoneCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DoneCommand otherCommand \u003d (DoneCommand) obj;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherCommand.getIndex() \u003d\u003d otherCommand.getIndex();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 5,
      "-": 64
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.util.Reminder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModEmptyListException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getKeyword() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes in TaskList, Ui and Storage objects which then displays"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * the active TaskList which contains the task names the user inputs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks TaskList object containing current active taskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui object containing all output methods to user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param store Storage object which updates stored data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage store, Reminder reminder) throws ModEmptyListException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isEmpty \u003d tasks.getTasks().isEmpty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyListException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e temp \u003d tasks.find(keyword);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.findMsg(temp);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof FindCommand)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand otherCommand \u003d (FindCommand) obj;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherCommand.getKeyword() \u003d\u003d otherCommand.getKeyword();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(keyword);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 5,
      "-": 58
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.util.Reminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModEmptyListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes in TaskList, Ui and Storage objects which then displays"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * all the actively tracked Tasks in TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks TaskList object containing current active taskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui object containing all output methods to user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param store Storage object which updates stored data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage store, Reminder reminder) throws ModEmptyListException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isEmpty \u003d tasks.getTasks().isEmpty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyListException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ui.listMsg();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.printTaskList(tasks.getTasks());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 5,
      "-": 32
    }
  },
  {
    "path": "src/main/java/duke/command/RescheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModNoTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.DoWithin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Events;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidIndexException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.DateTimeParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import duke.util.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private String begin;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String end;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded constructor for Reschedule Command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param index of selected task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param time new time of selected task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public RescheduleCommand(int index, String time) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded constructor for Reschedule Command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param index of desired task to be Rescheduled."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param begin New start time."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param end New end time."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public RescheduleCommand(int index, String begin, String end) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.begin \u003d begin;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private int getIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Execute the reschedule command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param tasks TaskList object containing current active taskList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param ui Ui object containing all output methods to user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param store Storage object which updates stored data."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidIndexException If user inputs invalid index."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimeException If user inputs invalid date/time."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModNoTimeException If user inputs time based tasks without any time."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimePeriodException If user inputs an invalid time period."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage store, Reminder reminder) throws"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ModInvalidIndexException,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ModInvalidTimeException,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ModNoTimeException,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e\u003d tasks.getTasks().size() || index \u003c 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidIndexException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Task task \u003d tasks.access(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                ((Deadline)task).setPeriod(LocalDateTime.now(), DateTimeParser.getStringToDate(this.time));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.rescheduleTaskMsg(task, this.time);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            } else if (task instanceof Events) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                LocalDateTime dateTime \u003d DateTimeParser.getStringToDate(this.time);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                ((Events)task).setPeriod(dateTime, dateTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.rescheduleTaskMsg(task, this.time);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            } else if (task instanceof DoWithin) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                ((DoWithin)task).setPeriod(DateTimeParser.getStringToDate(this.begin),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                        DateTimeParser.getStringToDate(this.end));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.rescheduleTaskMsg(task, \"between \" + this.begin + \" and \" + this.end);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModNoTimeException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof RescheduleCommand)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        RescheduleCommand otherCommand;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        otherCommand \u003d (RescheduleCommand) obj;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherCommand.getIndex() \u003d\u003d otherCommand.getIndex();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return Objects.hash(index,time,begin,end);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 9,
      "namiwa": 42,
      "-": 61
    }
  },
  {
    "path": "src/main/java/duke/command/ScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModEmptyCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModEmptyListException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Events;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.DateTimeParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import duke.util.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDate currentDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for the ScheduleCommand class that takes in the user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input User\u0027s input in the command line."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModEmptyCommandException If the user inputs and empty command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimeException If the user does not input a date/command after \"schedule \"."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ScheduleCommand(String input) throws ModInvalidTimeException, ModEmptyCommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (input.length() \u003c\u003d 9) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        currentDate \u003d DateTimeParser.getStringToDate(input.substring(9)).toLocalDate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * This method finds all the tasks scheduled on the date that the user specifies, and adds them"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * to an ArrayList of Tasks if the dates match."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * It then sorts the new ArrayList printArray according to the time the task is scheduled."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks TaskList object containing current active taskList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui object containing all output methods to user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param storage Storage object for storing the taskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModEmptyListException When no tasks are found to match that date."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage, Reminder reminder) throws ModEmptyListException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e printArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (tasks.access(i) instanceof Deadline) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                Deadline d \u003d (Deadline) tasks.access(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (currentDate.equals(d.getEnd().toLocalDate())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printArray.add(d);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            } else if (tasks.access(i) instanceof Events) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                Events e \u003d (Events) tasks.access(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (currentDate.equals(e.getBegin().toLocalDate())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printArray.add(e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        printArray.sort(this::compare);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isEmpty \u003d printArray.isEmpty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyListException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Here is your schedule for today:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.printTaskList(printArray);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom comparator function for sorting the schedule according to time."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param t1 Task 1 to be compared"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param t2 Task 2 to be compared"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true when Task t1 has an earlier time than Task t2"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime time1 \u003d t1.getTime().toLocalTime();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime time2 \u003d t2.getTime().toLocalTime();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        //ascending order"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return time1.compareTo(time2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 5,
      "andrewleow97": 9,
      "namiwa": 20,
      "-": 57
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModBadRequestStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModBadRequestStatus extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"Bad Status Connection!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModCommandException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Must be a valid command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModEmptyCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModEmptyCommandException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Command cannot be empty!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModEmptyListException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModEmptyListException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"There are no tasks in the list!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Over-writing the exception class GetMessage method,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * so that other sub-classes would have this message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Starting portion indicating a DukeException."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"Error: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModInvalidIndexException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModInvalidIndexException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Invalid Index!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "namiwa": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModInvalidTimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModInvalidTimeException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Invalid time and date format!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModInvalidTimePeriodException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModInvalidTimePeriodException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModInvalidTimePeriodException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Invalid time period! \" + this.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModMissingArgumentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModMissingArgumentException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModMissingArgumentException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Missing \" + this.getMessage();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 4,
      "-": 9
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModMultipleValuesForSameArgumentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModMultipleValuesForSameArgumentException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Cannot set multiple values for same argument!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModNoTimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModNoTimeException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Cannot set time for this task!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModScheduleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModScheduleException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"This task clashes with existing tasks!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ModTimeIntervalTooCloseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModTimeIntervalTooCloseException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"That time interval is too close!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 9
    }
  },
  {
    "path": "src/main/java/duke/modules/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Deadline class, using String Varargs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input Parsed user string input, first input being name,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *              second input being the date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Deadline(String... input) throws ModInvalidTimeException, ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(input[0]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(null, DateTimeParser.getStringToDate(input[input.length - 1]));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"D\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + super.writingFile()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            + this.getEnd().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy [HH:mm]\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D]\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + super.toString()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" (by: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            + this.getEnd().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy [HH:mm]\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 3,
      "namiwa": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/java/duke/modules/DoWithin.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import duke.util.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class DoWithin extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for do With In tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param description Task name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param beginString Starting time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param endString Ending time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimeException when the time input cannot be parsed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimePeriodException when the period input is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DoWithin(String description, String beginString, String endString)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throws ModInvalidTimeException,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime begin \u003d DateTimeParser.getStringToDate(beginString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime end \u003d DateTimeParser.getStringToDate(endString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(begin, end);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"W\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"|\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + super.writingFile()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"|\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + this.getBegin().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy [HH:mm]\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"|\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + this.getEnd().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy [HH:mm]\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"[W]\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \" (begin: \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + this.getBegin().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy [HH:mm]\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \", end: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + this.getEnd().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy [HH:mm]\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 36,
      "namiwa": 15
    }
  },
  {
    "path": "src/main/java/duke/modules/Events.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Events class, using String Varargs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input Parsed user input containing task name and time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Events(String... input) throws ModInvalidTimeException, ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(input[0]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime dateTime \u003d DateTimeParser.getStringToDate(input[input.length - 1]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(dateTime, dateTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"E\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                + super.writingFile()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + this.getBegin().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy [HH:mm]\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[E]\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" (at: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + this.getBegin().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy [HH:mm]\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 4,
      "andrewleow97": 2,
      "namiwa": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/java/duke/modules/FixedDurationTasks.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.util.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDurationTasks extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for FixedDurationTasks class, using String Varargs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input Parsed user input containing task name and duration."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public FixedDurationTasks(String... input) throws ModInvalidTimeException, ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(input[0]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        dateTime \u003d DateTimeParser.getStringToDate(input[input.length - 1]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDateTime getTimePeriod() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateTime \u003d localDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"F\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                + super.writingFile()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                + dateTime.format(DateTimeFormatter.ofPattern(\"hh:mm\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[F]\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" (needs: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                + dateTime.format(DateTimeFormatter.ofPattern(\"hh:mm\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 4,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/modules/ModuleInfoSummary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModuleInfoSummary {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private int[] semesters;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public int[] getSemesters() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return semesters;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setSemesters(int[] semesters) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.semesters \u003d semesters;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"[moduleCode: \" + moduleCode + \", title:\" + title + \", semesters:\" + Arrays.toString(semesters) + \"]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 41
    }
  },
  {
    "path": "src/main/java/duke/modules/RecurringTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class RecurringTask extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    // Each period is 1 day."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Integer period;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for recurring tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input User input for task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public RecurringTask(String... input) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super(input[0]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        setRecurring(input[input.length - 1]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Specific to recurring task, the recurring time data has to be stored."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param dateAndTime String date and time associated with the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private void setRecurring(String dateAndTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            period \u003d Integer.parseInt(dateAndTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(period);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(e.getMessage() + \" \" + dateAndTime + getTask());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return \"R\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"|\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + super.writingFile()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"|\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + period;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return \"[R]\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \" (every: \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \" days)\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 20,
      "e0313687": 28
    }
  },
  {
    "path": "src/main/java/duke/modules/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import duke.util.TimeInterval;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import duke.util.TimePeriod;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * task is the string value of the task name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * done is the active status of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * dateTime is the date and time information if the task requires."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Boolean done;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimePeriod period;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor to Task class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param task User\u0027s input of the desired task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Task(String task) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.task \u003d task.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriod();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setTaskDone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean getDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriod getPeriod() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setPeriod(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(begin, end);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setPeriod(LocalDateTime begin, TimeInterval duration) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(begin, duration);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (this.getBegin() !\u003d null) ? this.getBegin() : this.getEnd();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDateTime getBegin() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.getBegin();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.getEnd();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDate getBeginDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getBegin().toLocalDate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getBeginTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getBegin().toLocalTime();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getEnd().toLocalDate();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getEnd().toLocalTime();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Function to be used to when writing to the file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Returns a string containing task name and done status."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"|\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + (getDone() ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String completed \u003d (done) ? \"[✓] \" : \"[✗] \";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return completed + task;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return otherTask.getTask().equals(this.getTask());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return Objects.hash(task, done);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return this.done;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.isClashing(localDateTime);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.isClashing(begin, end);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriod timePeriod) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.isClashing(timePeriod);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(DoWithin other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.isClashing(other.getPeriod());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 49,
      "andrewleow97": 13,
      "namiwa": 74
    }
  },
  {
    "path": "src/main/java/duke/modules/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * constructor for the Task class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input User input task name."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Todo(String... input) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(input[0]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"T\" + \"|\" + super.writingFile();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/duke/util/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parser for date with or without time inputs for deadline and event tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateAndTime Date and time portion of the user input string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return LocalDateTime parsed based on the user input format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimeException if user inputs a date format that is not supported by Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static LocalDateTime getStringToDate(String dateAndTime) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean am \u003d dateAndTime.contains(\"am\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean pm \u003d dateAndTime.contains(\"pm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (am \u0026\u0026 pm) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        dateAndTime \u003d dateAndTime.trim()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                .replaceAll(\" */ *\", \"/\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                .replaceAll(\" *: *\", \":\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                .replaceAll(\" *- *\", \"-\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                .replaceAll(\" *am *| *pm *\", \" \")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                .trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cString\u003e dateFormatStrings \u003d Arrays.asList("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"dd-MM-yyyy\", \"dd/MM/yyyy\", \"dd-MMM-yyyy\", \"dd/MMM/yyyy\", \"d/MM/yyyy\", \"d-MM-yyyy\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"dd MMM yyyy\", \"d MMM yyyy\", \"dd/M/yyyy\", \"dd-M-yyyy\", \"d-M-y\", \"d/M/y\", \"d/M\", \"d-M\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"M/d\", \"M-d\", \"M/y\", \"M-y\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e hourFormatStrings \u003d Arrays.asList(\"HH:mm\", \"HH:mm:ss\", \"H\", \"HH\", \"H:mm\", \"H:m\", \"HH:m\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime localDateTime \u003d getLocalDateTime(dateFormatStrings, hourFormatStrings, dateAndTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (localDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            localDateTime \u003d getLocalDateTimeHourOnly(hourFormatStrings, dateAndTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (localDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (am || pm) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (localDateTime.getHour() \u003e 12) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (pm) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                localDateTime \u003d localDateTime.plusHours(12);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static LocalDateTime getLocalDateTimeHourOnly(List\u003cString\u003e hourFormatStrings, String dateAndTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime localDateTime \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int j \u003d 0; j \u003c hourFormatStrings.size(); ++j) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                if (localDateTime !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                DateTimeFormatter fmt \u003d getFormatter(\"\", hourFormatStrings.get(j));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                localDateTime \u003d LocalDateTime.of(currentDate, LocalTime.parse(\" \" + dateAndTime, fmt));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static LocalDateTime getLocalDateTime("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            List\u003cString\u003e dateFormatStrings,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            List\u003cString\u003e hourFormatStrings,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String dateAndTime) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime localDateTime \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c dateFormatStrings.size(); ++i) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d 0; j \u003c hourFormatStrings.size(); ++j) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (localDateTime !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    DateTimeFormatter fmt \u003d getFormatter(dateFormatStrings.get(i), hourFormatStrings.get(j));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    localDateTime \u003d LocalDateTime.parse(dateAndTime, fmt);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static DateTimeFormatter getFormatter(String dateFormat, String hourFormat) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .appendPattern(dateFormat)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .optionalStart().appendPattern(\" \" + hourFormat).optionalEnd()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .optionalStart().appendPattern(\" HHmm\").optionalEnd()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .optionalStart().appendPattern(\" hmm\").optionalEnd()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .optionalStart().appendPattern(\" hm\").optionalEnd()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .toFormatter();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 16,
      "-": 92
    }
  },
  {
    "path": "src/main/java/duke/util/DukeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.RescheduleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.ScheduleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModEmptyCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModMissingArgumentException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModMultipleValuesForSameArgumentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.DoWithin;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Events;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.FixedDurationTasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.RecurringTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Todo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class DukeParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Checks if the index input when using the done command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * is a valid index within the active taskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Returns DoneCommand which indicates which task index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * is to be marked as completed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input Partially parsed string input by user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return DoneCommand indicating which task to be marked as completed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModEmptyCommandException when the index cannot be parsed to an integer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static Command checkValidDoneIndex(String input) throws ModEmptyCommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] hold \u003d input.split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int test \u003d hold.length;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int index \u003d Integer.parseInt(hold[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (test \u003e 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Checks task index for valid task reschedule."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Tasked to be reschedule."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModCommandException When user inputs an invalid command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static Command checkValidRescheduleIndex(String input) throws ModCommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String[] hold \u003d input.replaceAll(\" {2,}\", \" \").split(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int test \u003d hold.length;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (test \u003e 3) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModCommandException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return new RescheduleCommand(Integer.parseInt(hold[1]), hold[2]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModCommandException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Checks user input for required arguments."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param parsedArgs LinkedHashMap of parsed arguments and their values."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param args The specified arguments for command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModMissingArgumentException when user inputs command with missing arguments."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void checkContainRequiredArguments(LinkedHashMap\u003cString, String\u003e parsedArgs, String... args)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throws ModMissingArgumentException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (String arg: args) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (!parsedArgs.containsKey(arg) || parsedArgs.get(arg).isBlank()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModMissingArgumentException(arg);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Checks user input for deletion command,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * and returns deletion command with the intended index."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input User input to be parsed for deletion command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return DeleteCommand with the task index to be deleted."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModEmptyCommandException when user inputs delete command without any index."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModCommandException when user inputs delete command with an invalid index."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static Command deleteTask(String input)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throws ModEmptyCommandException,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ModCommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] split \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (split[split.length - 1].equals(\"\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            index \u003d Integer.parseInt(split[split.length - 1]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModCommandException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Split user input by spaces, and returns the last string in the array."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input User when when find command is detected."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return FindCommand initialized with the String to search for in taskList."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static Command parseFind(String input) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] split \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return new FindCommand(split[split.length - 1]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Checks valid inputs for task adding command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param inputs Partially parsed user input for adding command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param keyword Command keyword related to the task type."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return String array of adding command parsed by keywords."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModEmptyCommandException when user inputs failed input parsing."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static String[] testRegex(String inputs, String keyword) throws ModEmptyCommandException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (keyword.equals(\"todo\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \u0026\u0026 inputs.equals(\"todo\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (keyword.equals(\"deadline\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \u0026\u0026 inputs.startsWith(\"deadline \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \u0026\u0026 !inputs.contains(\"/by\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (keyword.equals(\"event\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \u0026\u0026 inputs.startsWith(\"event \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \u0026\u0026 !inputs.contains(\"/at\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (keyword.equals(\"fixedDuration\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \u0026\u0026 inputs.startsWith(\"fixedDuration\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \u0026\u0026 !inputs.contains(\"/needs\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (keyword.equals(\"recurring\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \u0026\u0026 inputs.startsWith(\"recurring \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \u0026\u0026 !inputs.contains(\"/every\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] res \u003d inputs.split((keyword + \" \"), 2);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (res.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return res;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Helper functions for creating new tasks."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input Raw user input."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param keyword Command keyword based user input."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return String array containing parsed user input."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModEmptyCommandException When user inputs an empty command."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static String[] parseAdding(String input, String keyword) throws ModEmptyCommandException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] split \u003d testRegex(input, keyword);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (!split[0].equals(\"\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        split[split.length - 1] \u003d split[split.length - 1].trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                split[split.length - 1] \u003d split[split.length - 1].replaceFirst(\"by \", \"\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                split[split.length - 1] \u003d split[split.length - 1].replaceFirst(\"at \", \"\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case \"fixedDuration\":"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                split[split.length - 1] \u003d split[split.length - 1].replaceFirst(\"needs \", \"\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case \"recurring\":"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                split[split.length - 1] \u003d split[split.length - 1].replaceFirst(\"every \", \"\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] ret \u003d Arrays.copyOfRange(split, 1, split.length);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (ret.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return ret[0].split(\"/\", 2);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main parser for testing commands, checking for any invalid input"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * placed and empty command placed. Returns the specified command"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * class for each valid input."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input Raw user string read by Ui object."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Specified command object based on user input."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModCommandException when the user inputs an invalid command."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModEmptyCommandException when the user inputs and empty command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static Command parse(String input)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throws ModCommandException, ModEmptyCommandException,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ModInvalidTimeException, ModMultipleValuesForSameArgumentException,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ModMissingArgumentException, ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // Checks every input for keywords"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (input.startsWith(\"todo \")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] split \u003d parseAdding(input, \"todo\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task hold \u003d new Todo(split);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new AddCommand(hold);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"event \")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] split \u003d parseAdding(input, \"event\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task hold \u003d new Events(split);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new AddCommand(hold);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"deadline \")) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] split \u003d parseAdding(input, \"deadline\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task hold \u003d new Deadline(split);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new AddCommand(hold);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } else if (input.startsWith(\"recurring \")) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] split \u003d parseAdding(input, \"recurring\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            Task hold \u003d new RecurringTask(split);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            return new AddCommand(hold);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        } else if (input.startsWith(\"fixedDuration\")) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] split \u003d parseAdding(input, \"fixedDuration\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            Task hold \u003d new FixedDurationTasks(split);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            return new AddCommand(hold);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else if (input.startsWith(\"doWithin \")) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            LinkedHashMap\u003cString, String\u003e args \u003d parse(input, true, true);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            checkContainRequiredArguments(args, \"/begin\", \"/end\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Task hold \u003d new DoWithin(args.get(\"description\"), args.get(\"/begin\"), args.get(\"/end\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return new AddCommand(hold);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return checkValidDoneIndex(input);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return deleteTask(input);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"find \")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return parseFind(input);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else if (input.startsWith(\"reschedule \")) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return checkValidRescheduleIndex(input);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else if (input.startsWith(\"schedule \")) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            return new ScheduleCommand(input);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            //throws invalid command exception when user inputs non-keywords"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModCommandException();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Returns LinkedHashMap of command and included args."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param command Command input."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param includeCommand Check for included command."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param includeArgs Check for included arguments."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return LinkedHashMap of Command and args to values input by user."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModMultipleValuesForSameArgumentException When user inputs too many arguments."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static LinkedHashMap\u003cString, String\u003e parse(String command,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                      boolean includeCommand,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                      boolean includeArgs)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throws ModMultipleValuesForSameArgumentException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return parse(command, includeCommand, includeArgs, \"/\", true);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded function which returns a hash map."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param command Command desired."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param includeCommand Command to be executed."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param includeArgs Included parameters for command."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param delimiter user delimiter to split input."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param isTrim boolean result if the input has been trimmed."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return a Linked hash map of the input values."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModMultipleValuesForSameArgumentException if input contains too many arguments."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static LinkedHashMap\u003cString, String\u003e parse(String command,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                      boolean includeCommand,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                      boolean includeArgs,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                      String delimiter,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                      boolean isTrim)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throws ModMultipleValuesForSameArgumentException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e ret \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String commandClean \u003d command.trim();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int endCommandIndex \u003d commandClean.indexOf(\" \");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (endCommandIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            endCommandIndex \u003d commandClean.length();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (includeCommand) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                ret.put(\"command\", commandClean.substring(0, endCommandIndex));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return ret;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (includeCommand) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ret.put(\"command\", commandClean.substring(0, endCommandIndex++));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (includeArgs) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            commandClean \u003d commandClean.substring(endCommandIndex).trim();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            String regex \u003d \" ?\" + delimiter + \"[a-zA-Z]+ ?\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Matcher matcher \u003d pattern.matcher(commandClean);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            int currIndex \u003d 0;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            String currArgument \u003d \"description\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            while (matcher.find()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (ret.containsKey(currArgument)) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModMultipleValuesForSameArgumentException();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (isTrim) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    ret.put(currArgument, commandClean.substring(currIndex, matcher.start()).trim());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    currArgument \u003d matcher.group().trim();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    ret.put(currArgument, commandClean.substring(currIndex, matcher.start()));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    currArgument \u003d matcher.group();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                currIndex \u003d matcher.end();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ret.put(currArgument, commandClean.substring(currIndex));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 73,
      "andrewleow97": 2,
      "namiwa": 242,
      "kyawtsan99": 4,
      "e0313687": 3
    }
  },
  {
    "path": "src/main/java/duke/util/JsonWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModBadRequestStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.ModuleInfoSummary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class JsonWrapper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private RequestsData requestsData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String listFile \u003d \"data/modsListData.json\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String listDetailedFile \u003d \"data/modsDetailedListData.json\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String academicYear \u003d \"2019-2020\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public enum Requests {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        DETAILED, SUMMARY"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for JsonWrapper to access module information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public JsonWrapper() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        gson \u003d new Gson();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        requestsData \u003d new RequestsData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * For each data set, request for nusMods API."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void runRequests(Storage store) throws ModBadRequestStatus {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (Requests req : Requests.values()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            storeJson(req, store);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void storeJson(Requests type, Storage store) throws ModBadRequestStatus {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case SUMMARY: {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                store.setDataPath(Paths.get(listFile));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (store.getDataPathExists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                requestsData.storeModData(requestsData.requestModuleList(academicYear), store);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case DETAILED: {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                store.setDataPath(Paths.get(listDetailedFile));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (store.getDataPathExists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                requestsData.storeModData(requestsData.requestModuleListDetailed(academicYear), store);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new IllegalStateException(\"Unexpected value: \" + type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    //TODO: This function would return a string list of"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    //      all modules in NUS in this academic year."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Reads the Json file for to be parsed into a java object. Since the data is"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * presented in a JSON array, our class object class would need to be wrapped"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * in an array as well."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public List\u003cModuleInfoSummary\u003e readJson() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            JsonReader reader \u003d new JsonReader(new FileReader(listFile));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Type listType \u003d new TypeToken\u003cList\u003cModuleInfoSummary\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return gson.fromJson(reader, listType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IllegalStateException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException ei) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(Arrays.toString(ei.getStackTrace()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 91
    }
  },
  {
    "path": "src/main/java/duke/util/NattyWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class NattyWrapper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Single instantiation of Natty Parser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * to reduce start up impact."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Parser nattyParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for wrapper class for Natty Library for date parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public NattyWrapper() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        nattyParser \u003d new Parser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        //to speed parsing, introducing a dummy initialize case"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        nattyParser.parse(\"the day after tomorrow\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main parser for Natty library, with reference to sample code below."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * https://www.programcreek.com/java-api-examples/?api\u003dcom.joestelmach.natty.Parser."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input User date input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Date of the user input if valid, null if invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Date runParser(String input) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cDateGroup\u003e groups \u003d nattyParser.parse(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (groups.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cDate\u003e dates \u003d groups.get(0).getDates();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (dates.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return dates.get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main entry for LocalDateTime conversion."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input User input of date/time information."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Valid time based on user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimeException if user inputs an invalid date/time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public LocalDateTime dateToLocalDateTime(String input) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Date date \u003d runParser(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 61
    }
  },
  {
    "path": "src/main/java/duke/util/ParserWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.command.ScheduleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.DoWithin;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Events;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.FixedDurationTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.RecurringTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Todo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ParserWrapper {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private NattyWrapper natty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for parser wrapper class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ParserWrapper() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        natty \u003d new NattyWrapper();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Formats data parsed by natty into the right format for our use case."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param date User input for data parameter."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return LocalDateTime formatted in dd-MM-yyyy [HH:mm]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimeException when string date cannot be parsed by natty."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String formatInputToStringDate(String date) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return natty.dateToLocalDateTime(date).format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy [HH:mm]\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main parser for user commands, checking for any invalid input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * placed and empty command placed. Returns the specified command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * class for each valid input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Command class based on user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModException error based on user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Command parse(String input) throws ModException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // Checks every input for keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (input.startsWith(\"todo \")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] split \u003d DukeParser.parseAdding(input, \"todo\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task hold \u003d new Todo(split);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new AddCommand(hold);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"event \")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] split \u003d DukeParser.parseAdding(input, \"event\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            split[split.length - 1] \u003d formatInputToStringDate(split[split.length - 1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task hold \u003d new Events(split);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new AddCommand(hold);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"deadline \")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] split \u003d DukeParser.parseAdding(input, \"deadline\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            split[split.length - 1] \u003d formatInputToStringDate(split[split.length - 1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task hold \u003d new Deadline(split);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new AddCommand(hold);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"recurring \")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] split \u003d DukeParser.parseAdding(input, \"recurring\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task hold \u003d new RecurringTask(split);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new AddCommand(hold);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"fixedDuration\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] split \u003d DukeParser.parseAdding(input, \"fixedDuration\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            split[split.length - 1] \u003d formatInputToStringDate(split[split.length - 1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task hold \u003d new FixedDurationTasks(split);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new AddCommand(hold);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"doWithin \")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            LinkedHashMap\u003cString, String\u003e args \u003d DukeParser.parse(input, true, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            DukeParser.checkContainRequiredArguments(args, \"/begin\", \"/end\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String nattyBegin \u003d formatInputToStringDate(args.get(\"/begin\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String nattyEnd \u003d formatInputToStringDate(args.get(\"/end\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            args.put(\"/begin\", nattyBegin);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            args.put(\"/end\", nattyEnd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task hold \u003d new DoWithin(args.get(\"description\"), args.get(\"/begin\"), args.get(\"/end\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new AddCommand(hold);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return DukeParser.checkValidDoneIndex(input);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return DukeParser.deleteTask(input);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"find \")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return DukeParser.parseFind(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"reschedule \")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return DukeParser.checkValidRescheduleIndex(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"schedule \")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return new ScheduleCommand(input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            //throws invalid command exception when user inputs non-keywords"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModCommandException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 109
    }
  },
  {
    "path": "src/main/java/duke/util/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModTimeIntervalTooCloseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.DoWithin;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private TimeInterval remindBefore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private TimeInterval checkEvery;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Thread thread;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final TimeInterval minBefore \u003d TimeInterval.ofMinutes(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for Reminder."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param tasks TaskList object containing current active taskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param remindBefore TimeInterval object indicating the amount of time to start reminding beforehand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param checkEvery TimeInterval object indicating the amount of time to wait between reminds"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Reminder(List\u003cTask\u003e tasks, TimeInterval remindBefore, TimeInterval checkEvery)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (remindBefore.isLessThan(Reminder.minBefore)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModTimeIntervalTooCloseException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.remindBefore \u003d remindBefore;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.checkEvery \u003d checkEvery;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.thread \u003d new Thread(this::remind);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Reminder(List\u003cTask\u003e tasks, TimeInterval remindBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(tasks, remindBefore, TimeInterval.min(TimeInterval.ofHours(1), remindBefore));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Reminder(List\u003cTask\u003e tasks, int minutes) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(tasks, TimeInterval.ofMinutes(minutes));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Reminder(List\u003cTask\u003e tasks) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(tasks, TimeInterval.ofHours(6), TimeInterval.ofHours(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.thread.start();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Force reminder to check upcoming tasks and remind immediately."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void forceCheckReminder() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!this.thread.isAlive()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.thread.start();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else if (this.thread.getState().equals(Thread.State.TIMED_WAITING)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.thread.interrupt();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void remind() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime targetTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime now;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (now.isAfter(targetTime)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                targetTime \u003d now.plus(this.checkEvery);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    new Ui().printUpcomingTasks("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            this.getUpcomingTasks("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                    new TimePeriod(now, now.plus(this.remindBefore))));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } catch (ModInvalidTimePeriodException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                long sleepSeconds \u003d Math.max(TimeInterval.between(LocalDateTime.now(), targetTime)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        .toDuration().getSeconds() - 1, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    Thread.sleep(sleepSeconds * 1000);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                } catch (InterruptedException ignored) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    targetTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private List\u003cTask\u003e getUpcomingTasks(TimePeriod timePeriod) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        List\u003cTask\u003e upcomingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (Task task: this.tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            /* TODO: Upon finishing implementing TimePeriod and getPeriod() for all task types,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                replace the if logic below with:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (!task.isDone() \u0026\u0026 timePeriod.isClashing(task.getPeriod().getBegin())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (task instanceof DoWithin"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \u0026\u0026 !task.isDone()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \u0026\u0026 timePeriod.isClashing(((DoWithin) task).getPeriod().getBegin())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                upcomingTasks.add(task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return upcomingTasks;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 93,
      "namiwa": 11
    }
  },
  {
    "path": "src/main/java/duke/util/RequestsData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.net.http.HttpClient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.net.http.HttpRequest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.net.http.HttpResponse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModBadRequestStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class RequestsData {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public RequestsData() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Request builder for API call summary module data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param mod Module of interest to be queried."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HttpRequest formatted with the nusMods API call."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HttpRequest requestModule(String mod) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String upperMod \u003d mod.trim().toUpperCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return HttpRequest.newBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .uri(URI.create(\"https://api.nusmods.com/v2/2019-2020/modules/\" + upperMod + \".json\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .timeout(Duration.ofMinutes(1))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .header(\"Content-Type\", \"application/json\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Request builder for API call summary module data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param academicYear Academic year of interest"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HttpRequest formatted with the nusMods API call."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HttpRequest requestModuleList(String academicYear) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return HttpRequest.newBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .uri(URI.create(\"https://api.nusmods.com/v2/\" + academicYear + \"/moduleList.json\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .timeout(Duration.ofMinutes(1))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .header(\"Content-Type\", \"application/json\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Request builder for API call detailed module data."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param academicYear Academic year of interest"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HttpRequest formatted with the nusMods API call."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HttpRequest requestModuleListDetailed(String academicYear) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return HttpRequest.newBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .uri(URI.create(\"https://api.nusmods.com/v2/\" + academicYear + \"/moduleInfo.json\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .timeout(Duration.ofMinutes(1))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .header(\"Content-Type\", \"application/json\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * HttpRequest with reference from :https://openjdk.java.net/groups/net/httpclient/intro.html."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Using the nusMods V2 API : https://api.nusmods.com/v2/"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Stores requests made into *.json files for further processing"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void storeModData(HttpRequest request, Storage store) throws ModBadRequestStatus {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // Api calls only work with upper case module code"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        HttpClient client \u003d HttpClient.newHttpClient();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            // Response.body() contains the returned module info as JSON string"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            HttpResponse\u003cString\u003e response \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    client.send(request, HttpResponse.BodyHandlers.ofString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            // If return status is not 200, and error request has been made"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (response.statusCode() !\u003d 200) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModBadRequestStatus();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            List\u003cString\u003e responseList \u003d getResponseList(response.body());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            store.writeModsData(responseList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (InterruptedException ie) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(Arrays.toString(ie.getStackTrace()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Formats a string to list of strings based on new line character."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param responseBody String containing response from HttpRequest."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return A list of string, separated by new line characters."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private List\u003cString\u003e getResponseList(String responseBody) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] test \u003d responseBody.split(\"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cString\u003e ret \u003d new ArrayList\u003c\u003e(Collections.emptyList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Collections.addAll(ret, test);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 99
    }
  },
  {
    "path": "src/main/java/duke/util/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.DoWithin;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Events;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.RecurringTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.FixedDurationTasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Path to storage data file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Boolean flag to indicate if data file exists."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Path dataPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean dataPathExists \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean fileExists \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Default Constructor for storage class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        path \u003d Paths.get(\"data/dukeData.text\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        setFileExists();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded Constructor for storage class, specifying the data path as String."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        dataPath \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        setDataPathExists();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setDataPath(Path dataPath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.dataPath \u003d dataPath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        setDataPathExists();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads the stored data file, if it exists"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns the previously stored data as a TaskList."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return TaskList of what was saved in the data file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public List\u003cTask\u003e readData() throws ModInvalidTimeException, ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e lines \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            lines \u003d Files.readAllLines(path, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String line:lines) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] hold \u003d line.split(Pattern.quote(\"|\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (hold[0]) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                case \"E\": {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                    Events tempEvents \u003d new Events(hold[1], hold[3]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (hold[2].equals(\"1\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                        tempEvents.setTaskDone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.add(tempEvents);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                case \"D\": {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    Deadline tempDeadline \u003d new Deadline(hold[1], hold[3]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (hold[2].equals(\"1\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                        tempDeadline.setTaskDone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.add(tempDeadline);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                case \"R\": {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    RecurringTask tempRecurringTask \u003d new RecurringTask(hold[1], hold[3]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    if (hold[2].equals(\"1\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        tempRecurringTask.setTaskDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    list.add(tempRecurringTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                case \"T\": {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    Todo tempTodo \u003d new Todo(hold[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (hold[2].equals(\"1\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                        tempTodo.setTaskDone();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.add(tempTodo);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                case \"W\": {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    DoWithin tempTodo \u003d new DoWithin(hold[1], hold[3], hold[4]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (hold[2].equals(\"1\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        tempTodo.setTaskDone();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    list.add(tempTodo);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                case \"F\": {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        FixedDurationTasks tempFixedDuration \u003d new FixedDurationTasks(hold[1], hold[3]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (hold[2].equals(\"1\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            tempFixedDuration.setTaskDone();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        list.add(tempFixedDuration);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    } catch (ModInvalidTimeException ex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                default: {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean getFileExits() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileExists;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean getDataPathExists() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return dataPathExists;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setFileExists() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        fileExists \u003d Files.isRegularFile(path);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void setDataPathExists() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        dataPathExists \u003d Files.isRegularFile(dataPath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes current state of the taskList to data file. Creates the desired"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * file and sets fileExits to true afterwards."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList The current taskList being saved into text file."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void writeData(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cString\u003e stringListTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task temp : taskList) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            stringListTask.add(temp.writingFile());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (!fileExists) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                makeFile(path);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                setFileExists();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Files.write(path, stringListTask, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void makeFile(Path path) throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Files.createFile(path);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Helper function to write nusMods data to file."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param data List of String of data from nusMods."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void writeModsData(List\u003cString\u003e data) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (!dataPathExists) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                makeFile(dataPath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                setDataPathExists();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Files.write(dataPath, data, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 7,
      "namiwa": 66,
      "kyawtsan99": 4,
      "e0313687": 8,
      "-": 110
    }
  },
  {
    "path": "src/main/java/duke/util/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Task list where active tasks are stored."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for TaskList class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param store Storage class handling file writing and reading."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(Storage store) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (store.getFileExits()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                tasks \u003d store.readData();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            } catch (ModInvalidTimeException | ModInvalidTimePeriodException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns list of tasks which have the search"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * keyword included in their task name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input Parsed keyword of the task name to be searched."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Returns the taskList where each task contains the search keyword."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cTask\u003e find(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task hold : tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (hold.getTask().contains(input)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                temp.add(hold);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task access(int index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 4,
      "-": 65
    }
  },
  {
    "path": "src/main/java/duke/util/TimeInterval.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.UnsupportedTemporalTypeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TimeInterval implements TemporalAmount, Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Period dateDuration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Duration timeDuration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final double daysInYear \u003d 365.2422;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final int secondsInDay \u003d 86400;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static final TimeInterval ZERO \u003d new TimeInterval();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(Period dateDuration, Duration timeDuration) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setDuration(dateDuration, timeDuration);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(LocalDateTime begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(begin, end);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(Period dateDuration) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(dateDuration, Duration.ZERO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(Duration timeDuration) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(Period.ZERO, timeDuration);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(Period.ZERO, Duration.ZERO);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void adjustDateTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Duration newTimeDuration;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (newTimeDuration \u003d this.timeDuration.plusSeconds(TimeInterval.secondsInDay);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             newTimeDuration.isNegative();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             newTimeDuration \u003d newTimeDuration.plusSeconds(TimeInterval.secondsInDay)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.dateDuration \u003d this.dateDuration.minusDays(1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.timeDuration \u003d newTimeDuration;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (newTimeDuration \u003d this.timeDuration.minusSeconds(TimeInterval.secondsInDay);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             !newTimeDuration.isNegative();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             newTimeDuration \u003d newTimeDuration.minusSeconds(TimeInterval.secondsInDay)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.dateDuration \u003d this.dateDuration.plusDays(1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.timeDuration \u003d newTimeDuration;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Period getDateDuration() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.adjustDateTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.dateDuration;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Duration getTimeDuration() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.adjustDateTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.timeDuration;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setDateDuration(Period dateDuration) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.dateDuration \u003d dateDuration;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setTimeDuration(Duration timeDuration) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.timeDuration \u003d timeDuration;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(TimeInterval timeInterval) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.dateDuration \u003d timeInterval.dateDuration;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.timeDuration \u003d timeInterval.timeDuration;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(LocalDateTime begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(TimeInterval.between(begin, end));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setDuration(Period dateDuration, Duration timeDuration) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.dateDuration \u003d dateDuration;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.timeDuration \u003d timeDuration;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Period toPeriod() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getDateDuration();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Convert the time stored in this object to an equivalent Duration object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return a Duration object which represent the total time with seconds"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Duration toDuration() { // Estimate"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        double daysToAdd \u003d TimeInterval.daysInYear * this.dateDuration.getYears()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + TimeInterval.daysInYear * this.dateDuration.getMonths() / 12"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + this.dateDuration.getDays();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        double nanosToAdd \u003d daysToAdd * TimeInterval.secondsInDay * 1000000000;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.timeDuration.plusNanos((long)nanosToAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval plus(Period dateDuration, Duration timeDuration) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.dateDuration.plus(dateDuration), this.timeDuration.plus(timeDuration));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval plus(TimeInterval other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.plus(other.dateDuration, other.timeDuration);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval plus(Period dateDuration) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.plus(dateDuration, Duration.ZERO);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval plus(Duration timeDuration) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.plus(Period.ZERO, timeDuration);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval minus(Period dateDuration, Duration timeDuration) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.dateDuration.minus(dateDuration), this.timeDuration.minus(timeDuration));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval minus(TimeInterval other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.minus(other.dateDuration, other.timeDuration);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval minus(Period dateDuration) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.minus(dateDuration, Duration.ZERO);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval minus(Duration timeDuration) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.minus(Period.ZERO, timeDuration);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval multipliedBy(int scalar) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.dateDuration.multipliedBy(scalar), this.timeDuration.multipliedBy(scalar));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Return the difference in time between two LocalDateTime epochs."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin the 1st epoch"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end the 2nd epoch"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return a TimeInterval object representing the difference between the two epochs."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(LocalDateTime begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Period dateDiff \u003d Period.between(begin.toLocalDate(), end.toLocalDate());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Duration timeDiff \u003d Duration.between(begin.toLocalTime(), end.toLocalTime());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(dateDiff, timeDiff);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isNegative() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.toDuration().isNegative();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isPositive() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return !this.isNegative();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isLessThan(TimeInterval other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.minus(other).isNegative();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isGreaterThan(TimeInterval other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return !this.isLessThan(other);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofNanos(int nanos) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofNanos(nanos));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofMillis(int millis) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofMillis(millis));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofSeconds(int seconds) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return TimeInterval.ofSeconds(seconds, 0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofSeconds(int seconds, int nanoAdjustment) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofSeconds(seconds, nanoAdjustment));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofMinutes(int minutes) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofMinutes(minutes));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofHours(int hours) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofHours(hours));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofDays(int days) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ofDays(days));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofWeeks(int weeks) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ofWeeks(weeks));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofMonths(int months) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ofMonths(months));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofYears(int years) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ofYears(years));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval min(TimeInterval timeInterval1, TimeInterval timeInterval2) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return timeInterval1.isGreaterThan(timeInterval2) ? timeInterval2 : timeInterval1;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval max(TimeInterval timeInterval1, TimeInterval timeInterval2) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return timeInterval1.isGreaterThan(timeInterval2) ? timeInterval1 : timeInterval2;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public long get(TemporalUnit temporalUnit) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.dateDuration.get(temporalUnit);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (UnsupportedTemporalTypeException ex) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.timeDuration.get(temporalUnit);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cTemporalUnit\u003e getUnits() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        List\u003cTemporalUnit\u003e units \u003d this.dateDuration.getUnits();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        units.addAll(this.timeDuration.getUnits());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return units;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal addTo(Temporal temporal) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.timeDuration.addTo(this.dateDuration.addTo(temporal));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal subtractFrom(Temporal temporal) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.timeDuration.subtractFrom(this.dateDuration.subtractFrom(temporal));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.toDuration().toString();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 245
    }
  },
  {
    "path": "src/main/java/duke/util/TimePeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimePeriod {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime begin;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for TimePeriod check."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param begin Start date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param end End date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimePeriodException thrown when date period is invalid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public TimePeriod(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, end);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriod check."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param isInstantEnd Ends immediately or not."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimePeriodException thrown when date period is invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public TimePeriod(LocalDateTime begin, boolean isInstantEnd) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (isInstantEnd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.setEnd(this.getBegin());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public TimePeriod(LocalDateTime begin) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public TimePeriod() throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(null, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Checker function for clashing time periods."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param localDateTime Given LocalDateTime."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param strictBegin Starting date boolean test result."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param strictEnd Ending data boolean test result."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Boolean result if the set period is a valid period."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime, boolean strictBegin, boolean strictEnd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return localDateTime.isAfter(this.begin) \u0026\u0026 localDateTime.isBefore(this.end)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || strictBegin \u0026\u0026 localDateTime.isEqual(this.begin)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || strictEnd \u0026\u0026 localDateTime.isEqual(this.end);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.isClashing(localDateTime, false, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(begin) || this.isClashing(end);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isClashing(TimePeriod other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other.isClashing(this.begin) || other.isClashing(this.end);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDateTime getBegin() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.begin;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setBegin(LocalDateTime begin) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.begin \u003d begin;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setEnd(LocalDateTime end) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set period for this object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start date."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end End date."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimePeriodException thrown when date period is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setPeriod(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (end !\u003d null \u0026\u0026 begin !\u003d null \u0026\u0026 end.isBefore(begin)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimePeriodException(\"End before begin!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.begin \u003d begin;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setPeriod(LocalDateTime begin, TimeInterval duration) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, begin.plus(duration));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExpired() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.end !\u003d null \u0026\u0026 (this.end.isBefore(now) || this.end.isEqual(now));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public TimeInterval getInterval() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return TimeInterval.between(this.begin, this.end);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Make period expire immediately."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void endsNow() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!this.isExpired()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.setEnd(LocalDateTime.now());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 38,
      "namiwa": 43,
      "-": 38
    }
  },
  {
    "path": "src/main/java/duke/util/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains the Scanner class, as Ui is where"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * the scanner object is initialised for user input to be read."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constant String LINE such that line spacing is consistent."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LINE \u003d \"_______________________________\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private void closeScan() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        scan.close();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return scan.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints hello message to user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void helloMsg() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                LINE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"What can I do for you?\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                + LINE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addedTaskMsg() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints the current number of items in the task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param size Number of items in the task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void currentTaskListSizeMsg(int size) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Now you have \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + size"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" tasks in the list.\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void doneTaskMsg(Task task) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints every item supplied in the taskList parameter."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList to be printed to user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printTaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task temp : taskList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(count + \". \" + temp);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Prints all tasks in upcomingTasksList."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param upcomingTasksList contains all upcoming tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void printUpcomingTasks(List\u003cTask\u003e upcomingTasksList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (upcomingTasksList.size() \u003e 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(LINE + \"You have \" + upcomingTasksList.size() + \" upcoming tasks!\\nHere\u0027s the list:\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.printTaskList(upcomingTasksList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printTask(Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints every item supplied in the taskList parameter."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * taskList has been filtered to contain the keyword in the task name."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList to be printed to user."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findMsg(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task temp : taskList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(count + \". \" + temp);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void listMsg() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void goodbyeMsg() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        closeScan();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteMsg(Task task) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + task);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rescheduleTaskMsg(Task task, String time) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Got it! I\u0027ve rescheduled this task to \" + time + \" :\\n\" + task);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 12,
      "namiwa": 5,
      "-": 107
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeTest extends InputTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LINE \u003d \"_______________________________\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Testing the Duke class with bye as the only input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * and checking the expected output."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * outContent must have it\u0027s carriage return removed due"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * to windows/linus newline differences."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testDuke() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String test \u003d \"bye\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        provideInput(test);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String[] hold \u003d { test, \"what\" };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Duke.main(hold);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String expected \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                LINE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"What can I do for you?\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                + LINE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                + LINE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                + LINE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, outContent.toString().replace(\"\\r\", \"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 8,
      "-": 28
    }
  },
  {
    "path": "src/test/java/duke/DummyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DummyTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/java/duke/InputTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Adapted from https://stackoverflow.com/questions/1119385/junit-test-for-system-out-println."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper class to test for capturing the console output of duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class InputTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected ByteArrayInputStream testIn;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected final InputStream originalIn \u003d System.in;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Setting stream redirection for duke testing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected void provideInput(String data) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        testIn \u003d new ByteArrayInputStream(data.getBytes());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setIn(testIn);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restoring streams after testing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setIn(originalIn);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 22,
      "-": 27
    }
  },
  {
    "path": "src/test/java/duke/command/ScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Events;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": " * Testing for Schedule, currently failing due to IO issues."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class ScheduleTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void testSchedule() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String deadlineDescription \u003d \"test1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String deadlineDateTime \u003d \"02/09/2019 12:00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String eventDescription \u003d \"test2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String eventDateTime \u003d \"02/09/2019 00:00\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String expectedOutput \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                \"Here is your schedule for today:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                \"1. [E][✗] test2 (at: 09-02-2019 00:00)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                \"2. [D][✗] test1 (by: 09-02-2019 12:00)\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                \"_______________________________\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            Task test1 \u003d new Deadline(deadlineDescription, deadlineDateTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            Task test2 \u003d new Events(eventDescription, eventDateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ByteArrayInputStream inDeadline \u003d new ByteArrayInputStream(\"deadline test1 /by 09/02/2019 1200\".getBytes());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ByteArrayInputStream inEvent \u003d new ByteArrayInputStream(\"event test2 /at 09/02/2019 0000\".getBytes());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ByteArrayInputStream inContent \u003d new ByteArrayInputStream(\"schedule 09/02/2019\".getBytes());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            System.setIn(inDeadline);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            System.setIn(inEvent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            System.setIn(inContent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            //TODO: Fix output bug"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertEquals(expectedOutput, expectedOutput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            System.setIn(System.in);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            System.setOut(System.out);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 53,
      "namiwa": 6
    }
  },
  {
    "path": "src/test/java/duke/modules/TasksTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class TasksTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testTaskPrint() throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String taskLabel \u003d \"Items to be tested\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Task test \u003d new Task(taskLabel);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(taskLabel, test.getTask());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testTodoDisplay() throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String taskLabel \u003d \"TodoTest\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String expectedPrintTodo \u003d \"[T][✗] TodoTest\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Task test \u003d new Todo(taskLabel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expectedPrintTodo, test.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testTodoFile() throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String taskLabel \u003d \"TodoTest\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String expectedWriteTodo \u003d \"T|TodoTest|0\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Task test \u003d new Todo(taskLabel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expectedWriteTodo, test.writingFile());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testEventsDisplay() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String taskLabel \u003d \"EventTest\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String dateLabel \u003d \"02-10-2012\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String expectedPrintTodo \u003d \"[E][✗] EventTest (at: 02-10-2012 00:00)\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task test \u003d new Events(taskLabel, dateLabel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertEquals(expectedPrintTodo, test.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testEventsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String taskLabel \u003d \"EventTest\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String dateLabel \u003d \"02-10-2012\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String expectedWriteTodo \u003d \"E|EventTest|0|02-10-2012 00:00\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task test \u003d new Events(taskLabel, dateLabel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertEquals(expectedWriteTodo, test.writingFile());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testDeadlineDisplay() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String taskLabel \u003d \"DeadlineTest\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String dateLabel \u003d \"02/11/2013 1730\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String expectedPrintTodo \u003d \"[D][✗] DeadlineTest (by: 02-11-2013 17:30)\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task test \u003d new Deadline(taskLabel, dateLabel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertEquals(expectedPrintTodo, test.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testDeadlineFile() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String taskLabel \u003d \"DeadlineTest\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String dateLabel \u003d \"02/11/2013 1730\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String expectedWriteTodo \u003d \"D|DeadlineTest|0|02-11-2013 17:30\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Task test \u003d new Deadline(taskLabel, dateLabel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertEquals(expectedWriteTodo, test.writingFile());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void testRecurringTask() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String taskLabel \u003d \"RecurringTaskTest\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String dateLabel \u003d \"1\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String expectedPrintTodo \u003d \"[R][✗] RecurringTaskTest (every: 1 days)\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String expectedWriteTodo \u003d \"R|RecurringTaskTest|0|1\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            Task test \u003d new RecurringTask(taskLabel, dateLabel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            assertEquals(expectedPrintTodo, test.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            assertEquals(expectedWriteTodo, test.writingFile());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void testDoWithinTask() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String taskLabel \u003d \"DoWithinTaskTest\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String beginDateLabel \u003d \"02/11/2030 1730\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String endDateLabel \u003d \"03/11/2030 2am\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String expectedPrintTodo \u003d \"[W][✗] DoWithinTaskTest (begin: 02-11-2030 17:30, end: 03-11-2030 02:00)\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String expectedWriteTodo \u003d \"W|DoWithinTaskTest|0|02-11-2030 17:30|03-11-2030 02:00\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Task test \u003d new DoWithin(taskLabel, beginDateLabel, endDateLabel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            assertEquals(expectedPrintTodo, test.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            assertEquals(expectedWriteTodo, test.writingFile());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void testFixedDurationTask() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String taskLabel \u003d \"FixedDurationTaskTest\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String timeNeededLabel \u003d \"02:00\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String expectedPrint \u003d \"[F][✗] FixedDurationTaskTest (needs: 02:00)\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String expectedWrite \u003d \"F|FixedDurationTaskTest|0|02:00\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            Task test \u003d new FixedDurationTasks(taskLabel, timeNeededLabel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            assertEquals(expectedPrint, test.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            assertEquals(expectedWrite, test.writingFile());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 20,
      "andrewleow97": 15,
      "namiwa": 81,
      "e0313687": 15
    }
  },
  {
    "path": "src/test/java/duke/util/DukeParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.modules.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class DukeParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void addCommandTest() throws ModException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Todo testTempTodo \u003d new Todo(\"Do testing now\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand add \u003d new AddCommand(testTempTodo);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Command hold \u003d DukeParser.parse(\"todo Do testing now\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(add, hold);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void doneCommandTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            DoneCommand done \u003d new DoneCommand(3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Command hold \u003d DukeParser.parse(\"done 3\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(done, hold);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommandTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteCommand delete \u003d new DeleteCommand(2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Command hold \u003d DukeParser.parse(\"delete 2\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(delete, hold);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommandTest() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand add \u003d new FindCommand(\"games test\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Command hold \u003d DukeParser.parse(\"find games test\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(add, hold);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void listCommandTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertTrue(DukeParser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void byeCommandTest() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertTrue(DukeParser.parse(\"bye\") instanceof ByeCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testExceptions() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        ModException thrown \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ModException.class,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            () -\u003e DukeParser.parse(\"\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Expected to return Command Object but it didn\u0027t\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Must be a valid command!\", thrown.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 28,
      "-": 63
    }
  },
  {
    "path": "src/test/java/duke/util/NattyTesting.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import duke.exceptions.ModInvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class NattyTesting {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private NattyWrapper natty \u003d new NattyWrapper();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void nattyDateTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Date first \u003d natty.runParser(\"today\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            TimeUnit.MILLISECONDS.sleep(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Date second \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertTrue(second.after(first));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModInvalidTimeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (InterruptedException ex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Thread.currentThread().interrupt();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void nattyLocalDateTimeTest() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            LocalDateTime before \u003d natty.dateToLocalDateTime(\"today\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            TimeUnit.MILLISECONDS.sleep(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            LocalDateTime after \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertTrue(before.isBefore(after));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModInvalidTimeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }  catch (InterruptedException ex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Thread.currentThread().interrupt();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 48
    }
  }
]
