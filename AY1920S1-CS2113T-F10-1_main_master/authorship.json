[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    archiveBaseName \u003d \"Planner\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    archiveVersion \u003d \"v1.3.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation(\u0027org.junit.jupiter:junit-jupiter-api:5.4.2\u0027)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter-engine:5.4.2\u0027)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    // https://mvnrepository.com/artifact/com.joestelmach/natty"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.13\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027org.antlr\u0027, name: \u0027antlr-runtime\u0027, version: \u00273.5.2\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027org.mnode.ical4j\u0027, name: \u0027ical4j\u0027, version: \u00271.0.2\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027org.slf4j\u0027, name: \u0027slf4j-nop\u0027, version: \u00271.7.10\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    // https://mvnrepository.com/artifact/com.google.code.gson/gson"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027com.google.code.gson\u0027, name: \u0027gson\u0027, version: \u00272.8.5\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    // https://mvnrepository.com/artifact/net.sourceforge.argparse4j/argparse4j"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    compile group: \u0027net.sourceforge.argparse4j\u0027, name: \u0027argparse4j\u0027, version: \u00270.8.1\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        })"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "test {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    mainClassName \u003d \"planner.main.CliLauncher\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 8,
      "namiwa": 64,
      "-": 41
    }
  },
  {
    "path": "src/main/java/planner/credential/CredentialManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class CredentialManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static HashSet\u003cString\u003e validActions \u003d new HashSet\u003c\u003e(Arrays.asList(\"login\", \"register\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Login/register prompt."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param plannerUi plannerUi to use"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return corresponding user profile"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UserProfile prompt(PlannerUi plannerUi) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String action \u003d plannerUi.loginPrompt();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (!CredentialManager.validActions.contains(action)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            action \u003d plannerUi.invalidResponsePrompt();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.login(action.equals(\"register\"), plannerUi);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Login to ModPlanner."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param isNewUser is user new (not registered)?"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param plannerUi plannerUi to use"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return corresponding user profile"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private UserProfile login(boolean isNewUser, PlannerUi plannerUi) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        UserProfile userProfile \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String userName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String password;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean firstPrompt \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (userProfile \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (firstPrompt) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                firstPrompt \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                plannerUi.println(\"Invalid credential, please try again!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            userName \u003d this.getUserName(isNewUser, plannerUi);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            password \u003d this.getPassWord(plannerUi);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            userProfile \u003d UserProfile.createProfile(userName, password, plannerUi);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Prompt for username."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param isNewUser is user new (not registered)?"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param plannerUi plannerUi to use"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return username"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String getUserName(boolean isNewUser, PlannerUi plannerUi) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String userName \u003d plannerUi.prompt(\"Username: \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (isNewUser \u0026\u0026 UserProfile.userExists(userName)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                userName \u003d plannerUi.userExistPrompt();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } else if (!isNewUser \u0026\u0026 !UserProfile.userExists(userName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                userName \u003d plannerUi.noSuchUserPrompt();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return userName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String getPassWord(PlannerUi plannerUi) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return plannerUi.prompt(\"Password: \", false, true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 72
    }
  },
  {
    "path": "src/main/java/planner/credential/Hasher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.MessageDigest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Hasher {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String defaultAlgorithm \u003d \"SHA-512\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get hash value for input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param input input for hashing"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param algorithm algorithm to use"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return hash value"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws NoSuchAlgorithmException when selected algorithm is not supported or invalid"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public byte[] getHash(String input, String algorithm) throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        MessageDigest md \u003d MessageDigest.getInstance(algorithm);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return md.digest(input.getBytes(StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get hash value for input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param input input for hashing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return hash value"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public byte[] getHash(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.getHash(input, defaultAlgorithm);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (NoSuchAlgorithmException ignored) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getHashString(String input, String algorithm) throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.toHexString(this.getHash(input, algorithm));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getHashString(String input) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.toHexString(this.getHash(input));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Convert password hash bytes to hex String."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param hash input hash"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return hex String representation of input hash"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toHexString(byte[] hash) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        BigInteger number \u003d new BigInteger(1, hash);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        StringBuilder hexString \u003d new StringBuilder(number.toString(16));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (hexString.length() \u003c 32) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            hexString.insert(0, \u00270\u0027);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return hexString.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 60
    }
  },
  {
    "path": "src/main/java/planner/credential/UserProfile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class UserProfile {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private int currentSemester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private HashMap\u003cInteger, HashMap\u003cString, List\u003c? extends Task\u003e\u003e\u003e modulesAndCcas;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static Hasher hasher \u003d new Hasher();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static HashMap\u003cString, HashMap\u003cString, UserProfile\u003e\u003e users \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            storage.readGson(\"data/users.json\", HashMap.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (users \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            UserProfile.users \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            UserProfile.users.put(\"users\", new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    static UserProfile createProfile(String userName, String password, PlannerUi plannerUi) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (UserProfile.userExists(userName)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return UserProfile.loadProfile(userName, password);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        UserProfile userProfile \u003d new UserProfile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        userProfile.userName \u003d userName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        userProfile.password \u003d UserProfile.hasher.getHashString(password);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int year \u003d plannerUi.yearPrompt();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int semester \u003d plannerUi.semesterPrompt();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        userProfile.currentSemester \u003d (year \u003c\u003c 1) + semester - 2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static UserProfile loadProfile(String userName, String password) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        UserProfile userProfile \u003d UserProfile.users.get(\"users\").get(userName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (UserProfile.isValidPassword(password, userProfile.password)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return userProfile;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void saveProfile() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        UserProfile.users.get(\"users\").put(this.getUserName(), this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        storage.writeGson(UserProfile.users, \"data/users.json\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static boolean userExists(String userName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return UserProfile.users.get(\"users\").containsKey(userName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static boolean isValidPassword(String password, String passwordHash) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return passwordHash.equals(UserProfile.hasher.getHashString(password));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getUserName() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.userName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int getSemester() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.currentSemester;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cModuleTask\u003e getModules(int semester) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (List\u003cModuleTask\u003e) this.modulesAndCcas.get(semester).get(\"modules\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cModuleTask\u003e getModules() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getModules(this.getSemester());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CcaList getCcas(int semester) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (CcaList) this.modulesAndCcas.get(semester).get(\"ccas\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CcaList getCcas() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getCcas(this.getSemester());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set modules/ccas for a semester."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param semester selected semester"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param tasks module list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void setTask(int semester, String type, List\u003c? extends Task\u003e tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        HashMap\u003cString, List\u003c? extends Task\u003e\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modulesMap.put(type, tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.modulesAndCcas.put(semester, modulesMap);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setModules(int semester, List\u003cModuleTask\u003e modules) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setTask(semester, \"modules\", modules);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setModules(List\u003cModuleTask\u003e modules) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setModules(this.getSemester(), modules);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setCcas(int semester, CcaList ccas) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setTask(semester, \"ccas\", ccas);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setCcas(CcaList ccas) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setCcas(this.getSemester(), ccas);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set modules and ccas for a semester."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param semester selected semester"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param modules module list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param ccas cca list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setModulesAndCcas(int semester, List\u003cModuleTask\u003e modules, CcaList ccas) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setModules(semester, modules);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setCcas(semester, ccas);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setModulesAndCcas(List\u003cModuleTask\u003e modules, CcaList ccas) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setModulesAndCcas(this.getSemester(), modules, ccas);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 132
    }
  },
  {
    "path": "src/main/java/planner/logic/command/AddCcaScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModCcaScheduleException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModEmptyListException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModOutOfBoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.datetime.NattyWrapper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodWeekly;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class AddCcaScheduleCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public AddCcaScheduleCommand(Arguments args) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void execute(HashMap\u003cString,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        ModuleTasksList tasks,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        CcaList ccas,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        JsonWrapper jsonWrapper) throws ModException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int index \u003d arg(\"index\", Integer.class) - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (ccas.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModEmptyListException(\"ccas\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d ccas.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModOutOfBoundException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Cca cca \u003d ccas.get(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        NattyWrapper natty \u003d new NattyWrapper();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime begin \u003d natty.dateToLocalDateTime(arg(\"begin\")).toLocalTime();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime end \u003d natty.dateToLocalDateTime(arg(\"end\")).toLocalTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        DayOfWeek dayOfWeek \u003d DayOfWeek.valueOf(arg(\"dayOfWeek\").toUpperCase());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (cca.isClashing(new TimePeriodWeekly(begin, end, dayOfWeek))) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModCcaScheduleException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cca.addPeriod(begin, end, dayOfWeek);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (ccas.clashes(cca)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            cca.removePeriod(cca.getPeriods().size() - 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModCcaScheduleException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        plannerUi.addedMsg(cca);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 59
    }
  },
  {
    "path": "src/main/java/planner/logic/command/Arguments.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Arguments extends HashMap\u003cString, Object\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Arguments(Map\u003cString, Object\u003e map) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(map);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 13
    }
  },
  {
    "path": "src/main/java/planner/logic/command/CapCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "//@@author andrewleow97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModMissingArgumentException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.planner.ModNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModEmptyCommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModEmptyListException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class CapCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /* TO-DO"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    Cap report overall METHOD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    get list of done modules from tasklist, store as tuple? new class? (mcs, letter grade, s/u) in a new arraylist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    calculate mc weightage and cap, request for additional cap info if necessary eg. letter grade missing, s/u options"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    show cap"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    Cap what-if report one module METHOD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    get list of prereq/preclusions of that module, store in arraylist"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    iterate through donemodules from tasklist, remove from above arraylist if done"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    if empty, proceed, else throw new exception modules not completed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    calculate expected cap from the donemodules and their mc weightages"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    print expected cap"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    Cap what-if report overall METHOD ? dont know if needed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    repeat call above method for all 2k modules and above"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    print expected cap @ graduation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String[] command;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    //public ArrayList\u003cModuleInfoSummary\u003e completedModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    //public ModuleList specificModuleCap;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private double currentCap;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private double projectedModuleCap;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private double projectedCap;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private double mcCount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for the CapCommand class where user can enquire information about their CAP."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Such as overall CAP and what-if reports about predicted CAP."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Input format can be in three forms"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * `cap` overall cap"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * `cap list` to calculate cap from grades in module list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * `cap module to check predicted cap for a specific module from prerequisites"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public CapCommand(Arguments args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        mcCount \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        currentCap \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        projectedModuleCap \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        projectedCap \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public boolean isComplete(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return input.equalsIgnoreCase(\"done\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public double getCurrentCap() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return currentCap;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public double getProjectedModuleCap() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return projectedModuleCap;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public double getProjectedCap() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return projectedCap;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Converts String grade to a double value according to NUS guidelines."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public double letterGradeToCap(String grade) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        switch (grade) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"A+\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"A\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 5.00;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"A-\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 4.50;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"B+\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 4.00;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"B\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 3.50;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"B-\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 3.00;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"C+\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 2.50;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"C\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 2.00;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"D+\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 1.50;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 1.00;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"F\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 0.50;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 0.00;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Execute of 3 different forms of user input according to the arguments of the user input."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        ModuleTasksList moduleTasksList,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        CcaList ccas,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        JsonWrapper jsonWrapper)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        throws ModException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        switch (arg(\"toCap\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"overall\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                plannerUi.capStartMsg();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                calculateOverallCap(moduleTasksList, detailedMap, plannerUi, store, scanner);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"module\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                plannerUi.capModStartMsg();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                calculateModuleCap(moduleTasksList, detailedMap, plannerUi, store, scanner);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                //calculate the module\u0027s predicted cap from its prerequisites"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                //TODO in progress"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                List\u003cModuleTask\u003e hold \u003d moduleTasksList.getTasks();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                plannerUi.capListStartMsg(hold);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                calculateListCap(moduleTasksList, detailedMap, plannerUi, store, scanner, hold);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new ModCommandException();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * User will keep inputting \"[moduleCode] [letterGrade]\" until satisfied."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Then user inputs \"done\" and the user\u0027s CAP will be calculated and printed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void calculateOverallCap(ModuleTasksList moduleTasksList,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    PlannerUi plannerUi,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    Storage store,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    Scanner scanner)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        throws ModMissingArgumentException, ModNotFoundException, ModEmptyCommandException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        while (!isComplete(userInput)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                //\"Please input a completed module and your grade for it,\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                //\" or input done to finish and calculate your CAP\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            String[] userInfo \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (!detailedMap.containsKey(userInfo[0].toUpperCase())) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new ModNotFoundException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            double mcTemp \u003d detailedMap.get(userInfo[0].toUpperCase()).getModuleCredit();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (!detailedMap.get(userInfo[0].toUpperCase()).getAttributes().isSu()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                || letterGradeToCap(userInfo[1].toUpperCase()) !\u003d 0.00) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                mcCount +\u003d mcTemp;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (userInfo[1].isEmpty()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new ModMissingArgumentException(\"Please input a letter grade for this module.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            currentCap +\u003d (letterGradeToCap(userInfo[1].toUpperCase()) * mcTemp);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        double averageCap \u003d currentCap / mcCount;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        plannerUi.capMsg(averageCap);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Calculates a predicted CAP for a module based on the grades attained for it\u0027s prerequisites."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void calculateModuleCap(ModuleTasksList moduleTasksList,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    PlannerUi plannerUi,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    Storage store,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    Scanner scanner)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        throws ModMissingArgumentException,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ModNotFoundException,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ModEmptyListException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String moduleCode \u003d scanner.nextLine().toUpperCase();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (!detailedMap.containsKey(moduleCode)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new ModNotFoundException();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.println(detailedMap.get(moduleCode).getPrerequisites());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e prunedModules \u003d parsePrerequisiteTree(moduleCode, detailedMap);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e toCalculate \u003d prunedModules;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (moduleTasksList.getTasks().isEmpty()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new ModEmptyListException();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (ModuleTask x : moduleTasksList.getTasks()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            for (int i \u003d 0; i \u003c toCalculate.size(); i++) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                if (prunedModules.get(i).contains(x.getModuleCode())) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    if (!x.getModuleInfoDetailed().getAttributes().isSu() || letterGradeToCap(x.getGrade()) !\u003d 0.00) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        mcCount +\u003d x.getModuleCredit();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    projectedModuleCap +\u003d letterGradeToCap(x.getGrade());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    toCalculate.remove(i);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (toCalculate.isEmpty()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            double averageCap \u003d projectedModuleCap / mcCount;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.capModMsg(averageCap, moduleCode);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.capModuleIncompleteMsg(toCalculate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    // make 2 more identical list of lists, remove from one if found in moduletask list / equivalent,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    // check if isempty, if it is then print cap score according to the cloned list of lists"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Calculates CAP according to the modules with grades in the ModuleTaskList."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void calculateListCap(ModuleTasksList moduleTasksList,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                 HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                 PlannerUi plannerUi,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                 Storage store,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                 Scanner scanner,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                 List\u003cModuleTask\u003e moduleList) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (ModuleTask module : moduleList) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (!module.getModuleInfoDetailed().getAttributes().isSu() || letterGradeToCap(module.getGrade()) !\u003d 0.00) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                mcCount +\u003d module.getModuleCredit();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            projectedCap +\u003d (letterGradeToCap(module.getGrade()) * module.getModuleCredit());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        double averageCap \u003d projectedCap / mcCount;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (projectedCap \u003d\u003d 0 \u0026\u0026 mcCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.capListErrorMsg();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.capMsg(averageCap);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to parse prerequisites from ModuleInfoDetailed and splice it into a List of Lists of String."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Overall is List of Lists, for each internal List it contains modules that are \u0027or\u0027ed with each other"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * i.e taking one of the modules in the internal list is enough to fulfill one list of prerequisites"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Across the whole list is modules that are \u0027and\u0027ed with each other"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * The whole List of Lists must be complete and graded in order for prerequisites to be fulfilled"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return A List of lists of string of prerequisite modules to be graded before calculating cap"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public List\u003cList\u003cString\u003e\u003e parsePrerequisiteTree(String prerequisites,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                                    HashMap\u003cString,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                                    ModuleInfoDetailed\u003e detailedMap) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        //regex([a-zA-Z][a-zA-Z][0-9][0-9][0-9][0-9]|and|or) to get only module codes, and and ors into string array"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        // (check for and after because some have AY19/20 and after, then need to reject those \u0027ands\u0027)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        // need to logic and/or from array to cut down size of array"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String[] initialParsedModules \u003d prerequisites"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            .split(\"[a-zA-Z][a-zA-Z][a-zA-Z]?[0-9][0-9][0-9][0-9][a-zA-Z]?|and|or|equivalent\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e prunedModules \u003d null;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        /* EXAMPLES"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            prerequisite\":\"((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent))"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            and (MA1100 or (CS1231 or its equivalent))\""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            prerequisite\":\"CG2027/EE2027 (for AY2017 intake \u0026 after)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            prerequisite\":\"EE2028 or CG2028 (for AY2017 intake \u0026 after)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            prerequisite\":\"((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and CS2102"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            prerequisite\":\"CG2027/EE2027 (for AY2017 intake \u0026 after) ; EE2021 (for AY2016 intake \u0026 prior)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        // what does or its equivalent mean? get preclusion of mod and add it to the pruned"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        // make 2 more identical list of lists, remove from one if found in moduletask list / equivalent,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        // check if isempty, if it is then print cap score according to the cloned list of lists"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        // for \u0027or\u0027 check next input, if not equivalent"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        // then add to same i dont increase i, if is check after if still or vs and"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        // if and, add to list i, move i"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (int i \u003d 0; i \u003c initialParsedModules.length; i++) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (initialParsedModules[i].equals(\"equivalent\")) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                String[] preclusions \u003d detailedMap.get(initialParsedModules[i - 1]).getPreclusion()"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    .split(\"[a-zA-Z][a-zA-Z][a-zA-Z]?[0-9][0-9][0-9][0-9][a-zA-Z]?\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                //preclusion should be all ors, just split and add to pruned without incrementing j"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                for (String x : preclusions) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    prunedModules.get(j).add(x);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            } else if (initialParsedModules[i].equals(\"and\")) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                prunedModules.get(j).add(initialParsedModules[i + 1]);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            } else if (!initialParsedModules[i].equals(\"or\")) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                prunedModules.get(j).add(initialParsedModules[i]);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return prunedModules;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 306
    }
  },
  {
    "path": "src/main/java/planner/logic/command/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ClearCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ClearCommand(Arguments args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        ModuleTasksList tasks,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        CcaList ccas,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        JsonWrapper jsonWrapper) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String toClear \u003d arg(\"toClear\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        plannerUi.clearMsg(toClear);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean confirm \u003d plannerUi.confirm();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (confirm) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            switch (toClear) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                case (\"modules\"): {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    tasks.clearAll();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                case (\"ccas\"): {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    ccas.clear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                // TODO: Add clear data capability"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                // case (\"data\"): {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                // break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                // }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                default: {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            plannerUi.clearedMsg(toClear);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            jsonWrapper.storeTaskListAsJson(tasks.getTasks(), store);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            plannerUi.abortMsg();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 58
    }
  },
  {
    "path": "src/main/java/planner/logic/command/EndCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class EndCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ModuleTasksList tasks,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            CcaList ccas,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerUi plannerUi,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Storage store,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            JsonWrapper jsonWrapper) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        plannerUi.goodbyeMsg();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        //System.exit(0); // Causes test cases to throw exceptions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        //Runtime.getRuntime().halt(0); //Forced kill"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 28
    }
  },
  {
    "path": "src/main/java/planner/logic/command/GradeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "//@@author andrewleow97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.planner.ModNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class GradeCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for GradeCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public GradeCommand(Arguments args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Allows users to grade modules in task list, or add modules with a grade attached if it is not in their list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        ModuleTasksList tasks,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        CcaList ccas,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        JsonWrapper jsonWrapper) throws ModException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String moduleCode \u003d arg(\"moduleCode\").toUpperCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String letterGrade \u003d arg(\"letterGrade\").toUpperCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (!detailedMap.containsKey(moduleCode)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new ModNotFoundException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ModuleInfoDetailed mod \u003d detailedMap.get(moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ModuleTask temp \u003d new ModuleTask(moduleCode, mod);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (!tasks.getTasks().contains(temp)) { // if list does not have module requested, add it with a grade"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            mod.setGrade(letterGrade);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ModuleTask temp2 \u003d new ModuleTask(moduleCode, mod);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            temp2.setTaskDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            tasks.getTasks().add(temp2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.addedMsg(temp2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            jsonWrapper.storeTaskListAsJson(tasks.getTasks(), store);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else if (tasks.getTasks().contains(temp)) { // otherwise set grade"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            int location \u003d tasks.getTasks().indexOf(temp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            tasks.getTasks().get(location).setGrade(letterGrade);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            tasks.getTasks().get(location).setTaskDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.gradedMsg(temp.getModuleCode(), letterGrade);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            jsonWrapper.storeTaskListAsJson(tasks.getTasks(), store);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new ModNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 60
    }
  },
  {
    "path": "src/main/java/planner/logic/command/ModuleComInterface.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoSummary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public interface ModuleComInterface {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void execute("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            HashMap\u003cString, ModuleInfoSummary\u003e summaryHashMap,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            HashMap\u003cString, ModuleInfoDetailed\u003e detailedHashMap,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerUi plannerUi) throws ModException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 17
    }
  },
  {
    "path": "src/main/java/planner/logic/command/ModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public abstract class ModuleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    Arguments args;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModuleCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModuleCommand(Arguments args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    \u003cT\u003e T arg(String name, Class\u003cT\u003e type) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return type.cast(this.args.get(name));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    String arg(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return this.arg(name, String.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public abstract void execute("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ModuleTasksList tasks,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            CcaList ccas,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerUi plannerUi,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Storage store,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            JsonWrapper jsonWrapper) throws ModException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 41
    }
  },
  {
    "path": "src/main/java/planner/logic/command/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "//@@author kyawtsan99"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.reminder.ThirtyMinReminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.reminder.OneHourReminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.reminder.TwevleHourReminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.reminder.OneDayReminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.reminder.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class ReminderCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private ThirtyMinReminder thirtyMinReminder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private OneHourReminder oneHourReminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private TwevleHourReminder twevleHourReminder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private OneDayReminder oneDayReminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public ReminderCommand(Arguments args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        ModuleTasksList tasks,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        CcaList ccas,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        JsonWrapper jsonWrapper) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        switch (arg(\"toReminder\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"list\") : {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.reminderList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"one\") : {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                thirtyMinReminder.run();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"two\") : {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                oneHourReminder.run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"three\") : {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                twevleHourReminder.run();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case \"four\" :"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                oneDayReminder.run();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 69
    }
  },
  {
    "path": "src/main/java/planner/logic/command/RemoveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModEmptyListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModOutOfBoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class RemoveCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public RemoveCommand(Arguments args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        ModuleTasksList tasks,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        CcaList ccas,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        JsonWrapper jsonWrapper) throws ModException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int index \u003d arg(\"index\", Integer.class) - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        switch (arg(\"toRemove\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case \"cca\": {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (ccas.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModEmptyListException(\"ccas\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (index \u003c 0 || index \u003e\u003d ccas.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModOutOfBoundException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                Cca delCca \u003d ccas.get(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                plannerUi.deleteMsg(delCca);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                ccas.remove(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case \"module\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (index \u003c 0 || index \u003e\u003d tasks.getSize() || tasks.getTasks().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModEmptyListException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                ModuleTask delMod \u003d tasks.getTasks().get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                plannerUi.deleteMsg(delMod);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                tasks.delete(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                jsonWrapper.storeTaskListAsJson(tasks.getTasks(), store);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 60
    }
  },
  {
    "path": "src/main/java/planner/logic/command/SearchThenAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModCcaScheduleException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModClashesException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class SearchThenAddCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public SearchThenAddCommand(Arguments args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        ModuleTasksList tasks,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        CcaList ccas,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        JsonWrapper jsonWrapper) throws ModException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        switch (arg(\"toAdd\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case (\"cca\"): {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                Cca cca \u003d new Cca(arg(\"name\"), arg(\"begin\"), arg(\"end\"), arg(\"dayOfWeek\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (ccas.clashes(cca)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModCcaScheduleException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                ccas.add(cca);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                plannerUi.addedMsg(cca);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case (\"module\"):"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                String moduleCode \u003d arg(\"moduleCode\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                String upperModuleCode \u003d moduleCode.toUpperCase().trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (detailedMap.containsKey(upperModuleCode)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    ModuleInfoDetailed mod \u003d detailedMap.get(upperModuleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    ModuleTask temp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    if (arg(\"begin\") !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        temp \u003d new ModuleTask(upperModuleCode, mod, arg(\"begin\"), arg(\"end\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                                arg(\"dayOfWeek\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        temp \u003d new ModuleTask(upperModuleCode, mod);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    HashSet\u003cModuleTask\u003e checkSet \u003d tasks.getSetModuleTask();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    if (checkSet.contains(temp)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        throw new ModClashesException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    tasks.getTasks().add(temp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    plannerUi.addedMsg(temp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    jsonWrapper.storeTaskListAsJson(tasks.getTasks(), store);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 72
    }
  },
  {
    "path": "src/main/java/planner/logic/command/ShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "//@@author kyawtsan99"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class ShowCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static Set\u003cString\u003e coreModList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public ShowCommand(Arguments args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private Set\u003cString\u003e getCoreModList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        if (coreModList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            setCoreMods(coreModList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        return coreModList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Function to return a string set containing all core module codes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * @param coreModList takes in a set of string and populates it with CEG core module codes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public static void setCoreMods(Set\u003cString\u003e coreModList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG1111\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG1112\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CS1010\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CS1231\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"MA1511\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"MA1512\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"M1508E\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG2023\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG2027\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG2028\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG2271\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CS2040C\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CS2101\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"EE2026\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"EG2401A\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"ST2334\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG3207\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CP3380\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"EG3611A\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG4002\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"EE4204\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        ModuleTasksList tasks,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        CcaList ccas,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        JsonWrapper jsonWrapper) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        switch (arg(\"toShow\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case \"cca\": {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.listCcaMsg();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                for (Cca cca : ccas) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    plannerUi.println(count++ + \". \" + cca);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"core\"): {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.coreModReport();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                Set\u003cString\u003e coreModList \u003d getCoreModList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    String moduleCode \u003d tasks.getTasks().get(i).getModuleCode();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    if (coreModList.contains(moduleCode)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        ModuleTask temp \u003d tasks.getTasks().get(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        System.out.println(count++ + \". \" + temp);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.coreModLeft();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int numOfCoreMods \u003d 22;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                System.out.println(numOfCoreMods - count);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"ge\"): {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.geModReport();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    String moduleCode \u003d tasks.getTasks().get(i).getModuleInfoDetailed().getModuleCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    if (moduleCode.startsWith(\"GE\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        ModuleTask temp \u003d tasks.getTasks().get(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        System.out.println(count++ + \". \" + temp);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.geModLeft();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int numOfGeMods \u003d 5;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                System.out.println(numOfGeMods - count);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"ue\"): {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.ueModReport();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                Set\u003cString\u003e coreModList \u003d getCoreModList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    String moduleCode \u003d tasks.getTasks().get(i).getModuleInfoDetailed().getModuleCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    if ((!coreModList.contains(moduleCode)) \u0026\u0026 !moduleCode.startsWith(\"GE\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        ModuleTask temp \u003d tasks.getTasks().get(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        System.out.println(count++ + \". \" + temp);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.ueModLeft();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int numOfUeMods \u003d 8;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                System.out.println(numOfUeMods - count);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case \"module\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.listMsg();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                List\u003cModuleTask\u003e hold \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                for (ModuleTask temp : hold) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    System.out.print(count++ + \". \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    plannerUi.showObject(temp);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 142
    }
  },
  {
    "path": "src/main/java/planner/logic/command/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "//@@author e0313687"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class SortCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public SortCommand(Arguments args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private List\u003cTaskWithMultipleWeeklyPeriod\u003e filter(List\u003cTaskWithMultipleWeeklyPeriod\u003e all, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        List\u003cTaskWithMultipleWeeklyPeriod\u003e filtered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        for (TaskWithMultipleWeeklyPeriod task : all) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            if (task.happensOnThisDayOfWeek(dayOfWeek)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                filtered.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return filtered;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        ModuleTasksList tasks,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        CcaList ccas,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        JsonWrapper jsonWrapper) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String toSort \u003d arg(\"toSort\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        plannerUi.sortMsg(toSort);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        switch (toSort) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case (\"ccas\"): {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                CcaList hold \u003d ccas;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                hold.sort(Comparator.comparing((Object t) -\u003e ((Cca) t).getTask()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                plannerUi.showSorted(hold);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case (\"times\"):"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                List\u003cTaskWithMultipleWeeklyPeriod\u003e holdForTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                DayOfWeek dayOfWeek \u003d DayOfWeek.valueOf(arg(\"DayOfTheWeek\").toUpperCase());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                for (Cca t : ccas) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    if (t.happensOnThisDayOfWeek(dayOfWeek)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        holdForTime.add(t);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                for (ModuleTask t : tasks.getTasks()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    if (t.happensOnThisDayOfWeek(dayOfWeek)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        holdForTime.add(t);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                holdForTime.sort(Comparator.comparing((Object t) -\u003e ((TaskWithMultipleWeeklyPeriod) t)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        .getTimePeriodOfTheDay(dayOfWeek).get(0).getBegin()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                plannerUi.showSortedTimes(holdForTime, dayOfWeek);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case (\"modules\"):"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                List\u003cModuleTask\u003e taskList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                switch (arg(\"type\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    case (\"level\"): {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        taskList.sort(Comparator.comparing((Object t) -\u003e ((ModuleTask) t).getModuleLevel()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    case (\"grade\"): {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        taskList.sort(Comparator.comparing((Object t) -\u003e ((ModuleTask) t).getGradeAsNumbers()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    case (\"mc\"): {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        taskList.sort(Comparator.comparing((Object t) -\u003e ((ModuleTask) t).getModuleCredit()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    case (\"code\"):"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    default: {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        taskList.sort(Comparator.comparing((Object t) -\u003e ((ModuleTask) t).getModuleCode()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                plannerUi.showSorted(taskList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 96
    }
  },
  {
    "path": "src/main/java/planner/logic/command/UpdateModuleInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class UpdateModuleInfo extends ModuleCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public UpdateModuleInfo(Arguments args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ModuleTasksList tasks,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            CcaList ccas,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerUi plannerUi,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Storage store,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            JsonWrapper jsonWrapper) throws ModException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String year \u003d arg(\"academicYear\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        jsonWrapper.runRequests(year, store);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        detailedMap.putAll(jsonWrapper.getModuleDetailedMap());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        tasks.setTasks(jsonWrapper.readJsonTaskList(store));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        plannerUi.showUpdatedMsg();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 35
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModCcaScheduleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ModCcaScheduleException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return super.getMessage() + \"This CCA clashes with existing CCAs!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 9
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModCommandException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Must be a valid command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModEmptyCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModEmptyCommandException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Command cannot be empty!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModEmptyListException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModEmptyListException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModEmptyListException(String type) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModEmptyListException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(\"task\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return super.getMessage() + \"There are no \" + this.type + \" in the list!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 12,
      "namiwa": 7
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ModException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModException(Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    protected ModException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message, cause, enableSuppression, writableStackTrace);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Over-writing the exception class GetMessage method,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * so that other sub-classes would have this message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Starting portion indicating a ModException."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"Error: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 19,
      "namiwa": 15
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModInvalidIndexException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModInvalidIndexException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Invalid Index!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModInvalidTimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModInvalidTimeException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Invalid time and date format!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModInvalidTimePeriodException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModInvalidTimePeriodException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModInvalidTimePeriodException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Invalid time period! \" + this.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModMissingArgumentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModMissingArgumentException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModMissingArgumentException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return super.getMessage() + \"Missing \" + this.getMessage();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 9,
      "namiwa": 4
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModMultipleValuesForSameArgumentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModMultipleValuesForSameArgumentException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Cannot set multiple values for same argument!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModNoTimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModNoTimeException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Cannot set time for this task!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModOutOfBoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ModOutOfBoundException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return super.getMessage() + \"Index out of bound, try something else!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 9
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModScheduleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModScheduleException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"This task clashes with existing tasks!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModTimeIntervalTooCloseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModTimeIntervalTooCloseException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"That time interval is too close!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 8
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModBadGradeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class ModBadGradeException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return super.getMessage() + \"Please enter a valid letter grade!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 3,
      "andrewleow97": 8
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModBadRequestStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModBadRequestStatus extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"Bad Status Connection!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "namiwa": 10
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModBadSuException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class ModBadSuException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return super.getMessage() + \"S/U option is not allowed for this module!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 3,
      "andrewleow97": 8
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModClashesException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModClashesException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"This module has already been added!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "namiwa": 9
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModFailedJsonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModFailedJsonException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"Failed to parse data file!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "namiwa": 9
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModNotFoundException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"Module not found :(\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "namiwa": 9
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/cca/Cca.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.cca;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.datetime.NattyWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodWeekly;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Cca extends TaskWithMultipleWeeklyPeriod {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for Cca module."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param task description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param beginString begin time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param endString end time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek day of week when the cca takes place"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimeException when input time is invalid"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Cca(String task, String beginString, String endString, String dayOfWeek) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task, DayOfWeek.valueOf(dayOfWeek.toUpperCase()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        NattyWrapper natty \u003d new NattyWrapper();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime begin \u003d natty.dateToLocalDateTime(beginString).toLocalTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime end \u003d natty.dateToLocalDateTime(endString).toLocalTime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.setPeriod(0, begin, end);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ModInvalidIndexException ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        StringBuilder prefix \u003d new StringBuilder(\"C|\" + super.writingFile());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[HH:mm]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (TimePeriodWeekly period: this.getPeriods()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            prefix.append(\"|\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(period.getBeginTime().format(formatter))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(\"~\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(period.getEndTime()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            .format(formatter)).append(\"~\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(period.getDayOfWeek());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return prefix.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        StringBuilder prefix \u003d new StringBuilder(\"[C]\" + super.toString() + \" | \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[HH:mm]\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (TimePeriodWeekly period: this.getPeriods()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            prefix.append(period.getBeginTime().format(formatter))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(\" - \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(period.getEndTime()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            .format(formatter)).append(\" on \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(period.getDayOfWeek())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(\", \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return prefix.toString().substring(0, prefix.length() - 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String type() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"cca\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 75
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/cca/CcaList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.cca;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class CcaList extends ArrayList\u003cCca\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CcaList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CcaList(int initialCapacity) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(initialCapacity);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CcaList(Collection\u003c? extends Cca\u003e c) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(c);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Returns list of ccas which have the search"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * keyword included in their name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param keyword Parsed keyword of the cca to be searched."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return Returns the cca list where each cca contains the search keyword."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cCca\u003e find(String keyword) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        List\u003cCca\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String[] keywordSplit \u003d keyword.trim().split(\" +\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Set\u003cString\u003e ccaNameSplit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean match;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (Cca cca : this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            match \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ccaNameSplit \u003d new HashSet\u003c\u003e(Arrays.asList(cca.getTask().trim().split(\" +\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (String keywordPart: keywordSplit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (!ccaNameSplit.contains(keywordPart)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    match \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (match) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                results.add(cca);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set cca list to some other list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param ccas new cca list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void set(Collection\u003c? extends Cca\u003e ccas) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addAll(ccas);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check whether given cca clashes with current ccas."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param cca given cca"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashes else false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean clashes(Cca cca) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (Cca currentCca: this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (cca.isClashing(currentCca)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 75
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * task is the string value of the task name."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * done is the active status of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * dateTime is the date and time information if the task requires."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Boolean done;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor to Task class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task User\u0027s input of the desired task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTaskDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Function to be used to when writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Returns a string containing task name and done status."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + (isDone() ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String completed \u003d (done) ? \"[✓] \" : \"[✗] \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return completed + task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherTask.getTask().equals(this.getTask());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(task, done);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return this.done;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String type() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"task\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 7,
      "namiwa": 7,
      "e0313687": 4,
      "-": 58
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithInterval.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskWithInterval extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimeInterval interval;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithInterval(String task, Period period, Duration duration) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval \u003d new TimeInterval(period, duration);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithInterval(String task, LocalDateTime begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval \u003d new TimeInterval(begin, end);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithInterval(String task, TimeInterval interval) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval \u003d interval;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithInterval(String task, Period period) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval \u003d new TimeInterval(period);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithInterval(String task, Duration duration) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval \u003d new TimeInterval(duration);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithInterval(String task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval \u003d new TimeInterval();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval getInterval() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.interval;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(LocalDateTime begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval.setInterval(begin, end);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(Period period, Duration duration) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval.setInterval(period, duration);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(TimeInterval interval) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval.setInterval(interval);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Parse String inputs to TimeInterval object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param days input days"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param hours input hours"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param minutes input minutes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param seconds input seconds"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return equivalent TimeInterval object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimeException when input value is invalid"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    static TimeInterval parseInterval(String days, String hours, String minutes, String seconds)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        TimeInterval interval \u003d new TimeInterval();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (days !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                interval \u003d interval.plus(TimeInterval.ofDays(Integer.parseInt(days)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (hours !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                interval \u003d interval.plus(TimeInterval.ofHours(Integer.parseInt(hours)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (minutes !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                interval \u003d interval.plus(TimeInterval.ofMinutes(Integer.parseInt(minutes)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (seconds !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                interval \u003d interval.plus(TimeInterval.ofSeconds(Integer.parseInt(seconds)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return interval;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 91
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithMultiplePeriods.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriod;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public abstract class TaskWithMultiplePeriods\u003cE extends TimePeriod\u003e extends Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    List\u003cE\u003e periods;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultiplePeriods(String task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval getInterval(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.getPeriod(index));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getBeginTime(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod(index).getBeginTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getEndTime(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod(index).getEndTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal getBegin(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod(index).getBegin();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal getEnd(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod(index).getEnd();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public E getPeriod(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.checkIndex(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriods().get(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set period for a task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param index task index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param period new period"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidIndexException when input index is invalid"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(int index, E period) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.getPeriods().set(index, period);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModInvalidIndexException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    void checkIndex(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d this.getPeriods().size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModInvalidIndexException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cE\u003e getPeriods() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.periods;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriods(List\u003cE\u003e periods) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.periods \u003d periods;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get all days of week on which this task takes place."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return a list of days of week on which this task takes place"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cDayOfWeek\u003e getDaysOfWeek() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Set\u003cDayOfWeek\u003e result \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.getPeriods() !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (E timePeriod: this.getPeriods()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                result.addAll(timePeriod.getDaysOfWeek());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new ArrayList\u003c\u003e(result);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cT extends TaskWithPeriod\u003e boolean isClashing(T other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(other.getPeriod());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check for clashing with given TimePeriod."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param other given TimePeriod"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashing else false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cT extends TimePeriod\u003e boolean isClashing(T other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (E timePeriod: this.getPeriods()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (timePeriod.isClashing(other)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check for clashing with given List of TimePeriod."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param other given List of TimePeriod"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashing else false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(List\u003c? extends TimePeriod\u003e other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (E timePeriod: this.getPeriods()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (TimePeriod otherTimePeriod: other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (timePeriod.isClashing(otherTimePeriod)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cT extends TaskWithMultiplePeriods\u003e boolean isClashing(T other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(other.getPeriods());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check for clashing with given TemporalAccessor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param other given TemporalAccessor"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashing else false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cT extends TemporalAccessor\u003e boolean isClashing(T other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (E timePeriod: this.getPeriods()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (timePeriod.isClashing(other)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check for clashing with time between two given TemporalAccessors."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin begin of the duration"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end begin of the duration"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashing else false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cT extends TemporalAccessor\u003e boolean isClashing(T begin, T end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (E timePeriod: this.getPeriods()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (timePeriod.isClashing(begin, end)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    void initPeriodList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.periods \u003d\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.periods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Add a period."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param timePeriod new period"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void addPeriod(E timePeriod) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.initPeriodList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.getPeriods().add(timePeriod);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal getTime(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (this.getBegin(index) !\u003d null) ? this.getBegin(index) : this.getEnd(index);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 179
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithMultipleWeeklyPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodWeekly;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskWithMultipleWeeklyPeriod extends TaskWithMultiplePeriods\u003cTimePeriodWeekly\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod(String task, LocalTime begin, LocalTime end, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(begin, end, dayOfWeek);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod(String task, LocalTime begin, TimeInterval duration, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(begin, duration, dayOfWeek);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod(String task, TimePeriodWeekly period) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(period);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod(String task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod(String task, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(dayOfWeek);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod(String task, List\u003cTimePeriodWeekly\u003e periods) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriods(periods);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void addPeriod(LocalTime begin, LocalTime end, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(new TimePeriodWeekly(begin, end, dayOfWeek));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void addPeriod(LocalTime begin, TimeInterval duration, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(new TimePeriodWeekly(begin, duration, dayOfWeek));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void addPeriod(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(new TimePeriodWeekly(dayOfWeek));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void removePeriod(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.periods.remove(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(int index, LocalTime begin, LocalTime end) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.getPeriod(index).setPeriod(begin, end);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(int index, LocalTime begin, TimeInterval duration) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.getPeriod(index).setPeriod(begin, duration);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setBegin(int index, LocalTime begin) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(index, begin, (LocalTime) this.getEnd(index));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setEnd(int index, LocalTime end) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(index, (LocalTime) this.getBegin(index), end);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setDayOfWeek(int index, DayOfWeek dayOfWeek) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.getPeriod(index).setDayOfWeek(dayOfWeek);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DayOfWeek getDayOfWeek(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod(index).getDayOfWeek();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    //@@author e0313687"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public boolean happensOnThisDayOfWeek(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return this.getDaysOfWeek().contains(dayOfWeek);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Returns a sorted list of this task\u0027s time period of the given day."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param dayOfWeek The day of the week"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return a sorted list of this task\u0027s time period of the given day"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public List\u003cTimePeriodWeekly\u003e getTimePeriodOfTheDay(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        List\u003cTimePeriodWeekly\u003e timePeriods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        List\u003cTimePeriodWeekly\u003e list \u003d this.getPeriods();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        for (TimePeriodWeekly item : list) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            //loop through all the periods, see which period falls under that day"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            if (dayOfWeek.equals(item.getDayOfWeek())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                timePeriods.add(item);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        timePeriods.sort(Comparator.comparing(TimePeriodWeekly::getBegin));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        //with the current infrastructure I can only loop through, advise to write a helper function"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return timePeriods;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Returns a string describing task on the give dayOfWeek."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String onWeekDayToString(DayOfWeek day) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        List\u003cTimePeriodWeekly\u003e list \u003d this.getTimePeriodOfTheDay(day);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 85,
      "e0313687": 33
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public abstract class TaskWithPeriod extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithPeriod(String task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval getInterval() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.getPeriod());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getBeginTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().getBeginTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().getEndTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal getBegin() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().getBegin();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal getEnd() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().getEnd();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public abstract TimePeriod getPeriod();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cDayOfWeek\u003e getDaysOfWeek() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().getDaysOfWeek();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cT extends TemporalAccessor\u003e boolean isClashing(T other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().isClashing(other);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE extends TaskWithPeriod\u003e boolean isClashing(E other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(other.getPeriod());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE extends TimePeriod\u003e boolean isClashing(E other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().isClashing(other);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 56
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithSpanningPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodSpanning;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskWithSpanningPeriod extends TaskWithPeriod {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimePeriodSpanning period;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithSpanningPeriod(String task, LocalDateTime begin, LocalDateTime end)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriodSpanning(begin, end);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithSpanningPeriod(String task, LocalDateTime begin, TimeInterval duration)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriodSpanning(begin, duration);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithSpanningPeriod(String task, TimePeriodSpanning period) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithSpanningPeriod(String task) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriodSpanning();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(begin, end);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalDateTime begin, TimeInterval duration) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(begin, duration);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setBegin(LocalDateTime begin) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, (LocalDateTime) this.getEnd());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setEnd(LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod((LocalDateTime) this.getBegin(), end);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (LocalDateTime) ((this.getBegin() !\u003d null) ? this.getBegin() : this.getEnd());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDate getBeginDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ((LocalDateTime) this.getBegin()).toLocalDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ((LocalDateTime) this.getEnd()).toLocalDate();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning getPeriod() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.isClashing(localDateTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.isClashing(begin, end);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 77
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithWeeklyPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodWeekly;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskWithWeeklyPeriod extends TaskWithPeriod {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimePeriodWeekly period;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithWeeklyPeriod(String task, LocalTime begin, LocalTime end, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriodWeekly(begin, end, dayOfWeek);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithWeeklyPeriod(String task, LocalTime begin, TimeInterval duration, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriodWeekly(begin, duration, dayOfWeek);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithWeeklyPeriod(String task, TimePeriodWeekly period) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithWeeklyPeriod(String task, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriodWeekly(dayOfWeek);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalTime begin, LocalTime end) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(begin, end);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalTime begin, TimeInterval duration) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(begin, duration);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setBegin(LocalTime begin) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, (LocalTime) this.getEnd());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setEnd(LocalTime end) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod((LocalTime) this.getBegin(), end);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setDayOfWeek(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setDayOfWeek(dayOfWeek);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (LocalTime) ((this.getBegin() !\u003d null) ? this.getBegin() : this.getEnd());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.getDayOfWeek();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodWeekly getPeriod() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.isClashing(localTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime begin, LocalTime end) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.isClashing(begin, end);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 75
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithoutTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskWithoutTime extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithoutTime(String task) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 10
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/module/Attributes.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class Attributes {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean su \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean sfs \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean ssgf \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean fyp \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean year \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean coreMod \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean geMod \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean ueMod \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Attributes() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean isSu() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return su;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean isFyp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return fyp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"SU: \" + ((su) ? \"True\" : \"False\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 32
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/module/ExamInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ExamInfo {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private int semester \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String examDate \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private int examDuration \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public int getSemester() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getExamDate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return examDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public int getExamDuration() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return examDuration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"{Semester:\" + getSemester() + \", \" + getExamDate() + \" ,\" + getExamDuration() + \"}\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 27
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/module/ModuleInfoDetailed.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModBadGradeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModBadSuException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModuleInfoDetailed {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String title \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String description \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String moduleCredit \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String department \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String faculty \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String preclusion \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String prerequisites \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Attributes attributes \u003d new Attributes();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String grade \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ExamInfo[] semesterData \u003d new ExamInfo[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ArrayList\u003cString\u003e validGrades \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"A+\", \"A\", \"A-\", \"B+\", \"B\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        \"B-\", \"C+\", \"C\", \"D+\", \"D\", \"F\", \"S\", \"U\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Double getModuleCredit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return Double.parseDouble(moduleCredit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getModuleLevel() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return moduleCode.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getFaculty() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getPreclusion() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return preclusion;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getPrerequisites() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return  prerequisites;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Attributes getAttributes() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return attributes;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ExamInfo[] getSemesterData() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return semesterData;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    //@@author andrewleow97"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Checks if module is S/U-able, and assigns grade based on String score."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void setGrade(String score) throws ModBadGradeException, ModBadSuException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (!validGrades.contains(score)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new ModBadGradeException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (score.equalsIgnoreCase(\"S\") || score.equalsIgnoreCase(\"U\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (this.attributes.isSu()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                this.grade \u003d score;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new ModBadSuException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.grade \u003d score;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return \"ModuleCode:\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + getModuleCode()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + \", MC:\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + getModuleCredit()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + \", SU:\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + getAttributes().isSu()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + \", grade:\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + getGrade();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 31,
      "namiwa": 75
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/module/ModuleInfoSummary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModuleInfoSummary {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String title \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private int[] semesters \u003d {0};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean suOption \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public int[] getSemesters() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return semesters;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setSemesters(int[] semesters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.semesters \u003d semesters;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setSuOption(boolean suOption) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.suOption \u003d suOption;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean getSuOption() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return this.suOption;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"[moduleCode: \" + moduleCode + \", title:\" + title + \", semesters:\" + Arrays.toString(semesters) + \"]\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 15,
      "namiwa": 44
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/module/ModuleTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.planner.ModBadGradeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.planner.ModBadSuException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.datetime.NattyWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.legacy.periods.TimePeriodWeekly;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class ModuleTask extends TaskWithMultipleWeeklyPeriod {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModuleInfoDetailed moduleInfoDetailed;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModuleTask(String code, ModuleInfoDetailed moduleInfoDetailed) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        super(code);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.moduleInfoDetailed \u003d moduleInfoDetailed;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Constructor for ModuleTask when users wants to input the time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param code The Module Code"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param moduleInfoDetailed The detailed information of the module"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param beginString begin time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param endString end time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param dayOfWeek day of the week when the module takes place"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @throws ModInvalidTimeException when input time is invalid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public ModuleTask(String code, ModuleInfoDetailed moduleInfoDetailed,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                      String beginString, String endString, String dayOfWeek) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super(code, DayOfWeek.valueOf(dayOfWeek.toUpperCase()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.moduleInfoDetailed \u003d moduleInfoDetailed;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        NattyWrapper natty \u003d new NattyWrapper();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        LocalTime begin \u003d natty.dateToLocalDateTime(beginString).toLocalTime();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        LocalTime end \u003d natty.dateToLocalDateTime(endString).toLocalTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            this.setPeriod(0, begin, end);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (ModInvalidIndexException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return moduleInfoDetailed.getModuleCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Double getModuleCredit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return moduleInfoDetailed.getModuleCredit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String getModuleLevel() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return moduleInfoDetailed.getModuleLevel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModuleInfoDetailed getModuleInfoDetailed() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return moduleInfoDetailed;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return moduleInfoDetailed.getGrade();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void setGrade(String letterGrade) throws ModBadSuException, ModBadGradeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        moduleInfoDetailed.setGrade(letterGrade);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Returns the grades as a number for sorting."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return the number allocated for the grade."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public int getGradeAsNumbers() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        switch (moduleInfoDetailed.getGrade()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"A+\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"A\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"A-\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 2;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"B+\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 3;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"B\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 4;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"B-\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 5;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"C+\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 6;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"C\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 7;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"D+\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 8;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 9;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"F\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 10;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"S\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 11;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"U\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 12;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 20;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        StringBuilder prefix \u003d new StringBuilder(super.toString() + \" | \" + moduleInfoDetailed.toString() + \" | \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[HH:mm]\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        if (this.getPeriods() !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            for (TimePeriodWeekly period: this.getPeriods()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                prefix.append(period.getBeginTime().format(formatter))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        .append(\" - \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        .append(period.getEndTime()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                                .format(formatter)).append(\" on \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        .append(period.getDayOfWeek())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        .append(\", \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return prefix.toString().substring(0, prefix.length() - 2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String type() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"module\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 8,
      "andrewleow97": 8,
      "namiwa": 19,
      "e0313687": 93
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/module/ModuleTasksList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModuleTasksList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Task list where active tasks are stored."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private List\u003cModuleTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for TaskList class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModuleTasksList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Returns list of tasks which have the search"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * keyword included in their task name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input Parsed keyword of the task name to be searched."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Returns the taskList where each task contains the search keyword."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public List\u003cModuleTask\u003e find(String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cModuleTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (ModuleTask hold : tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (hold.getTask().contains(input)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                temp.add(hold);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Returns all modules added to the moduleTaskList as a set."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HashSet of ModuleTask."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HashSet\u003cModuleTask\u003e getSetModuleTask() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return new HashSet\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setTasks(List\u003cModuleTask\u003e tasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public List\u003cModuleTask\u003e getTasks() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void clearAll() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 3,
      "namiwa": 63
    }
  },
  {
    "path": "src/main/java/planner/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.ArgumentParsers;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentAction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.Namespace;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.Subparser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.Subparsers;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.GradeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.AddCcaScheduleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.Arguments;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.CapCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.EndCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.ModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.RemoveCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.SearchThenAddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.ShowCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.SortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.UpdateModuleInfo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.command.ReminderCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.parser.action.Join;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.logger.PlannerLogger;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ArgumentParser parser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Subparsers subParserManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private HashMap\u003cString, Subparser\u003e subParsers;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private HashMap\u003cString, Class\u003c? extends ModuleCommand\u003e\u003e commandMapper;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ArgumentAction joinString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for parser."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.parser \u003d ArgumentParsers.newFor(\"ModPlanner\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .build()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .defaultHelp(true)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .description(\"ModPlanner Argument Parser\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .version(\"1.0\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.init();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Map CLI commands to respective ModuleCommand classes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    // Add new command types here"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void mapBuiltinCommands() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"add\", SearchThenAddCommand.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"show\", ShowCommand.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"bye\", EndCommand.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"remove\", RemoveCommand.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"scheduleCca\", AddCcaScheduleCommand.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"clear\", ClearCommand.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"sort\", SortCommand.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"cap\", CapCommand.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"grade\", GradeCommand.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"update\", UpdateModuleInfo.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        mapCommand(\"reminder\", ReminderCommand.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Add arguments for respective sub-parsers."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    // Add arguments for parsers here"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void mapBuiltinParserArguments() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Subparsers addParsers \u003d getSubParser(\"add\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Add a module or cca\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .addSubparsers()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .dest(\"toAdd\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"add command options\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        Subparser addParser \u003d addParsers.addParser(\"module\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Add a module\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        addParser.addArgument(\"moduleCode\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Codename of module to add\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        addParser.addArgument(\"--begin\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                //.required(true)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Begin time\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        addParser.addArgument(\"--end\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                //.required(true)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"End time\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        addParser.addArgument(\"--dayOfWeek\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                //.required(true)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Day of week on which the module takes place\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Subparser addCcaParser \u003d addParsers.addParser(\"cca\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Add a cca\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        addCcaParser.addArgument(\"name\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Name of cca\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        addCcaParser.addArgument(\"--begin\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .required(true)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Begin time\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        addCcaParser.addArgument(\"--end\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .required(true)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"End time\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        addCcaParser.addArgument(\"--dayOfWeek\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .required(true)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Day of week on which cca takes place\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        getSubParser(\"show\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .help(\"Show infos about your timetable\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .addArgument(\"toShow\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .choices(\"module\", \"core\", \"ge\", \"ue\", \"cca\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"What to show\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        getSubParser(\"bye\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .help(\"Exit ModPlanner\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Subparser removeParser \u003d getSubParser(\"remove\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .help(\"Remove a module or cca\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        removeParser.addArgument(\"toRemove\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .choices(\"module\", \"cca\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"What to remove\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        removeParser.addArgument(\"index\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .type(int.class)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Index to remove\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Subparser scheduleCcaParser \u003d getSubParser(\"scheduleCca\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Add schedule to a CCA\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        scheduleCcaParser.addArgument(\"index\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .type(Integer.class)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Index of cca to schedule\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        scheduleCcaParser.addArgument(\"--begin\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .required(true)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Begin time\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        scheduleCcaParser.addArgument(\"--end\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .required(true)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"End time\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        scheduleCcaParser.addArgument(\"--dayOfWeek\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .required(true)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Day of week on which cca takes place\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        getSubParser(\"clear\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Clear your data as specified\")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .addArgument(\"toClear\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .choices(\"modules\", \"ccas\", \"data\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"What to clear\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Subparsers sortParsers \u003d getSubParser(\"sort\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Sort your modules in alphabet order\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .addSubparsers()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .dest(\"toSort\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"What to sort\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        sortParsers.addParser(\"modules\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Sort your modules\")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .addArgument(\"type\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .choices(\"code\", \"grade\", \"level\", \"mc\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"What to use for sorting\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        sortParsers.addParser(\"ccas\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Sort your CCAs\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        sortParsers.addParser(\"times\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Sort your modules and ccas to days of the week\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .addArgument(\"DayOfTheWeek\")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .choices(\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\",\"sunday\")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Day of the week\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        getSubParser(\"cap\")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Calculate your CAP\")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .addArgument(\"toCap\")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                .choices(\"overall\", \"list\", \"module\")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                .help(\"What type of CAP to calculate\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Subparser gradeParser \u003d getSubParser(\"grade\")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Enter your grades and let me calculate your GPA for you!\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        gradeParser.addArgument(\"moduleCode\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            .help(\"Codename of module to grade\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        gradeParser.addArgument(\"letterGrade\")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            .help(\"Grade you achieved for this module\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        getSubParser(\"update\")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Update modules database\")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .addArgument(\"academicYear\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .help(\"Academic year of your choice, in format 2018-2019\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        getSubParser(\"reminder\")"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                .help(\"Setting reminders\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                .addArgument(\"toReminder\")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                .help(\"When do you want to set the reminder again\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void initBuiltinActions() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.joinString \u003d new Join();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Initialize sub-parsers and command mappers."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.subParserManager \u003d this.parser.addSubparsers();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.subParsers \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.commandMapper \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.initBuiltinActions();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.mapBuiltinCommands();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.initBuiltinParsers();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.mapBuiltinParserArguments();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Map CLI commands to sub-parsers."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void initBuiltinParsers() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (String command: this.commandMapper.keySet()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.addParser(command);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void mapCommand(String command, Class\u003c? extends ModuleCommand\u003e type) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.commandMapper.put(command, type);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Add a custom sub-parser."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param name name of sub-parser"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param addHelp add help or not"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param prefixChars prefix character to distinguish arguments"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return added sub-parser"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Subparser addParser(String name, boolean addHelp, String prefixChars) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.subParsers.put(name,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                this.subParserManager"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .addParser(name, addHelp, prefixChars)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .setDefault(\"command\", name));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getSubParser(name);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Subparser addParser(String name, boolean addHelp) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.addParser(name, addHelp, \"--\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Subparser addParser(String name) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.addParser(name, true);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ArgumentParser getParser() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.parser;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Subparser getSubParser(String subParserName) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.subParsers.get(subParserName);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Parse input."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param args input \"words\""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return parsed Namespace if input is valid else null"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Namespace parse(String[] args) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.getParser().parseArgs(args);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ArgumentParserException ex) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.handleError(ex);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ex);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Namespace parse(String userInput) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.parse(userInput.split(\" +\"));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Parse input using a sub-parser."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param args input \"words\""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return parsed Namespace if input is valid else null"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Namespace parse(String subParserName, String[] args) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.getSubParser(subParserName).parseArgs(args);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ArgumentParserException ex) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.handleError(subParserName, ex);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ex);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Namespace parse(String subParserName, String userInput) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.parse(subParserName, userInput.split(\" +\"));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void handleError(ArgumentParserException ex) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.parser.handleError(ex);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void handleError(String subParserName, ArgumentParserException ex) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.getSubParser(subParserName).handleError(ex);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Invoke a module command."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param commandClass command class to invoke"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param argumentsClasses corresponding classes of arguments"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param objects corresponding arguments"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return ModuleCommand if input is valid else null"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ModuleCommand invokeCommand(Class\u003c? extends ModuleCommand\u003e commandClass,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                        Class[] argumentsClasses,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                        Object[] objects) throws ModException {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return commandClass.getConstructor(argumentsClasses).newInstance(objects);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (InvocationTargetException ex) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (ex.getCause() instanceof ModException) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                throw (ModException) ex.getCause();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ex);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (Throwable ex) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ex);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Parse input to ModuleCommand."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param userInput input String"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return parsed ModuleCommand if input is valid else null"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModuleCommand parseCommand(String userInput) throws ModException {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Namespace parsedInput \u003d this.parse(userInput);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (parsedInput !\u003d null) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            String command \u003d parsedInput.get(\"command\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Class\u003c? extends ModuleCommand\u003e commandClass \u003d this.commandMapper.get(command);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (parsedInput.getAttrs().size() \u003e 1) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return this.invokeCommand(commandClass,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                          new Class[]{Arguments.class},"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                          new Arguments[]{new Arguments(parsedInput.getAttrs())});"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return this.invokeCommand(commandClass, null, null);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 284,
      "andrewleow97": 8,
      "namiwa": 33,
      "kyawtsan99": 8,
      "e0313687": 23
    }
  },
  {
    "path": "src/main/java/planner/logic/parser/action/Join.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.parser.action;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.Argument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentAction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Join implements ArgumentAction {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void run(ArgumentParser parser, Argument arg, Map\u003cString, Object\u003e attrs, String flag, Object value) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (value instanceof Iterable) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            attrs.put(arg.getDest(), String.join(\" \", (Iterable) value));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void onAttach(Argument arg) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean consumeArgument() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 28
    }
  },
  {
    "path": "src/main/java/planner/main/CliLauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.CredentialManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.EndCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.ModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModFailedJsonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.cca.CcaList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.logger.PlannerLogger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class CliLauncher {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Classes used for storage of data"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Ui output and inputs and current"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * active tasks in TaskList and reminder."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Storage store;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModuleTasksList modTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private CcaList ccas;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Parser argparser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private JsonWrapper jsonWrapper;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private PlannerUi modUi;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private HashMap\u003cString, ModuleInfoDetailed\u003e modDetailedMap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private CredentialManager credential;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private transient ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for Planner class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public CliLauncher(boolean gui) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store \u003d new Storage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        modUi \u003d new PlannerUi();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        argparser \u003d new Parser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        jsonWrapper \u003d new JsonWrapper();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        modTasks \u003d new ModuleTasksList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ccas \u003d new CcaList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        credential \u003d new CredentialManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (gui) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.redirectOutput();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            //credential.prompt(modUi);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            modUi.helloMsg();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public CliLauncher() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Redirect output for GUI compatibility."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void redirectOutput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        PrintStream printStreamGui \u003d new PrintStream(this.output);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.setOut(printStreamGui);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.setErr(printStreamGui);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Setup data files for module data and logging."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void modSetup() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            modDetailedMap \u003d jsonWrapper.getModuleDetailedMap(true, store);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            modTasks.setTasks(jsonWrapper.readJsonTaskList(store));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.setLogFile(store);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModFailedJsonException ej) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ej.getMessage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ej);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException eio) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            eio.getStackTrace();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(eio);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void modRunArgparse4j() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modUi.helloMsg();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modSetup();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        boolean isExit \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        while (isExit) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            isExit \u003d this.handleInput();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean handleInput() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            String input \u003d modUi.readInput();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ModuleCommand c \u003d argparser.parseCommand(input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (c !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                c.execute(modDetailedMap, modTasks, ccas, modUi, store, jsonWrapper);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (c instanceof EndCommand) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ModException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(e);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            modUi.showLine();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get output from commands."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return command output"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (input !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.output.reset();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            this.handleInput();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.output.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main entry point for Duke."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param args Additional command line parameters, unused."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        //TODO: args flag could be passed into program for optional runs"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        CliLauncher planner \u003d new CliLauncher();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        //planner.credential.prompt(planner.modUi);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        planner.modRunArgparse4j();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 59,
      "namiwa": 80
    }
  },
  {
    "path": "src/main/java/planner/main/GuiLauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.gui.Main;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class GuiLauncher {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 15
    }
  },
  {
    "path": "src/main/java/planner/ui/cli/PlannerUi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.ui.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidIndexException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.legacy.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": " * Mod Planner based on morphed implementation of Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class PlannerUi {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Scanner scan;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static final String LINE \u003d \"_______________________________\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static Set\u003cString\u003e yes \u003d new HashSet\u003c\u003e(Arrays.asList(\"y\",\"yes\", \"true\", \"1\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                                                                 \"confirm\", \"t\", \"yup\", \"yeah\", \"positive\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static Set\u003cString\u003e no \u003d new HashSet\u003c\u003e(Arrays.asList(\"n\", \"no\", \"false\", \"0\", \"f\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                                                                \"nope\", \"nah\", \"negative\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Default constructor for Ui."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public PlannerUi() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void print(Object object) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.print(object.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void println(Object object) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.println(object.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void closeScanner() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        scan.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return scan.nextLine().strip();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String readPassword() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.readInput(); // No good way to do this yet"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Confirm user\u0027s action."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if user confirms else false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean confirm() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (result) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            String input \u003d this.readInput();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (yes.contains(input)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } else if (no.contains(input)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                result \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                this.println(\"Please enter a valid response!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Prompt user for input."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param message message to display to user beforehand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param allowEmpty whether to allow empty input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param secure whether to display user input"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return user input"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String prompt(String message, boolean allowEmpty, boolean secure) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.println(message);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (secure) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            input \u003d this.readPassword();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            input \u003d this.readInput();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (!allowEmpty \u0026\u0026 input.isBlank()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            input \u003d this.invalidResponsePrompt(false, secure);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String prompt(String message) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.prompt(message, false, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int yearPrompt() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.intPrompt(\"Please enter your current year (i.e. 1, 2, ...):\", 1, 2, 3, 4, 5);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int semesterPrompt() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.intPrompt(\"Please enter your current semester (1 or 2):\", 1, 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int intPrompt(String message) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.intPrompt(message, (List\u003cInteger\u003e) null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int intPrompt(String message, Integer... validOptions) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.intPrompt(message, Arrays.asList(validOptions));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Prompt user for integer input."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param message message to display beforehand"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param validOptions valid input numbers"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return input integer"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int intPrompt(String message, List\u003cInteger\u003e validOptions) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String number \u003d this.prompt(message);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                int result \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (validOptions \u003d\u003d null || validOptions.contains(result)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    return result;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } catch (NumberFormatException ignored) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                number \u003d this.invalidResponsePrompt();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String invalidResponsePrompt() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.invalidResponsePrompt(false, false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String invalidResponsePrompt(boolean allowEmpty, boolean secure) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.prompt(\"Invalid response, please try again!\", allowEmpty, secure);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String loginPrompt() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.prompt(\"Please login to continue! Enter \u0027login\u0027 to login\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"\\nNot registered? Just enter \u0027register\u0027 and I will help you setup!\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String userExistPrompt() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.prompt(\"That username is taken, please try something else!\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String noSuchUserPrompt() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.prompt(\"Username not found, please try again!\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearedMsg(String type) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.println(\"Done! Your \" + type + \" have been cleared\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void abortMsg() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.println(\"Aborted! No actions were taken\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Helper function to print any Task object."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param task to be printed."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void showObject(Task task) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        println(task);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Added Message for new task."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void addedMsg(Task task) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(\"Got it, added the follow \" + task.type() + \"!\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        showObject(task);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Delete Message for task."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param task Task to be deleted."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void deleteMsg(Task task) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.println(\"Got it, \" + task.type() + \" will be deleted\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        showObject(task);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void listMsg() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(\"All modules in the list!\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void listCcaMsg() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.println(\"All ccas in the list!\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Start up message upon running mod planner."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void helloMsg() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.print("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"Welcome to ModPlanner, your one stop solution to module planning!\\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + \"Begin typing to get started!\\n\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        );"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Ending message upon termination."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void goodbyeMsg() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.print("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"Thanks for using ModPlanner!\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                 + \"Your data will be stored in file shortly!\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        );"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        closeScanner();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Message shown when clearing list."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearMsg(String toClear) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.println(\"Are you sure you want to clear your \" + toClear + \"?\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Message shown at start of CapCommand."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capStartMsg() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Start typing the module you have taken, along with it\u0027s letter grade\\n\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            + \"Type \u0027done\u0027 when you are ready to calculate your CAP\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Requests input from user for which module to calculate CAP for."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capModStartMsg() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.println(\"Type the module code that you want to predict your CAP for: \");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Prints the module task list with which to calculate CAP from."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capListStartMsg(List\u003cModuleTask\u003e moduleTasksList) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.println(\"Here is your list of modules to calculate CAP from.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (ModuleTask temp : moduleTasksList) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            System.out.print(counter++ + \" \");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            showObject(temp);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * When none of the modules in the ModuleTaskList are graded."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capListErrorMsg() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.println(\"Please input grades into your listed modules using the grade command\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Message to print average CAP to 2 decimal places."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capMsg(double averageCap) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.println(\"Here is your current cumulative/predicted CAP\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.printf(\"%.2f\\n\", averageCap);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Prints predicted CAP for a module based on its prerequisites."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capModMsg(double predictedCap, String moduleCode) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.println(\"Here is your predicted CAP for \" + moduleCode);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.printf(\"%.2f\\n\", predictedCap);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Prints the list of modules that have not been graded/taken for prerequisite of another module."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capModuleIncompleteMsg(List\u003cList\u003cString\u003e\u003e toCalculate) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.println(\"Please complete the following prerequisite modules: \");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        while (i \u003c toCalculate.size()) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (!toCalculate.get(i).isEmpty()) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                for (String x : toCalculate.get(i)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    System.out.print(x + \" or \");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Message to feedback to user that their grading has been added."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void gradedMsg(String moduleCode, String letterGrade) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        System.out.println(\"Got it, graded \" + moduleCode + \" with grade: \" + letterGrade);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Message to print the sorted module list."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void sortMsg(String toSort) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.println(\"Here are your sorted \" + toSort + \":\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Sorts by the order the user indicates and prints to the users."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void showSorted(List\u003c?\u003e list) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (Object object : list) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(object);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Prints activities on the given dayOfWeek."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void showSortedTimes(List\u003cTaskWithMultipleWeeklyPeriod\u003e list, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        for (TaskWithMultipleWeeklyPeriod task : list) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            String taskNameAndPeriods \u003d task.getName() + task.onWeekDayToString(dayOfWeek);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(taskNameAndPeriods);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print out CoreModuleReport."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void coreModReport() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        System.out.println(\"Here is your list of core modules being added:\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print out the number of core modules left to take."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void coreModLeft() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        System.out.println(\"\\n\" + \"Number of core modules required to take for graduation:\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print out GEModuleReport."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void geModReport() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        System.out.println(\"Here is your list of general education modules being added:\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print out the number of ge modules left to take."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void geModLeft() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        System.out.println(\"\\n\" + \"Number of general education modules required to take for graduation:\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print out UEModuleReport."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void ueModReport() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        System.out.println(\"Here is your list of unrestricted elective modules being added:\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print out the number of ue modules left to take."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void ueModLeft() {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        System.out.println(\"\\n\" + \"Number of unrestricted elective modules required to take for graduation:\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Prints all tasks in upcomingTasksList."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param upcomingTasksList contains all upcoming tasks."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void printUpcomingTasks(List\u003cTask\u003e upcomingTasksList) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (upcomingTasksList.size() \u003e 0) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(LINE + \"You have \" + upcomingTasksList.size() + \" upcoming tasks!\\nHere\u0027s the list:\");"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            this.printTaskList(upcomingTasksList);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Prints every item supplied in the taskList parameter."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param taskList to be printed to user."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private \u003cE extends Task\u003e void printTaskList(List\u003cE\u003e taskList) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (Task temp : taskList) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(count + \". \" + temp);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void showUpdatedMsg() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(\"Your module data files has been updated!\");"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print the reminder list."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void reminderMsg() {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        System.out.println(\"Please remember to update your module information!\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print the list of reminder options."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void reminderList() {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        showLine();;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        System.out.println(\"Would you like to off your reminder for\\n\""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            + \"1) for 30 mins\\n\""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            + \"2) for 1 hour\\n\""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            + \"3) for 12 hours\\n\""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            + \"4) for 24 hours\\n\""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            + \"*helpline* : for 1), enter \u0027reminder one\u0027\");"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 147,
      "andrewleow97": 87,
      "namiwa": 110,
      "kyawtsan99": 64,
      "e0313687": 28
    }
  },
  {
    "path": "src/main/java/planner/ui/gui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.ui.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/duke.DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get Duke\u0027s response DialogBox."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param text Duke\u0027s response"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param img Duke\u0027s image"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return DialogBox for Duke\u0027s response"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 70
    }
  },
  {
    "path": "src/main/java/planner/ui/gui/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.ui.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private CliLauncher planner \u003d new CliLauncher(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/duke.MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(this.planner);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            e.getCause().getCause().printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 34
    }
  },
  {
    "path": "src/main/java/planner/ui/gui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.ui.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private CliLauncher planner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Initialize Planner."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param p given planner"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setDuke(CliLauncher p) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.planner \u003d p;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                DialogBox.getDukeDialog(this.planner.getResponse(null), dukeImage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String response \u003d this.planner.getResponse(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 58
    }
  },
  {
    "path": "src/main/java/planner/util/crawler/JsonWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.crawler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModBadRequestStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModFailedJsonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoSummary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.datetime.NattyWrapper;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.logger.PlannerLogger;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class JsonWrapper {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private NattyWrapper natty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private RequestData requestsData;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String listFile \u003d \"data/modsListData.json\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String listDetailedFile \u003d \"data/modsDetailedListData.json\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String userModuleFile \u003d \"data/userData.json\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String academicYear \u003d \"2019-2020\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public enum Requests {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        DETAILED, SUMMARY"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for JsonWrapper to access module information."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public JsonWrapper() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        gson \u003d new Gson();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        natty \u003d new NattyWrapper();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        requestsData \u003d new RequestData();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Date parseStringToDate(String input) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return natty.runParser(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public LocalDateTime parseStringToLocalDateTime(String input) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return natty.dateToLocalDateTime(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private HashMap\u003cString, ModuleInfoDetailed\u003e getMapFromList(List\u003cModuleInfoDetailed\u003e modsList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        HashMap\u003cString, ModuleInfoDetailed\u003e ret \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (ModuleInfoDetailed temp : modsList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String modCode \u003d temp.getModuleCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ret.put(modCode, temp);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * For each data set, request for nusMods API."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void runRequests(Storage store) throws ModBadRequestStatus {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        storeJson(Requests.DETAILED, store);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Updating detailed module list file in data folder."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param academicYear Academic Year input by user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param store Storage object to write files."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModBadRequestStatus If the user\u0027s status return from API call is not 200 (success)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void runRequests(String academicYear, Storage store) throws ModBadRequestStatus {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.setDataPath(Paths.get(listDetailedFile));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (store.getDataPathExists()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        requestsData.storeModData(requestsData.requestModuleListDetailed(academicYear), store);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void storeJson(Requests type, Storage store) throws ModBadRequestStatus {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case SUMMARY: {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                store.setDataPath(Paths.get(listFile));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (store.getDataPathExists()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                requestsData.storeModData(requestsData.requestModuleList(academicYear), store);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case DETAILED: {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                store.setDataPath(Paths.get(listDetailedFile));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (store.getDataPathExists()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                requestsData.storeModData(requestsData.requestModuleListDetailed(academicYear), store);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModBadRequestStatus();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Reads the Json file for to be parsed into a java object. Since the data is"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * presented in a JSON array, our class object class would need to be wrapped"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * in an array as well."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return List of ModuleInfoSummary Objects, null if it fails to parse."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private List\u003cModuleInfoSummary\u003e getModuleListObject() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            JsonReader reader \u003d new JsonReader(new FileReader(listFile));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Type listType \u003d new TypeToken\u003cList\u003cModuleInfoSummary\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return gson.fromJson(reader, listType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IllegalStateException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(e);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException ei) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(Arrays.toString(ei.getStackTrace()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ei);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main helper function to obtained HashMap of summary info from modsListData.json."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HashMap with module code as the key and ModuleInfoSummary object as the value."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModFailedJsonException If the previous call to getModuleListObject() returns null."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HashMap\u003cString, ModuleInfoSummary\u003e getModuleSummaryMap() throws ModFailedJsonException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cModuleInfoSummary\u003e modsList \u003d getModuleListObject();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (modsList \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModFailedJsonException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        HashMap\u003cString, ModuleInfoSummary\u003e ret \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (ModuleInfoSummary temp : modsList) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String modCode \u003d temp.getModuleCode();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ret.put(modCode, temp);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Converts the stored json file into a list of ModuleInfoDetailed objects."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return a list of ModuleInfoDetailed objects, null if it fails to parse."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private List\u003cModuleInfoDetailed\u003e getModuleListDetailedObject() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            JsonReader reader \u003d new JsonReader(new FileReader(listDetailedFile));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Type listType \u003d new TypeToken\u003cList\u003cModuleInfoDetailed\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return gson.fromJson(reader, listType);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IllegalStateException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(e);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException ei) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(Arrays.toString(ei.getStackTrace()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ei);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded function to generate runtime file from resources instead of query file from NUSMODS."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param set Flag to run code."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param store Storage Object for file check."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HashMap of Module code mapped to corresponding ModuleInfoDetailed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModFailedJsonException If the user\u0027s status return from API call is not 200 (success)."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HashMap\u003cString, ModuleInfoDetailed\u003e getModuleDetailedMap(boolean set, Storage store)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throws ModFailedJsonException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (set \u0026\u0026 store.getDataPathExists()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return getModuleDetailedMap();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            InputStream in \u003d this.getClass().getResourceAsStream(\"/data/modsDetailedListData.json\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Type listType \u003d new TypeToken\u003cList\u003cModuleInfoDetailed\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            InputStreamReader inputStreamReader \u003d new InputStreamReader(in, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            List\u003cModuleInfoDetailed\u003e modsList \u003d gson.fromJson(inputStreamReader, listType);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return getMapFromList(modsList);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main helper function to obtained HashMap of detailed info from modsDetailedListData.json."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HashMap with module code as the key and ModuleInfoSummary object as the value."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModFailedJsonException If the previous call to getModuleListObject() returns null."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HashMap\u003cString, ModuleInfoDetailed\u003e getModuleDetailedMap() throws ModFailedJsonException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cModuleInfoDetailed\u003e modsList \u003d getModuleListDetailedObject();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (modsList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModFailedJsonException();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return getMapFromList(modsList);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Stores the current state of the taskList into a json file."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param tasksList List of module tasks."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param store object which handles file storing."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void storeTaskListAsJson(List\u003cModuleTask\u003e tasksList, Storage store) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String jsonString \u003d gson.toJson(tasksList);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cString\u003e stringsList \u003d requestsData.getResponseList(jsonString);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.setDataPath(Paths.get(userModuleFile));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.writeModsData(stringsList);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Returns taskList after reading json file."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return List of tasks of the read was successful, null if otherwise."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public List\u003cModuleTask\u003e readJsonTaskList(Storage store) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            store.setDataPath(Paths.get(userModuleFile));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (store.getDataPathExists()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                JsonReader reader \u003d new JsonReader(new FileReader(userModuleFile));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                Type listType \u003d new TypeToken\u003cList\u003cModuleTask\u003e\u003e() {}.getType();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                return gson.fromJson(reader, listType);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IllegalStateException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(e);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException ei) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(Arrays.toString(ei.getStackTrace()));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ei);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 246
    }
  },
  {
    "path": "src/main/java/planner/util/crawler/RequestData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.crawler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.net.http.HttpClient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.net.http.HttpRequest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.net.http.HttpResponse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModBadRequestStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class RequestData {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public RequestData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Request builder for API call summary module data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param mod Module of interest to be queried."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HttpRequest formatted with the nusMods API call."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HttpRequest requestModule(String mod) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String upperMod \u003d mod.trim().toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return HttpRequest.newBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .uri(URI.create(\"https://api.nusmods.com/v2/2019-2020/modules/\" + upperMod + \".json\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .timeout(Duration.ofSeconds(2))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .header(\"Content-Type\", \"application/json\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Request builder for API call summary module data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param academicYear Academic year of interest"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HttpRequest formatted with the nusMods API call."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HttpRequest requestModuleList(String academicYear) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return HttpRequest.newBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .uri(URI.create(\"https://api.nusmods.com/v2/\" + academicYear + \"/moduleList.json\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .timeout(Duration.ofSeconds(2))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .header(\"Content-Type\", \"application/json\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Request builder for API call detailed module data."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param academicYear Academic year of interest"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HttpRequest formatted with the nusMods API call."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HttpRequest requestModuleListDetailed(String academicYear) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return HttpRequest.newBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .uri(URI.create(\"https://api.nusmods.com/v2/\" + academicYear + \"/moduleInfo.json\"))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .timeout(Duration.ofSeconds(2))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .header(\"Content-Type\", \"application/json\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * HttpRequest with reference from :https://openjdk.java.net/groups/net/httpclient/intro.html."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Using the nusMods V2 API : https://api.nusmods.com/v2/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Stores requests made into *.json files for further processing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void storeModData(HttpRequest request, Storage store) throws ModBadRequestStatus {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // Api calls only work with upper case module code"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        HttpClient client \u003d HttpClient.newHttpClient();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            // Response.body() contains the returned module info as JSON string"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            HttpResponse\u003cString\u003e response \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    client.send(request, HttpResponse.BodyHandlers.ofString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            // If return status is not 200, and error request has been made"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (response.statusCode() !\u003d 200) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModBadRequestStatus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            List\u003cString\u003e responseList \u003d getResponseList(response.body());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            store.writeModsData(responseList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (InterruptedException ie) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(Arrays.toString(ie.getStackTrace()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Formats a string to list of strings based on new line character."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param responseBody String containing response from HttpRequest."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return A list of string, separated by new line characters."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public List\u003cString\u003e getResponseList(String responseBody) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] test \u003d responseBody.split(\"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cString\u003e ret \u003d new ArrayList\u003c\u003e(Collections.emptyList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Collections.addAll(ret, test);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 101
    }
  },
  {
    "path": "src/main/java/planner/util/datetime/NattyWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.datetime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class NattyWrapper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Single instantiation of Natty Parser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * to reduce start up impact."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Parser nattyParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for wrapper class for Natty Library for date parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public NattyWrapper() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        nattyParser \u003d new Parser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        //to speed parsing, introducing a dummy initialize case"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        nattyParser.parse(\"the day after tomorrow\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main parser for Natty library, with reference to sample code below."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * https://www.programcreek.com/java-api-examples/?api\u003dcom.joestelmach.natty.Parser."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input User date input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Date of the user input if valid, null if invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Date runParser(String input) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cDateGroup\u003e groups \u003d nattyParser.parse(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (groups.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cDate\u003e dates \u003d groups.get(0).getDates();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (dates.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return dates.get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main entry for LocalDateTime conversion."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input User input of date/time information."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Valid time based on user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimeException if user inputs an invalid date/time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public LocalDateTime dateToLocalDateTime(String input) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Date date \u003d runParser(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 62
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/datetime/DateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.datetime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class DateTime\u003cE extends Temporal\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private E temporal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DateTime(E temporal) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.temporal \u003d temporal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public E value() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.temporal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static LocalDateTime now() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return LocalDateTime.now();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 23
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/datetime/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parser for date with or without time inputs for deadline and event tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateAndTime Date and time portion of the user input string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return LocalDateTime parsed based on the user input format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimeException if user inputs a date format that is not supported by Planner."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static LocalDateTime getStringToDate(String dateAndTime) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean am \u003d dateAndTime.contains(\"am\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean pm \u003d dateAndTime.contains(\"pm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (am \u0026\u0026 pm) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        dateAndTime \u003d dateAndTime.trim()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                .replaceAll(\" */ *\", \"/\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                .replaceAll(\" *: *\", \":\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                .replaceAll(\" *- *\", \"-\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                .replaceAll(\" *am *| *pm *\", \" \")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                .trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cString\u003e dateFormatStrings \u003d Arrays.asList("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"dd-MM-yyyy\", \"dd/MM/yyyy\", \"dd-MMM-yyyy\", \"dd/MMM/yyyy\", \"d/MM/yyyy\", \"d-MM-yyyy\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"dd MMM yyyy\", \"d MMM yyyy\", \"dd/M/yyyy\", \"dd-M-yyyy\", \"d-M-y\", \"d/M/y\", \"d/M\", \"d-M\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"M/d\", \"M-d\", \"M/y\", \"M-y\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e hourFormatStrings \u003d Arrays.asList(\"HH:mm\", \"HH:mm:ss\", \"H\", \"HH\", \"H:mm\", \"H:m\", \"HH:m\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime localDateTime \u003d getLocalDateTime(dateFormatStrings, hourFormatStrings, dateAndTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (localDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            localDateTime \u003d getLocalDateTimeHourOnly(hourFormatStrings, dateAndTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (localDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (am || pm) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (localDateTime.getHour() \u003e 12) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (pm) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                localDateTime \u003d localDateTime.plusHours(12);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static LocalDateTime getLocalDateTimeHourOnly(List\u003cString\u003e hourFormatStrings, String dateAndTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime localDateTime \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int j \u003d 0; j \u003c hourFormatStrings.size(); ++j) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                if (localDateTime !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                DateTimeFormatter fmt \u003d getFormatter(\"\", hourFormatStrings.get(j));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                localDateTime \u003d LocalDateTime.of(currentDate, LocalTime.parse(\" \" + dateAndTime, fmt));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static LocalDateTime getLocalDateTime("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            List\u003cString\u003e dateFormatStrings,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            List\u003cString\u003e hourFormatStrings,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String dateAndTime) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime localDateTime \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c dateFormatStrings.size(); ++i) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d 0; j \u003c hourFormatStrings.size(); ++j) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (localDateTime !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    DateTimeFormatter fmt \u003d getFormatter(dateFormatStrings.get(i), hourFormatStrings.get(j));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    localDateTime \u003d LocalDateTime.parse(dateAndTime, fmt);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static DateTimeFormatter getFormatter(String dateFormat, String hourFormat) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .appendPattern(dateFormat)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .optionalStart().appendPattern(\" \" + hourFormat).optionalEnd()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .optionalStart().appendPattern(\" HHmm\").optionalEnd()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .optionalStart().appendPattern(\" hmm\").optionalEnd()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .optionalStart().appendPattern(\" hm\").optionalEnd()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .toFormatter();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "namiwa": 16,
      "-": 90
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/periods/TimeInterval.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.periods;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.UnsupportedTemporalTypeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TimeInterval implements TemporalAmount, Serializable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Period dateDuration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Duration timeDuration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final double daysInYear \u003d 365.2422;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final int secondsInDay \u003d 86400;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static final TimeInterval ZERO \u003d new TimeInterval();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(Period dateDuration, Duration timeDuration) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(dateDuration, timeDuration);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(TimePeriod timePeriod) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(timePeriod);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(TemporalAmount temporalAmount) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(temporalAmount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(Temporal begin, Temporal end) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(begin, end);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(Period dateDuration) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(dateDuration, Duration.ZERO);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(Duration timeDuration) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(Period.ZERO, timeDuration);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(Period.ZERO, Duration.ZERO);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void adjustDateTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Duration newTimeDuration;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (newTimeDuration \u003d this.timeDuration.plusSeconds(TimeInterval.secondsInDay);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             newTimeDuration.isNegative();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             newTimeDuration \u003d newTimeDuration.plusSeconds(TimeInterval.secondsInDay)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.dateDuration \u003d this.dateDuration.minusDays(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.timeDuration \u003d newTimeDuration;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (newTimeDuration \u003d this.timeDuration.minusSeconds(TimeInterval.secondsInDay);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             !newTimeDuration.isNegative();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             newTimeDuration \u003d newTimeDuration.minusSeconds(TimeInterval.secondsInDay)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.dateDuration \u003d this.dateDuration.plusDays(1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.timeDuration \u003d newTimeDuration;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Period getDateDuration() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.adjustDateTime();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.dateDuration;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Duration getTimeDuration() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.adjustDateTime();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.timeDuration;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setDateDuration(Period dateDuration) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.dateDuration \u003d dateDuration;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setTimeDuration(Duration timeDuration) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.timeDuration \u003d timeDuration;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(TimeInterval timeInterval) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.dateDuration \u003d timeInterval.dateDuration;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.timeDuration \u003d timeInterval.timeDuration;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(TimePeriod timePeriod) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(Duration.between(timePeriod.getBegin(), timePeriod.getEnd()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(Temporal begin, Temporal end) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(TimeInterval.between(begin, end));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(TemporalAmount temporalAmount) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(Duration.from(temporalAmount));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(Duration timeDuration) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(Period.ZERO, timeDuration);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(Period dateDuration, Duration timeDuration) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.dateDuration \u003d dateDuration;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.timeDuration \u003d timeDuration;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Period toPeriod() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getDateDuration();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Convert the time stored in this object to an equivalent Duration object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return a Duration object which represent the total time with seconds"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Duration toDuration() { // Estimate"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        double daysToAdd \u003d TimeInterval.daysInYear * this.dateDuration.getYears()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + TimeInterval.daysInYear * this.dateDuration.getMonths() / 12"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + this.dateDuration.getDays();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        double nanosToAdd \u003d daysToAdd * TimeInterval.secondsInDay * 1000000000;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.timeDuration.plusNanos((long)nanosToAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval plus(Period dateDuration, Duration timeDuration) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.dateDuration.plus(dateDuration), this.timeDuration.plus(timeDuration));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval plus(TimeInterval other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.plus(other.dateDuration, other.timeDuration);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval plus(Period dateDuration) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.plus(dateDuration, Duration.ZERO);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval plus(Duration timeDuration) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.plus(Period.ZERO, timeDuration);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval minus(Period dateDuration, Duration timeDuration) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.dateDuration.minus(dateDuration), this.timeDuration.minus(timeDuration));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval minus(TimeInterval other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.minus(other.dateDuration, other.timeDuration);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval minus(Period dateDuration) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.minus(dateDuration, Duration.ZERO);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval minus(Duration timeDuration) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.minus(Period.ZERO, timeDuration);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval multipliedBy(int scalar) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.dateDuration.multipliedBy(scalar), this.timeDuration.multipliedBy(scalar));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(Temporal begin, Temporal end) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ZERO, Duration.between(begin, end));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Return the difference in time between two LocalDateTime epochs."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin the 1st epoch"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end the 2nd epoch"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return a TimeInterval object representing the difference between the two epochs."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(LocalDateTime begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Period dateDiff \u003d Period.between(begin.toLocalDate(), end.toLocalDate());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Duration timeDiff \u003d Duration.between(begin.toLocalTime(), end.toLocalTime());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(dateDiff, timeDiff);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(LocalDateTime begin, LocalDate end) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return TimeInterval.between(begin, LocalDateTime.of(end, LocalTime.MIN));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(LocalDate begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return TimeInterval.between(LocalDateTime.of(begin, LocalTime.MIN), end);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(LocalDate begin, LocalDate end) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.between(begin, end));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(LocalTime begin, LocalTime end) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.between(begin, end));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isZeroApprox() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.toDuration().isZero();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isZeroFrom(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return localDateTime.plus(this).isEqual(localDateTime);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isZeroFromNow() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isZeroFrom(LocalDateTime.now());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isNegativeApprox() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.toDuration().isNegative();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isNegativeFrom(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return localDateTime.plus(this).isBefore(localDateTime);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isNegativeFromNow() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isNegativeFrom(LocalDateTime.now());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isPositiveApprox() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Duration val \u003d this.toDuration();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return !(val.isZero() || val.isNegative());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isPositiveFrom(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return localDateTime.plus(this).isAfter(localDateTime);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isPositiveFromNow() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isPositiveFrom(LocalDateTime.now());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isLessThan(TimeInterval other) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.minus(other).isNegativeApprox();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isGreaterThan(TimeInterval other) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return !this.isLessThan(other);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofNanos(int nanos) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofNanos(nanos));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofMillis(int millis) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofMillis(millis));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofSeconds(int seconds) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return TimeInterval.ofSeconds(seconds, 0);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofSeconds(int seconds, int nanoAdjustment) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofSeconds(seconds, nanoAdjustment));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofMinutes(int minutes) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofMinutes(minutes));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofHours(int hours) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofHours(hours));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofDays(int days) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ofDays(days));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofWeeks(int weeks) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ofWeeks(weeks));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofMonths(int months) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ofMonths(months));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofYears(int years) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ofYears(years));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval min(TimeInterval timeInterval1, TimeInterval timeInterval2) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return timeInterval1.isGreaterThan(timeInterval2) ? timeInterval2 : timeInterval1;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval max(TimeInterval timeInterval1, TimeInterval timeInterval2) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return timeInterval1.isGreaterThan(timeInterval2) ? timeInterval1 : timeInterval2;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public long get(TemporalUnit temporalUnit) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.dateDuration.get(temporalUnit);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (UnsupportedTemporalTypeException ex) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.timeDuration.get(temporalUnit);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cTemporalUnit\u003e getUnits() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        List\u003cTemporalUnit\u003e units \u003d this.dateDuration.getUnits();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        units.addAll(this.timeDuration.getUnits());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return units;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal addTo(Temporal temporal) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.timeDuration.addTo(this.dateDuration.addTo(temporal));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal subtractFrom(Temporal temporal) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.timeDuration.subtractFrom(this.dateDuration.subtractFrom(temporal));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.toDuration().toString();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Convert to readable string instead of default string."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return human-readable string representation"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toReadableString() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.toString().substring(2)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .replace(\"D\", \"Days\")"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .replace(\"H\", \"Hours\")"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .replace(\"M\", \"Minutes\")"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .replace(\"S\", \"Seconds\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 330
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/periods/TimePeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.periods;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public interface TimePeriod {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimeInterval getInterval();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    LocalTime getBeginTime();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    LocalTime getEndTime();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    Temporal getBegin();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    Temporal getEnd();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003cE extends TimePeriod\u003e boolean isClashing(E other);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003cE extends TemporalAccessor\u003e boolean isClashing(E other);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003cE extends TemporalAccessor\u003e boolean isClashing(E begin, E end) throws ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    List\u003cDayOfWeek\u003e getDaysOfWeek();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    String toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 34
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/periods/TimePeriodSpanning.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.periods;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TimePeriodSpanning implements TimePeriod {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private LocalDateTime begin;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriod check."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end End date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimePeriodException thrown when date period is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, end);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDate begin, LocalDate end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(LocalDateTime.of(begin, LocalTime.MIN), LocalDateTime.of(end, LocalTime.MIN));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalTime begin, LocalTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(LocalDateTime.of(LocalDate.now(), begin), LocalDateTime.of(LocalDate.now(), end));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriod check."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param duration Duration of the period."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimePeriodException thrown when date period is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDateTime begin, TimeInterval duration) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, duration);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDate begin, TimeInterval duration) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(LocalDateTime.of(begin, LocalTime.MIN), duration);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalTime begin, TimeInterval duration) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(LocalDateTime.of(LocalDate.now(), begin), duration);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriod check."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start date."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param isInstantEnd Ends immediately or not."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimePeriodException thrown when date period is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDateTime begin, boolean isInstantEnd) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, (LocalDateTime) null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (isInstantEnd) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.setEnd(this.begin);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDate begin, boolean isInstantEnd) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(LocalDateTime.of(begin, LocalTime.MIN), isInstantEnd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalTime begin, boolean isInstantEnd) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(LocalDateTime.of(LocalDate.now(), begin), isInstantEnd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDateTime begin) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDate begin) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalTime begin) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning() throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(null, (LocalDateTime) null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Checker function for clashing time periods."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param localTime Given LocalTime."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param strictBegin Strict clashing for begin or not (begin matches ends)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param strictEnd Strict clashing for end or not (begin matches ends)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return Boolean result if the period clash."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime, boolean strictBegin, boolean strictEnd) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime begin \u003d this.begin.toLocalTime();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime end \u003d this.end.toLocalTime();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return localTime !\u003d null"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 (localTime.isAfter(begin)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 localTime.isBefore(end)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || strictBegin \u0026\u0026 localTime.equals(begin)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || strictEnd \u0026\u0026 localTime.equals(end));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Checker function for clashing time periods."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param localDateTime Given LocalDateTime."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param strictBegin Strict clashing for begin or not (begin matches ends)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param strictEnd Strict clashing for end or not (begin matches ends)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return Boolean result if the period clash."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime, boolean strictBegin, boolean strictEnd) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return localDateTime !\u003d null"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 (localDateTime.isAfter(this.begin)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 localDateTime.isBefore(this.end)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || strictBegin \u0026\u0026 localDateTime.equals(this.begin)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || strictEnd \u0026\u0026 localDateTime.equals(this.end));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(localDateTime, false, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(localTime, false, false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(new TimePeriodSpanning(begin, end));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDate begin, LocalDate end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(new TimePeriodSpanning(begin, end));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime begin, LocalTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(new TimePeriodSpanning(begin, end));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE extends TemporalAccessor\u003e boolean isClashing(E other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(LocalDateTime.from(other));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE extends TemporalAccessor\u003e boolean isClashing(E begin, E end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(LocalDateTime.from(begin), LocalDateTime.from(end));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check whether time period clashes with another."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param other the other time period"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashes, false otherwise"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriodSpanning other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 (this.begin \u003d\u003d other.begin \u0026\u0026 this.end \u003d\u003d other.end"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || other.isClashing(this.begin)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || other.isClashing(this.end)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || this.isClashing(other.begin)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || this.isClashing(other.end));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    // TODO: Combine the isClashing of TimePeriods"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriod other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (other instanceof TimePeriodSpanning) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.isClashing((TimePeriodSpanning) other);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else if (other instanceof  TimePeriodWeekly) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.isClashing((TimePeriodWeekly) other);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriodWeekly other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return other !\u003d null \u0026\u0026 other.isClashing(this);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setBegin(LocalDateTime begin) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, this.end);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setEnd(LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(this.begin, end);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set period for this object."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start date."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end End date."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimePeriodException thrown when date period is invalid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (end !\u003d null \u0026\u0026 begin !\u003d null \u0026\u0026 end.isBefore(begin)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModInvalidTimePeriodException(\"End before begin!\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.begin \u003d begin;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalDateTime begin, TimeInterval duration) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, begin.plus(duration));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isExpired() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.end !\u003d null \u0026\u0026 (this.end.isBefore(now) || this.end.isEqual(now));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Make period expire immediately."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void endsNow() throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!this.isExpired()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.setEnd(LocalDateTime.now());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin + \" - \" + this.end;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval getInterval() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return TimeInterval.between(this.begin, this.end);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getBeginTime() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin.toLocalTime();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.end.toLocalTime();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDateTime getBegin() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cDayOfWeek\u003e getDaysOfWeek() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        long days \u003d this.getInterval().toDuration().toDays();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (days \u003e 6) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return Arrays.asList(DayOfWeek.values());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        List\u003cDayOfWeek\u003e ret \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDate begin \u003d this.begin.toLocalDate();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDate end \u003d this.end.toLocalDate();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (; begin !\u003d end; begin \u003d begin.plusDays(1)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ret.add(begin.getDayOfWeek());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ret.add(end.getDayOfWeek());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 270
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/periods/TimePeriodWeekly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.periods;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TimePeriodWeekly implements TimePeriod {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private LocalTime begin;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private LocalTime end;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private boolean isUntilNextDay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriodWeekly."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end End time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek Day of week where this period applies."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodWeekly(LocalTime begin, LocalTime end, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.initialize(begin, end, dayOfWeek);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriodWeekly."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param duration Duration of the period."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek Day of week where this period applies."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodWeekly(LocalTime begin, TimeInterval duration, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.initialize(begin, duration, dayOfWeek);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriodWeekly."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param isInstantEnd Ends immediately or not."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek Day of week where this period applies."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodWeekly(LocalTime begin, boolean isInstantEnd, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, (LocalTime) null, dayOfWeek);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (isInstantEnd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.setEnd(this.begin);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodWeekly(LocalTime begin, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, true, dayOfWeek);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodWeekly(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(null, (LocalTime) null, dayOfWeek);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Checker function for clashing time periods."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param localTime Given LocalTime."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param strictBegin Strict clashing for begin or not (begin matches ends)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param strictEnd Strict clashing for end or not (begin matches ends)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek Given day of week."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return Boolean result if the period clash."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime, boolean strictBegin, boolean strictEnd, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (localTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean beforeBegin \u003d localTime.isBefore(this.begin);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean afterBegin \u003d localTime.isAfter(this.begin);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean beforeEnd \u003d localTime.isBefore(this.end);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean afterEnd \u003d localTime.isAfter(this.end);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return !this.isUntilNextDay"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \u0026\u0026 (dayOfWeek \u003d\u003d null || this.dayOfWeek.equals(dayOfWeek))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \u0026\u0026 afterBegin \u0026\u0026 beforeEnd"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || this.isUntilNextDay"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \u0026\u0026 ((dayOfWeek \u003d\u003d null || this.dayOfWeek.equals(dayOfWeek)) \u0026\u0026 afterBegin \u0026\u0026 afterEnd"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        || (dayOfWeek \u003d\u003d null || this.dayOfWeek.plus(1).equals(dayOfWeek)) \u0026\u0026 beforeBegin \u0026\u0026 beforeEnd)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || strictBegin \u0026\u0026 localTime.equals(this.begin)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || strictEnd \u0026\u0026 localTime.equals(this.end);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime, boolean strictBegin, boolean strictEnd) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return localDateTime !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 this.isClashing(localDateTime.toLocalTime(), strictBegin, strictEnd, localDateTime.getDayOfWeek());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime, boolean strictBegin, boolean strictEnd, LocalDate localDate) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(localTime, strictBegin, strictEnd, localDate.getDayOfWeek());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(localDateTime, false, false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(localTime, false, false, dayOfWeek);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(localTime, false, false, (DayOfWeek) null);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDate localDate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(new TimePeriodWeekly(LocalTime.MIN, LocalTime.MAX, localDate.getDayOfWeek()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(new TimePeriodSpanning(begin, end));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE extends TemporalAccessor\u003e boolean isClashing(E begin, E end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(LocalDateTime.from(begin), LocalDateTime.from(end));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime begin, LocalTime end) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin \u003d\u003d begin \u0026\u0026 this.end \u003d\u003d end || this.isClashing(begin) || this.isClashing(end);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check whether time period clashes with another."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param other the other time period"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashes, false otherwise"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriodSpanning other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Duration duration \u003d other.getInterval().toDuration().minusDays(1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (duration.toDays() \u003e 5) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (duration.isNegative()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.isClashing("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    new TimePeriodWeekly("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            other.getBegin().toLocalTime(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            other.getEnd().toLocalTime(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            other.getBegin().getDayOfWeek()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (duration.isZero()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.isClashing("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    new TimePeriodWeekly("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            other.getBegin().toLocalTime(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            other.getEnd().toLocalTime().minusNanos(1),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            other.getBegin().getDayOfWeek()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime otherBeginEndOfDay \u003d LocalDateTime.of(other.getBegin().toLocalDate(), LocalTime.MAX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime otherEndBeginOfDay \u003d LocalDateTime.of(other.getBegin().toLocalDate(), LocalTime.MIN);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (this.isClashing(other.getBegin(), otherBeginEndOfDay)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || this.isClashing(otherEndBeginOfDay, other.getEnd())) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ModInvalidTimePeriodException ex) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDate begin \u003d other.getBegin().toLocalDate().plusDays(1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDate end \u003d other.getEnd().toLocalDate();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (; begin !\u003d end; begin \u003d begin.plusDays(1)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (this.isClashing(begin)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check whether time period clashes with another."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param other the other time period"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashes, false otherwise"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriodWeekly other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 (this.begin \u003d\u003d other.begin \u0026\u0026 this.end \u003d\u003d other.end"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || this.isClashing(other.begin, other.dayOfWeek)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || this.isClashing(other.end, other.dayOfWeek)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || other.isClashing(this.begin, this.dayOfWeek)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || other.isClashing(this.end, this.dayOfWeek));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    // TODO: Combine the isClashing of TimePeriods"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriod other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (other instanceof TimePeriodSpanning) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.isClashing((TimePeriodSpanning) other);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else if (other instanceof  TimePeriodWeekly) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.isClashing((TimePeriodWeekly) other);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE extends TemporalAccessor\u003e boolean isClashing(E other) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(LocalDateTime.from(other));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.dayOfWeek;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setBegin(LocalTime begin) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, this.end);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setEnd(LocalTime end) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(this.begin, end);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setDayOfWeek(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set period for this object."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start time."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end End time."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalTime begin, LocalTime end) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (begin !\u003d null \u0026\u0026 end !\u003d null \u0026\u0026 end.isBefore(begin)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.isUntilNextDay \u003d true;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.isUntilNextDay \u003d false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.begin \u003d begin;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalTime begin, TimeInterval duration) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, begin.plus(duration.getTimeDuration()));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Initialize attributes."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start time."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end End time."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek Day of week where this period applies."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void initialize(LocalTime begin, LocalTime end, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, end);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setDayOfWeek(dayOfWeek);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void initialize(LocalTime begin, TimeInterval duration, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, duration);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setDayOfWeek(dayOfWeek);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin + \" - \" + this.end + \" on \" + this.dayOfWeek;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval getInterval() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return TimeInterval.between(this.begin, this.end);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getBeginTime() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getBegin() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getEnd() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cDayOfWeek\u003e getDaysOfWeek() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new ArrayList\u003c\u003e(Collections.singleton(this.dayOfWeek));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 291
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/reminder/OneDayReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.util.legacy.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.command.ReminderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.legacy.ModTimeIntervalTooCloseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.legacy.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithPeriod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.periods.TimePeriodSpanning;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class OneDayReminder extends Reminder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public OneDayReminder(List\u003cTask\u003e tasks, TimeInterval remindBefore, TimeInterval checkEvery)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(remindBefore, checkEvery);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public OneDayReminder(List\u003cTask\u003e tasks, int minutesBefore, int minutesEvery) throws"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(minutesBefore, minutesEvery);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public OneDayReminder(List\u003cTask\u003e tasks, TimeInterval remindBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(remindBefore);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public OneDayReminder(List\u003cTask\u003e tasks, int minutesBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(minutesBefore);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public OneDayReminder(List\u003cTask\u003e tasks) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void execute(LocalDateTime now) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            Thread.sleep(86400000);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            this.thread.notify();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            new PlannerUi().reminderMsg();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 52
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/reminder/OneHourReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.util.legacy.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.legacy.ModTimeIntervalTooCloseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.legacy.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithPeriod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.periods.TimePeriodSpanning;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class OneHourReminder extends Reminder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public OneHourReminder(List\u003cTask\u003e tasks, TimeInterval remindBefore, TimeInterval checkEvery)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(remindBefore, checkEvery);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public OneHourReminder(List\u003cTask\u003e tasks, int minutesBefore, int minutesEvery)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(minutesBefore, minutesEvery);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public OneHourReminder(List\u003cTask\u003e tasks, TimeInterval remindBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(remindBefore);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public OneHourReminder(List\u003cTask\u003e tasks, int minutesBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(minutesBefore);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public OneHourReminder(List\u003cTask\u003e tasks) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void execute(LocalDateTime now) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            Thread.sleep(3600000);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            this.thread.notify();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            new PlannerUi().reminderMsg();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 52
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/reminder/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.reminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.sql.Time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import com.google.gson.internal.bind.TimeTypeAdapter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModTimeIntervalTooCloseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public abstract class Reminder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimeInterval remindBefore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimeInterval checkEvery;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    Thread thread;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimeInterval minBefore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    volatile boolean kill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for Reminder."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param remindBefore TimeInterval object indicating the amount of time to start reminding beforehand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param checkEvery TimeInterval object indicating the amount of time to wait between reminds"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Reminder(TimeInterval remindBefore, TimeInterval checkEvery)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.minBefore \u003d TimeInterval.ofMinutes(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (remindBefore.isLessThan(this.minBefore)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModTimeIntervalTooCloseException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.remindBefore \u003d remindBefore;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.checkEvery \u003d checkEvery;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.kill \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.thread \u003d new Thread(this::remind);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Reminder(int minutesBefore, int minutesEvery) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(TimeInterval.ofMinutes(minutesBefore), TimeInterval.ofMinutes(minutesEvery));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Reminder(TimeInterval remindBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(remindBefore, TimeInterval.min(TimeInterval.ofHours(1), remindBefore));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Reminder(int minutesBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(minutesBefore, Math.min(60, minutesBefore));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Reminder() throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(TimeInterval.ofHours(6), TimeInterval.ofHours(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Start the reminder if it\u0027s not running."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.kill \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.thread.start();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Kill the reminder if it\u0027s running."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.thread.isAlive()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.kill \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (this.thread.getState().equals(Thread.State.TIMED_WAITING)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                this.thread.interrupt();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isStopped() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return !this.thread.isAlive();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Force reminder to check upcoming tasks and remind immediately."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void forceCheckReminder() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.kill \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!this.thread.isAlive()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.thread.start();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else if (this.thread.getState().equals(Thread.State.TIMED_WAITING)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.thread.interrupt();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Core logic for reminder to run."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void remind() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime targetTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime now;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        //TimeInterval timeIntervals;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        long sleepSeconds;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (!this.kill) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (now.isAfter(targetTime)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                targetTime \u003d now.plus(this.checkEvery);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                this.execute(now);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                // timeIntervals \u003d TimeInterval.ofMinutes(timeInterval);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                TimeInterval.ofMinutes(12);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            sleepSeconds \u003d Math.max(TimeInterval.between(LocalDateTime.now(), targetTime)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .toDuration().getSeconds() - 1, 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (sleepSeconds \u003e 0 \u0026\u0026 !this.kill) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    Thread.sleep(sleepSeconds * 1000);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                } catch (InterruptedException ignored) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    targetTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    abstract void execute(LocalDateTime now);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 118
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/reminder/ThirtyMinReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.util.legacy.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.command.ReminderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.legacy.ModTimeIntervalTooCloseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.legacy.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithPeriod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.periods.TimePeriodSpanning;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class ThirtyMinReminder extends Reminder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public ThirtyMinReminder(List\u003cTask\u003e tasks, TimeInterval remindBefore, TimeInterval checkEvery)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(remindBefore, checkEvery);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public ThirtyMinReminder(List\u003cTask\u003e tasks, int minutesBefore, int minutesEvery)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(minutesBefore, minutesEvery);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public ThirtyMinReminder(List\u003cTask\u003e tasks, TimeInterval remindBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(remindBefore);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public ThirtyMinReminder(List\u003cTask\u003e tasks, int minutesBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(minutesBefore);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public ThirtyMinReminder(List\u003cTask\u003e tasks) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void execute(LocalDateTime now) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            //Thread.sleep(1800000);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            Thread.sleep(2000);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            this.thread.notify();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            new PlannerUi().reminderMsg();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 53
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/reminder/TwevleHourReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.util.legacy.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.legacy.ModTimeIntervalTooCloseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.legacy.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithPeriod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.periods.TimePeriodSpanning;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class TwevleHourReminder extends Reminder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public TwevleHourReminder(List\u003cTask\u003e tasks, TimeInterval remindBefore, TimeInterval checkEvery)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(remindBefore, checkEvery);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public TwevleHourReminder(List\u003cTask\u003e tasks, int minutesBefore, int minutesEvery)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(minutesBefore, minutesEvery);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public TwevleHourReminder(List\u003cTask\u003e tasks, TimeInterval remindBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(remindBefore);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public TwevleHourReminder(List\u003cTask\u003e tasks, int minutesBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(minutesBefore);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public TwevleHourReminder(List\u003cTask\u003e tasks) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void execute(LocalDateTime now) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            Thread.sleep(43200000);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            this.thread.notify();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            new PlannerUi().reminderMsg();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 52
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/reminder/UpcomingTaskReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModTimeIntervalTooCloseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithPeriod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodSpanning;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class UpcomingTaskReminder extends Reminder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UpcomingTaskReminder(List\u003cTask\u003e tasks, TimeInterval remindBefore, TimeInterval checkEvery)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(remindBefore, checkEvery);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UpcomingTaskReminder(List\u003cTask\u003e tasks, int minutesBefore, int minutesEvery)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(minutesBefore, minutesEvery);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UpcomingTaskReminder(List\u003cTask\u003e tasks, TimeInterval remindBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(remindBefore);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UpcomingTaskReminder(List\u003cTask\u003e tasks, int minutesBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(minutesBefore);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UpcomingTaskReminder(List\u003cTask\u003e tasks) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void execute(LocalDateTime now) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            new PlannerUi().printUpcomingTasks("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.getUpcomingTasks("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            new TimePeriodSpanning(now, now.plus(this.remindBefore))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ModInvalidTimePeriodException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get upcoming tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param timePeriodSpanning How long before the task begin to remind"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return the upcoming tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private List\u003cTask\u003e getUpcomingTasks(TimePeriodSpanning timePeriodSpanning) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        List\u003cTask\u003e upcomingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (Task task: this.tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (task instanceof TaskWithPeriod"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \u0026\u0026 !task.isDone()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \u0026\u0026 ((TaskWithPeriod)task).isClashing(timePeriodSpanning)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                upcomingTasks.add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return upcomingTasks;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 73
    }
  },
  {
    "path": "src/main/java/planner/util/logger/PlannerLogger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.Formatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.logger.formatter.LoggerFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class PlannerLogger {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static FileHandler fileText;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static Formatter formatter \u003d new LoggerFormatter();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static FileHandler fileHTML;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static Formatter formatterHTML;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Setup up for our logger file, will continue to add logs after initial run."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws IOException when log file is failed to be made."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void setLogFile(Storage store) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Path log \u003d Paths.get(\"data/logging.log\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (!Files.isRegularFile(log)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            store.makeFile(log);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        fileText \u003d new FileHandler(\"data/logging.log\", 8096, 1, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        fileText.setFormatter(formatter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.addHandler(fileText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.log(Level.INFO, \"Log File create: Success\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded function for logging module exceptions."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param em ModException super class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void log(ModException em) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.log(Level.WARNING, \" :\" + em.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded function for logging any other exceptions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param e Exceptions super class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void log(Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.severe(e.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.log(Level.WARNING, \" :\" + e.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded function for logging IOException exceptions."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param eio only instance thrown is when log files fails to be made."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void log(IOException eio) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.severe(eio.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.log(Level.WARNING, \" :\" + eio.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void log(Throwable e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.severe(e.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.log(Level.WARNING, \":\" + e.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 75
    }
  },
  {
    "path": "src/main/java/planner/util/logger/formatter/LoggerFormatter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.logger.formatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.Formatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.LogRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class LoggerFormatter extends Formatter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String format(LogRecord logRecord) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        StringBuffer buff \u003d new StringBuffer(1000);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        buff.append(\"Logging Event: \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        buff.append(new Date().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        buff.append(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (logRecord.getLevel().intValue() \u003e\u003d Level.WARNING.intValue()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            buff.append(\"Status Level: \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            buff.append(logRecord.getLevel());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            buff.append(logRecord.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        buff.append(\"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return buff.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Setting head of logging session."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param h handler to the logger instance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return String to indicate start of logging session."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getHead(Handler h) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"--Start: Session Begin- \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + new Date().toString()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String calculateDate(long millis) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"MM-dd-yyyy HHmm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Date resultDate \u003d new Date(millis);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return dateFormat.format(resultDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Setting head of logging session."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param h handler to the logger instance."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return String to indicate start of logging session."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getTail(Handler h) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"--End: Session End- \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + new Date().toString()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 56
    }
  },
  {
    "path": "src/main/java/planner/util/modules/ModulesUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.modules;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithPeriod;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodSpanning;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ModulesUtils {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get free time slots for a specific date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param localDate input date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return a list of free time slots"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static ArrayList\u003cTimePeriodSpanning\u003e getFreeTimePeriods("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            LocalDate localDate, ArrayList\u003cTaskWithPeriod\u003e tasksInDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ArrayList\u003cTimePeriodSpanning\u003e ret \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime begin \u003d LocalTime.MIN;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime end;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (Task task: tasksInDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            TaskWithPeriod currentTask \u003d ((TaskWithPeriod) task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            end \u003d currentTask.getBeginTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (end.isAfter(begin)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    ret.add(new TimePeriodSpanning(begin, end));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                } catch (ModInvalidTimePeriodException ex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    begin \u003d currentTask.getEndTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            begin \u003d currentTask.getEndTime();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 41
    }
  },
  {
    "path": "src/main/java/planner/util/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Path to storage data file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Boolean flag to indicate if data file exists."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Path dataPath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean dataPathExists \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean fileExists \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Default Constructor for storage class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        path \u003d Paths.get(\"data/config.json\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        setFileExists();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded Constructor for storage class, specifying the data path as String."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        dataPath \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        setDataPathExists();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setDataPath(Path dataPath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.dataPath \u003d dataPath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        setDataPathExists();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean getFileExits() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return fileExists;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean getDataPathExists() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return dataPathExists;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void setFileExists() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        fileExists \u003d Files.isRegularFile(path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void setDataPathExists() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        dataPathExists \u003d Files.isRegularFile(dataPath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void makeFile(Path path) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Files.createFile(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Helper function to write nusMods data to file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param data List of String of data from nusMods."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void writeModsData(List\u003cString\u003e data) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (!dataPathExists) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                makeFile(dataPath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                setDataPathExists();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Files.write(dataPath, data, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    //@@author LongLeCE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Write an object to file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param object object to write"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param path file path"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void writeGson(Object object, String path) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        FileWriter writer \u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            makeFile(Paths.get(path));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.getMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            writer \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        gson.toJson(object, writer);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            assert writer !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Read an object from file."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param path file path"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param clazz Class of object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE\u003e E readGson(String path, Class\u003cE\u003e clazz) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        FileReader reader;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            reader \u003d new FileReader(path);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return gson.fromJson(reader, clazz);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 44,
      "namiwa": 90
    }
  },
  {
    "path": "src/main/resources/view/duke.DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 16
    }
  },
  {
    "path": "src/main/resources/view/duke.MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 19
    }
  },
  {
    "path": "src/test/java/planner/DummyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DummyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @DisplayName(\"Dummy Test\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 4,
      "-": 13
    }
  },
  {
    "path": "src/test/java/planner/InputTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": " * Adapted from https://stackoverflow.com/questions/1119385/junit-test-for-system-out-println."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": " * Helper class to test for capturing the console output of planner."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class InputTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected ByteArrayInputStream testIn;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected final InputStream originalIn \u003d System.in;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Setting stream redirection for planner testing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected void provideInput(String data) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        testIn \u003d new ByteArrayInputStream(data.getBytes());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setIn(testIn);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Restoring streams after testing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setIn(originalIn);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 49
    }
  },
  {
    "path": "src/test/java/planner/PlannerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class PlannerTest extends InputTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static final String LINE \u003d \"_______________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Testing the Planner class with bye as the only input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * and checking the expected output."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * outContent must have it\u0027s carriage return removed due"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * to windows/linus newline differences."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @DisplayName(\"Termination Test\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testPlan() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String test \u003d \"bye\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        provideInput(test);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String[] hold \u003d {\"\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        CliLauncher.main(hold);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String expected \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                LINE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"Welcome to ModPlanner, your one stop solution to module planning!\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"Begin typing to get started!\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + LINE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + LINE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"Thanks for using ModPlanner!\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"Your data will be stored in file shortly!\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + LINE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + LINE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, outContent.toString().replace(\"\\r\", \"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "namiwa": 41
    }
  },
  {
    "path": "src/test/java/planner/logic/command/ShowTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.InputTest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class ShowTest extends InputTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * For testing, the following format of command to be tested, followed by the bye command must be followed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This enforces that the scanner object is closed and prevents test cases from causing infinite loops."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @DisplayName(\"Show module test\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void testShow() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        final String test \u003d \"show module\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        final String bye \u003d \"bye\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        provideInput(test + bye);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        final String[] hold \u003d {\"a\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        CliLauncher.main(hold);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(outContent, outContent);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 27
    }
  },
  {
    "path": "src/test/java/planner/logic/modules/module/AttributesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class AttributesTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final Attributes attributes \u003d new Attributes();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testNull() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(attributes);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testIsSu() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertFalse(attributes.isSu());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testisFyp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertFalse(attributes.isFyp());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String expected \u003d \"SU: False\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, attributes.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 35
    }
  },
  {
    "path": "src/test/java/planner/logic/modules/module/ExamInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ExamInfoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final ExamInfo examInfo \u003d new ExamInfo();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testSemester() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int expected \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, examInfo.getSemester());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testExamData() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String expected \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, examInfo.getExamDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testExamDuration() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int expected \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, examInfo.getExamDuration());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String expected \u003d \"{Semester:0,,0}\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 34
    }
  },
  {
    "path": "src/test/java/planner/logic/modules/module/ModuleInfoDetailedTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModuleInfoDetailedTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final ModuleInfoDetailed modDetailed \u003d new ModuleInfoDetailed();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    final String expected \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testModuleCode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, modDetailed.getModuleCode());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, modDetailed.getTitle());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 25
    }
  },
  {
    "path": "src/test/java/planner/logic/parser/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 4
    }
  },
  {
    "path": "src/test/java/planner/util/NattyTesting.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.datetime.NattyWrapper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class NattyTesting {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private NattyWrapper natty \u003d new NattyWrapper();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @DisplayName(\"Testing Date return\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void nattyDateTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Date first \u003d natty.runParser(\"today\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            TimeUnit.MILLISECONDS.sleep(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Date second \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertTrue(second.after(first));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModInvalidTimeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (InterruptedException ex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Thread.currentThread().interrupt();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @DisplayName(\"Testing Local Date Time\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void nattyLocalDateTimeTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            LocalDateTime before \u003d natty.dateToLocalDateTime(\"today\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            TimeUnit.MILLISECONDS.sleep(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            LocalDateTime after \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertTrue(before.isBefore(after));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModInvalidTimeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }  catch (InterruptedException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Thread.currentThread().interrupt();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 51
    }
  },
  {
    "path": "src/test/java/planner/util/PlannerParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class PlannerParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//TODO: Add planner test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 13
    }
  }
]
